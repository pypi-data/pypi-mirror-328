########################################################################
###############################  BUILD  ################################
########################################################################
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

########################################################################
##############################  PROJECT  ###############################
########################################################################
[project]
name = "fastcc"
version = "4.0.5"
description = "Lightweight, efficient and developer-friendly framework for component communication"
readme = "README.md"
requires-python = ">=3.13"
authors = [
  { name = "J. Baudisch", email = "justin.baudisch@hsbi.de" },
]
maintainers = [
  { name = "J. Baudisch", email = "justin.baudisch@hsbi.de" }
]
keywords = ["python", "framework", "asyncio", "aiomqtt", "mqtt", "iot"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
dependencies = [
    "aiomqtt",      # Asynchronous MQTT Client (https://github.com/empicano/aiomqtt)
    "protobuf",     # Data Serialization (https://github.com/protocolbuffers/protobuf)
]

[project.optional-dependencies]
dev = [
    # Linting & Formatting
    "ruff",
    "mypy",

    # Documentation
    "sphinx",
    "furo",

    # Typing
    "types-protobuf",
]

[project.urls]
Repository = "https://github.com/ReMi-HSBI/fastcc"
Issues = "https://github.com/ReMi-HSBI/fastcc/issues"

########################################################################
###############################  TOOLS  ################################
########################################################################
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"fastcc" = ["py.typed"]

[tool.ruff]
src = ["src"]
cache-dir = ".cache/ruff"
line-length = 80
preview = true
extend-exclude = [
    "examples/location_pb2.py",
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",        # pyflakes (https://docs.astral.sh/ruff/rules/#pyflakes-f)
    "E",        # pycodestyle errors (https://docs.astral.sh/ruff/rules/#error-e)
    "W",        # pycodestyle warnings (https://docs.astral.sh/ruff/rules/#warning-w)
    "C90",      # mccabe (https://docs.astral.sh/ruff/rules/#mccabe-c90)
    "I",        # isort (https://docs.astral.sh/ruff/rules/#isort-i)
    "N",        # pep8-naming (https://docs.astral.sh/ruff/rules/#pep8-naming-n)
    "D",        # pydocstyle (https://docs.astral.sh/ruff/rules/#pydocstyle-d)
    "UP",       # pyupgrade (https://docs.astral.sh/ruff/rules/#pyupgrade-up)
    "YTT",      # flake8-2020 (https://docs.astral.sh/ruff/rules/#flake8-2020-ytt)
    "ANN",      # flake8-annotations (https://docs.astral.sh/ruff/rules/#flake8-annotations-ann)
    "ASYNC",    # flake8-async (https://docs.astral.sh/ruff/rules/#flake8-async-async)
    "S",        # flake8-bandit (https://docs.astral.sh/ruff/rules/#flake8-bandit-s)
    "BLE",      # flake8-blind-except (https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble)
    "FBT",      # flake8-boolean-trap (https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt)
    "B",        # flake8-bugbear (https://docs.astral.sh/ruff/rules/#flake8-bugbear-b)
    "A",        # flake8-builtins (https://docs.astral.sh/ruff/rules/#flake8-builtins-a)
    "COM",      # flake8-commas (https://docs.astral.sh/ruff/rules/#flake8-commas-com)
    # "CPY",      # flake8-copyright (https://docs.astral.sh/ruff/rules/#flake8-copyright-cpy)
    "C4",       # flake8-comprehensions (https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4)
    "DTZ",      # flake8-datetimez (https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz)
    "T10",      # flake8-debugger (https://docs.astral.sh/ruff/rules/#flake8-debugger-t10)
    # "DJ",       # flake8-django (https://docs.astral.sh/ruff/rules/#flake8-django-dj)
    "EM",       # flake8-errmsg (https://docs.astral.sh/ruff/rules/#flake8-errmsg-em)
    "EXE",      # flake8-executable (https://docs.astral.sh/ruff/rules/#flake8-executable-exe)
    "FA",       # flake8-future-annotations (https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa)
    "ISC",      # flake8-implicit-str-concat (https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc)
    # "ICN",      # flake8-import-conventions (https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn)
    "LOG",      # flake8-logging (https://docs.astral.sh/ruff/rules/#flake8-logging-log)
    "G",        # flake8-logging-format (https://docs.astral.sh/ruff/rules/#flake8-logging-format-g)
    "INP",      # flake8-no-pep420 (https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp)
    "PIE",      # flake8-pie (https://docs.astral.sh/ruff/rules/#flake8-pie-pie)
    "T20",      # flake8-print (https://docs.astral.sh/ruff/rules/#flake8-print-t20)
    "PYI",      # flake8-pyi (https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi)
    "PT",       # flake8-pytest-style (https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt)
    "Q",        # flake8-quotes (https://docs.astral.sh/ruff/rules/#flake8-quotes-q)
    "RSE",      # flake8-raise (https://docs.astral.sh/ruff/rules/#flake8-raise-rse)
    "RET",      # flake8-return (https://docs.astral.sh/ruff/rules/#flake8-return-ret)
    "SLF",      # flake8-self (https://docs.astral.sh/ruff/rules/#flake8-self-slf)
    "SLOT",     # flake8-slots (https://docs.astral.sh/ruff/rules/#flake8-slots-slot)
    "SIM",      # flake8-simplify (https://docs.astral.sh/ruff/rules/#flake8-simplify-sim)
    "TID",      # flake8-tidy-imports (https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid)
    "TC",       # flake8-type-checking (https://docs.astral.sh/ruff/rules/#flake8-type-checking-tc)
    # "INT",      # flake8-gettext (https://docs.astral.sh/ruff/rules/#flake8-gettext-int)
    "ARG",      # flake8-unused-arguments (https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg)
    "PTH",      # flake8-use-pathlib (https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth)
    "TD",       # flake8-todos (https://docs.astral.sh/ruff/rules/#flake8-todos-td)
    "FIX",      # flake8-fixme (https://docs.astral.sh/ruff/rules/#flake8-fixme-fix)
    "ERA",      # eradicate (https://docs.astral.sh/ruff/rules/#eradicate-era)
    "PD",       # pandas-vet (https://docs.astral.sh/ruff/rules/#pandas-vet-pd)
    "PGH",      # pygrep-hooks (https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh)
    "PL",       # pylint (https://docs.astral.sh/ruff/rules/#pylint-pl)
    "TRY",      # tryceratops (https://docs.astral.sh/ruff/rules/#tryceratops-try)
    "FLY",      # flynt (https://docs.astral.sh/ruff/rules/#flynt-fly)
    "NPY",      # numpy-specific-rules (https://docs.astral.sh/ruff/rules/#numpy-specific-rules-npy)
    "FAST",     # fastapi (https://docs.astral.sh/ruff/rules/#fastapi-fast)
    # "AIR",      # airflow (https://docs.astral.sh/ruff/rules/#airflow-air)
    "PERF",     # perflint (https://docs.astral.sh/ruff/rules/#perflint-perf)
    "FURB",     # refurb (https://docs.astral.sh/ruff/rules/#refurb-furb)
    "DOC",      # pydoclint (https://docs.astral.sh/ruff/rules/#pydoclint-doc)
    "RUF",      # ruff-specific-rules (https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf)
]
ignore = [
    "D105",     # undocumented-magic-method (https://docs.astral.sh/ruff/rules/undocumented-magic-method)
    "TRY400",   # error-instead-of-exception (https://docs.astral.sh/ruff/rules/error-instead-of-exception)
    "COM812",   # missing-trailing-comma (https://docs.astral.sh/ruff/rules/missing-trailing-comma)
    "ASYNC109", # async-function-with-timeout (https://docs.astral.sh/ruff/rules/async-function-with-timeout)
    "SIM102",   # collapsible-if (https://docs.astral.sh/ruff/rules/collapsible-if)
]

[tool.ruff.lint.extend-per-file-ignores]
"docs/src/conf.py" = [
    "INP001",   # implicit-namespace-package (https://docs.astral.sh/ruff/rules/implicit-namespace-package)
]
"examples/*.py" = [
    "INP001",   # implicit-namespace-package (https://docs.astral.sh/ruff/rules/implicit-namespace-package)
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
cache_dir = ".cache/mypy"
strict = true

[tool.pytest.ini_options]
cache_dir = ".cache/pytest"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
