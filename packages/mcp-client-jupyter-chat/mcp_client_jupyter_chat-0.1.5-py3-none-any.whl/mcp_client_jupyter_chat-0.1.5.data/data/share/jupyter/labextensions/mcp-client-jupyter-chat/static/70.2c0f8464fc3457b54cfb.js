"use strict";(self.webpackChunkmcp_client_jupyter_chat=self.webpackChunkmcp_client_jupyter_chat||[]).push([[70],{70:(n,t,e)=>{e.r(t),e.d(t,{default:()=>_});var o=e(72),r=e.n(o),a=e(825),s=e.n(a),i=e(659),c=e.n(i),l=e(56),d=e.n(l),p=e(540),u=e.n(p),m=e(113),h=e.n(m),g=e(646),x={};x.styleTagTransform=h(),x.setAttributes=d(),x.insert=c().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=u(),r()(g.A,x),g.A&&g.A.locals&&g.A.locals;var f=e(209),v=e(256),y=e(655),b=e(324),w=e(123),C=e(781),k=e(593),E=e(88),j=e(910),L=e(32),A=e.n(L);class z{getServerTools(n){return this.tools.get(n)||[]}constructor(n,t,e,o){this.SERVER_TOOL_SEPARATOR="__",this.chats=new Map,this.currentChatId=null,this.tools=new Map,this.stateKey="mcp-chat:conversation-history",this.mcpClients=n,this.anthropic=new(A())({apiKey:e,dangerouslyAllowBrowser:!0}),this.modelName=t,this.stateDB=o,this.loadHistory()}generateChatId(){return`chat-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}generateChatTitle(n){if(0===n.length)return"New Chat";const t=n[0];if("string"==typeof t.content){const n=t.content.slice(0,30);return n.length<t.content.length?`${n}...`:n}return"New Chat"}async initializeTools(){try{this.tools.clear();for(const[n,t]of this.mcpClients)try{const e=await t.listTools();e&&Array.isArray(e.tools)&&this.tools.set(n,e.tools),console.log(`Initialized ${e.tools.length} tools from ${n}`)}catch(t){console.error(`Failed to initialize tools from ${n}:`,t)}if(0===this.tools.size)throw new Error("No tools available from any MCP server")}catch(n){throw console.error("Failed to initialize tools:",n),n}}getChats(){return Array.from(this.chats.entries()).map((([n,t])=>({id:n,title:this.generateChatTitle(t),createdAt:n.split("-")[1]}))).sort(((n,t)=>parseInt(t.createdAt)-parseInt(n.createdAt)))}getCurrentChat(){return this.currentChatId&&this.chats.get(this.currentChatId)||[]}createNewChat(){const n=this.generateChatId();return this.chats.set(n,[]),this.currentChatId=n,this.saveHistory(),n}loadChat(n){return!!this.chats.has(n)&&(this.currentChatId=n,this.saveHistory(),!0)}deleteCurrentChat(){if(this.currentChatId){this.chats.delete(this.currentChatId);const n=Array.from(this.chats.keys());n.length>0?this.currentChatId=n[n.length-1]:this.createNewChat(),this.saveHistory()}}async*sendMessage(n,t){this.currentChatId||this.createNewChat();const e=this.getCurrentChat();if(n){let o=n;null!==t.notebookPath&&(o+=`\n Current Notebook Path: ${t.notebookPath}`),null!==t.activeCellID&&(o+=`\n Active selected cell ID: ${t.activeCellID}`),e.push({role:"user",content:o}),await this.saveHistory()}let o=!0;try{for(;o;){let n="",t="",r="",a="";o=!1;const s=this.anthropic.messages.stream({model:this.modelName,max_tokens:4096,messages:e,tools:Array.from(this.tools.entries()).flatMap((([n,t])=>t.map((t=>({name:`${n}${this.SERVER_TOOL_SEPARATOR}${t.name}`,description:t.description,input_schema:t.inputSchema}))))),system:"Before answering, explain your reasoning step-by-step."});for await(const i of s)if("content_block_start"===i.type)"tool_use"===i.content_block.type&&(r=i.content_block.name,a=i.content_block.id);else if("content_block_delta"===i.type)"text_delta"===i.delta.type?(n+=i.delta.text,yield{type:"text",text:i.delta.text}):"input_json_delta"===i.delta.type&&(t+=i.delta.partial_json);else if("message_delta"===i.type)if("tool_use"===i.delta.stop_reason){if(o=!0,""!==r){const s=[];""!==n&&(s.push({type:"text",text:n}),n="");const i=JSON.parse(t),c={type:"tool_use",id:a,name:r,input:i};s.push(c),yield{type:"tool_use",name:r,input:i},e.push({role:"assistant",content:s}),await this.saveHistory();try{const[n,t]=r.split(this.SERVER_TOOL_SEPARATOR),o=this.mcpClients.get(n);if(!o)throw new Error(`MCP server ${n} not found`);const s=(await o.callTool({name:t,arguments:i,_meta:{}})).content.map((n=>"text"===n.type?{type:"text",text:n.text}:"image"===n.type?{type:"image",source:{type:"base64",media_type:n.mimeType,data:n.data}}:{type:"text",text:"Unsupported content type"})),c={type:"tool_result",tool_use_id:a,content:s};yield{type:"tool_result",name:r,content:JSON.stringify(s)},e.push({role:"user",content:[c]}),await this.saveHistory()}catch(n){console.error("Error executing tool:",n);const t={type:"text",text:`Error executing tool ${r}: ${n}`};yield t,o=!1}finally{r="",a="",t="",n=""}}}else if(""!==n){const o={type:"text",text:n};e.push({role:"assistant",content:[o]}),await this.saveHistory(),n="",t=""}const i=await s.finalMessage();console.log("Final message:",i)}}catch(n){console.error("Error processing message:",n),yield{type:"text",text:"An error occurred while processing your message."}}}async saveHistory(){const n={chats:Array.from(this.chats.entries()).map((([n,t])=>({id:n,title:this.generateChatTitle(t),createdAt:n.split("-")[1],messages:t.map((n=>{const t=Array.isArray(n.content)?n.content.map((n=>"text"in n?{type:"text",text:n.text}:{type:n.type,...Object.entries(n).reduce(((n,[t,e])=>("string"==typeof e||"number"==typeof e||"boolean"==typeof e||null===e?n[t]=e:"object"==typeof e&&(n[t]=JSON.parse(JSON.stringify(e))),n)),{})})):n.content;return{role:n.role,content:t}}))}))),currentChatId:this.currentChatId};await this.stateDB.save(this.stateKey,n)}async loadHistory(){const n=await this.stateDB.fetch(this.stateKey);if(n&&"object"==typeof n&&"chats"in n&&Array.isArray(n.chats)){const t={chats:n.chats,currentChatId:n.currentChatId};this.chats.clear(),t.chats.forEach((n=>{this.chats.set(n.id,n.messages.map((n=>{const t=Array.isArray(n.content)?n.content.map((n=>"text"===n.type?{type:"text",text:n.text}:n)):n.content;return{role:n.role,content:t}})))})),t.currentChatId&&this.chats.has(t.currentChatId)?this.currentChatId=t.currentChatId:this.chats.size>0?this.currentChatId=Array.from(this.chats.keys())[this.chats.size-1]:this.createNewChat()}else this.createNewChat()}}const M={id:"mcp-client-jupyter-chat:plugin",description:"A JupyterLab extension for Chat with AI supporting MCP",autoStart:!0,requires:[f.ICommandPalette,C.IStateDB,w.INotebookTracker,b.IRenderMimeRegistry],optional:[k.ISettingRegistry],activate:async(n,t,e,o,r,a)=>{console.log("JupyterLab extension mcp-client-jupyter-chat is activated!");let s=[],i=null,c=null;const l=new Map,d=document.createElement("div");d.classList.add("mcp-model-select");const p=document.createElement("select");if(p.addEventListener("change",(()=>{i=s.find((n=>n.name===p.value))||null})),a){const n=async n=>{var t;c=n.composite;const e=(null==c?void 0:c.models)||[];s=Array.isArray(e)?e:[],i=s.find((n=>n.isDefault))||s[0]||null,console.log("mcp-client-jupyter-chat settings loaded:",`models: ${s.length},`,`additional servers: ${(null===(t=null==c?void 0:c.mcpServers)||void 0===t?void 0:t.length)||0}`),p.innerHTML="",s.forEach((n=>{const t=document.createElement("option");t.value=n.name,t.textContent=n.name,"gpt-4"===n.name&&(t.textContent="GPT-4"),t.selected=n===i,p.appendChild(t)})),await P()};a.load(M.id).then((t=>{n(t),t.changed.connect(n)})).catch((n=>{console.error("Failed to load settings for mcp-client-jupyter-chat.",n)}))}const u=new v.Widget,m=document.createElement("div");m.classList.add("mcp-chat");const h=document.createElement("div");h.classList.add("mcp-chat-area");const g=()=>{T?(h.innerHTML="",T.getCurrentChat().forEach((n=>{if("string"==typeof n.content)N(n.content,"user"===n.role);else{const t=n.content.map((n=>"text"in n?{type:"text",text:n.text}:"tool_use"===n.type?{type:"tool_use",name:n.name,input:n.input}:"tool_result"===n.type?{type:"tool_result",content:JSON.stringify(n.content)}:{type:"text",text:"Unsupported content type"}));N(t,"user"===n.role)}}))):console.warn("Cannot display chat: Assistant not initialized")},x=document.createElement("div");x.classList.add("mcp-toolbar");const f=document.createElement("button");f.classList.add("mcp-toolbar-button"),f.innerHTML='\n      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n        <path d="M12 5v14M5 12h14"/>\n      </svg>\n      New Chat\n    ',f.addEventListener("click",(()=>{T&&(T.createNewChat(),g())}));const b=document.createElement("button");b.classList.add("mcp-toolbar-button"),b.innerHTML='\n      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n        <path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>\n      </svg>\n      History\n    ',b.addEventListener("click",(()=>{if(!T)return void console.warn("Cannot display chat list: Assistant not initialized");h.innerHTML="";const n=document.createElement("div");n.classList.add("mcp-chat-list"),T.getChats().forEach((t=>{const e=document.createElement("div");e.classList.add("mcp-chat-item");const o=document.createElement("div");o.classList.add("mcp-chat-title"),o.textContent=t.title;const r=document.createElement("div");r.classList.add("mcp-chat-date"),r.textContent=new Date(parseInt(t.createdAt)).toLocaleString(),e.appendChild(o),e.appendChild(r),e.addEventListener("click",(()=>{(null==T?void 0:T.loadChat(t.id))&&g()})),n.appendChild(e)})),h.appendChild(n)}));const w=document.createElement("div");w.classList.add("mcp-tools-button"),w.innerHTML='\n      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n        <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>\n      </svg>\n    ';const C=document.createElement("div");C.classList.add("mcp-tools-popup"),w.addEventListener("click",(async()=>{if(!T)return void console.warn("Cannot list tools: Assistant not initialized");C.innerHTML="";const n=document.createElement("div");n.classList.add("mcp-servers-header"),n.textContent="Available MCP Tools",C.appendChild(n);const t=document.createElement("ul");t.classList.add("mcp-tools-list");let e=0;for(const[n]of l.entries())try{const o=T.getServerTools(n);o.length>0&&o.forEach((o=>{e++;const r=document.createElement("li");r.classList.add("mcp-tools-item");const a=document.createElement("div");a.innerHTML=`\n                ${o.name}\n                <div class="mcp-tools-server">Server: ${n}</div>\n              `,r.appendChild(a),t.appendChild(r)}))}catch(t){console.error(`Failed to list tools for server ${n}:`,t)}if(0===e){const n=document.createElement("div");n.classList.add("mcp-no-servers"),n.textContent="No MCP tools available",t.appendChild(n)}C.appendChild(t),C.classList.toggle("show")}));const k=document.createElement("div");k.classList.add("mcp-plug-icon"),k.innerHTML='\n      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n        <path d="M18.36 5.64a9 9 0 11-12.73 0M12 2v10"/>\n      </svg>\n    ';const L=document.createElement("div");L.classList.add("mcp-servers-popup"),k.addEventListener("click",(()=>{L.innerHTML="";const n=document.createElement("div");n.classList.add("mcp-servers-header"),n.textContent="All connected MCP servers (use settings to add/remove)",L.appendChild(n);const t=document.createElement("ul");if(t.classList.add("mcp-servers-list"),l.size>0)l.forEach(((n,e)=>{const o=document.createElement("li");o.classList.add("mcp-server-item"),o.textContent=e,t.appendChild(o)}));else{const n=document.createElement("div");n.classList.add("mcp-no-servers"),n.textContent="No MCP servers connected",t.appendChild(n)}L.appendChild(t),L.classList.toggle("show")})),document.addEventListener("click",(n=>{w.contains(n.target)||C.contains(n.target)||C.classList.remove("show"),k.contains(n.target)||L.contains(n.target)||L.classList.remove("show")})),x.appendChild(f),x.appendChild(b),x.appendChild(w),x.appendChild(C),x.appendChild(k),x.appendChild(L);const A=document.createElement("div");A.classList.add("mcp-input-area");const _=document.createElement("div");_.classList.add("mcp-input-wrapper");const I=document.createElement("textarea");I.placeholder="Message MCP v3!...",I.classList.add("mcp-input");let T=null,S=!1;const P=async()=>{var n;if(!S){S=!0;try{for(const t of l.values())try{await(null===(n=t.transport)||void 0===n?void 0:n.close())}catch(n){console.error("Error closing client transport:",n)}l.clear();const t=new E.K({name:"jupyter-mcp-client-default",version:"0.1.0"},{capabilities:{tools:{},resources:{}}}),o=new URL("http://localhost:3002/sse"),r=new j.A(o);await t.connect(r),l.set("default",t),console.log("Successfully connected to default MCP server");const a=(null==c?void 0:c.mcpServers)||[];for(const n of a){const t=new E.K({name:`jupyter-mcp-client-${n.name}`,version:"0.1.0"},{capabilities:{tools:{},resources:{}}}),e=new j.A(new URL(n.url));try{await t.connect(e),l.set(n.name,t),console.log(`Successfully connected to MCP server: ${n.name}`)}catch(t){console.error(`Failed to connect to MCP server ${n.name}:`,t)}}if(!l.get("default"))throw new Error("Default MCP server not connected");if(!i)throw new Error("No model selected");T=new z(l,i.name,i.apiKey,e),await T.initializeTools(),await new Promise((n=>setTimeout(n,100))),g()}catch(n){(n instanceof Error?n.message:String(n)).includes("CORS")&&console.warn("CORS error detected. The MCP server must be configured with these headers:\n  Access-Control-Allow-Origin: http://localhost:8888\n  Access-Control-Allow-Methods: GET\n  Access-Control-Allow-Headers: Accept, Origin\n"),l.clear(),T=null}finally{S=!1}}};P().then((()=>{T&&g()})).catch(console.error),I.addEventListener("input",(()=>{I.style.height="auto";const n=Math.min(I.scrollHeight,.3*window.innerHeight);I.style.height=n+"px"}));const H=document.createElement("button");H.classList.add("mcp-send-button");const N=(n,t)=>{const e=document.createElement("div");if(e.classList.add("mcp-message"),e.classList.add(t?"user":"assistant"),"string"==typeof n){const t=r.createRenderer("text/markdown");t.renderModel({data:{"text/markdown":n},trusted:!0,metadata:{},setData:()=>{}}),e.appendChild(t.node)}else n.forEach((n=>{const t=document.createElement("div");switch(n.type){case"text":{const e=r.createRenderer("text/markdown");e.renderModel({data:{"text/markdown":n.text||""},trusted:!0,metadata:{},setData:()=>{}}),t.appendChild(e.node);break}case"tool_use":t.textContent=`[Using tool: ${n.name}]`,t.classList.add("tool-use");break;case"tool_result":{t.classList.add("tool-result"),n.is_error&&t.classList.add("error");const e=document.createElement("div");e.classList.add("tool-result-header"),e.textContent="Tool Result";const o=document.createElement("button");o.classList.add("tool-result-toggle"),o.textContent="Expand",o.onclick=()=>{const n=t.classList.toggle("expanded");o.textContent=n?"Collapse":"Expand"},e.appendChild(o),t.appendChild(e);const r=document.createElement("div");r.textContent="string"==typeof n.content?n.content:JSON.stringify(n.content,null,2),t.appendChild(r);break}}e.appendChild(t)}));h.appendChild(e),h.scrollTop=h.scrollHeight},R=async n=>{var t,e,a;if(N(n,!0),T&&0!==l.size||(N("Not connected to any MCP servers. Attempting to connect...",!1),await P(),T&&0!==l.size))try{const s=document.createElement("div");s.classList.add("mcp-message","assistant"),h.appendChild(s);let i=null;const c=null===(t=o.currentWidget)||void 0===t?void 0:t.context.path,l=null===(a=null===(e=o.currentWidget)||void 0===e?void 0:e.content.activeCell)||void 0===a?void 0:a.model.id;for await(const t of T.sendMessage(n,{notebookPath:c,activeCellID:l})){let n=document.createElement("div");switch(t.type){case"text":{i||(i=document.createElement("div"),i.classList.add("mcp-message-markdown"),s.appendChild(i));const n=(i.getAttribute("data-text")||"")+(t.text||"");i.setAttribute("data-text",n);const e=r.createRenderer("text/markdown");e.renderModel({data:{"text/markdown":n},trusted:!0,metadata:{},setData:()=>{}}),i.innerHTML="",i.appendChild(e.node);break}case"tool_use":i=null,n=document.createElement("div"),n.classList.add("tool-use"),n.textContent=`[Using tool: ${t.name}]`,s.appendChild(n);break;case"tool_result":{i=null,n=document.createElement("div"),n.classList.add("tool-result"),t.is_error&&n.classList.add("error");const e=document.createElement("div");e.classList.add("tool-result-header"),e.textContent="Tool Result";const r=document.createElement("button");r.classList.add("tool-result-toggle"),r.textContent="Expand",r.onclick=()=>{const t=n.classList.toggle("expanded");r.textContent=t?"Collapse":"Expand"},e.appendChild(r),n.appendChild(e);const a=document.createElement("pre");a.style.margin="0",a.style.whiteSpace="pre-wrap",a.textContent="string"==typeof t.content?t.content:JSON.stringify(t.content,null,2),n.appendChild(a),s.appendChild(n),o.currentWidget&&await o.currentWidget.context.revert();break}}h.scrollTop=h.scrollHeight}}catch(n){console.error("Error handling message:",n),l.clear(),T=null,N("Error communicating with MCP servers. Please ensure the servers are running and try again.",!1)}else N("Failed to connect to MCP servers. Please ensure at least the default server is running at http://localhost:3002",!1)};H.addEventListener("click",(async()=>{const n=I.value.trim();n&&(await R(n),I.value="")})),I.addEventListener("keydown",(n=>{if("Enter"===n.key&&!n.shiftKey){n.preventDefault();const t=I.value.trim();t&&(R(t),I.value="",I.style.height="auto")}}));const $=document.createElement("div");$.classList.add("mcp-input-container"),$.appendChild(I),$.appendChild(H),_.appendChild($),d.appendChild(p),A.appendChild(_),A.appendChild(d),m.appendChild(x),m.appendChild(h),m.appendChild(A),u.node.appendChild(m);const O=new y.LabIcon({name:"mcp:logo",svgstr:'\n      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">\n        <rect x="4" y="4" width="16" height="16" rx="2"/>\n        <path d="M8 8h8M8 12h8M8 16h8"/>\n        <circle cx="4" cy="8" r="1"/>\n        <circle cx="20" cy="8" r="1"/>\n        <circle cx="4" cy="16" r="1"/>\n        <circle cx="20" cy="16" r="1"/>\n      </svg>\n    '}),D=new v.Panel;D.id="mcp-chat",D.title.label="",D.title.icon=O,D.title.closable=!0,D.title.caption="MCP Chat Interface",D.addWidget(u);const B="mcp:open-chat";n.commands.addCommand(B,{label:"Open Chat",caption:"Open Chat Interface",isEnabled:()=>!0,execute:()=>{D.isAttached||n.shell.add(D,"left",{rank:100}),n.shell.activateById(D.id)}}),t.addItem({command:B,category:"MCP"}),n.commands.execute(B)}},_=M},475:(n,t,e)=>{e.d(t,{A:()=>i});var o=e(601),r=e.n(o),a=e(314),s=e.n(a)()(r());s.push([n.id,"/*\n  See the JupyterLab Developer Guide for useful CSS Patterns:\n  https://jupyterlab.readthedocs.io/en/stable/developer/css.html\n*/\n\n.mcp-chat {\n  background: var(--jp-layout-color1);\n  color: var(--jp-ui-font-color1);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.mcp-logo {\n  width: 24px;\n  height: 24px;\n  display: inline-block;\n  vertical-align: middle;\n  margin-right: 4px;\n}\n\n.mcp-toolbar {\n  display: flex;\n  padding: 8px;\n  background: var(--jp-layout-color2);\n  position: relative;\n}\n\n.mcp-tools-button {\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  opacity: 0.7;\n  transition: opacity 0.2s;\n  margin-left: auto;\n}\n\n.mcp-tools-button:hover {\n  opacity: 1;\n}\n\n.mcp-tools-button svg {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n\n.mcp-plug-icon {\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  margin-left: 8px;\n  opacity: 0.7;\n  transition: opacity 0.2s;\n  transform: rotate(45deg);\n}\n\n.mcp-plug-icon:hover {\n  opacity: 1;\n}\n\n.mcp-plug-icon svg {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n\n.mcp-servers-popup,\n.mcp-tools-popup {\n  position: absolute;\n  top: calc(100% + 8px);\n  right: 8px;\n  background: var(--jp-layout-color0);\n  border: 1px solid var(--jp-border-color1);\n  border-radius: 6px;\n  box-shadow: 0 4px 12px rgb(0 0 0 / 15%);\n  min-width: 280px;\n  z-index: 1000;\n  display: none;\n  animation: popup-fade 0.2s ease-out;\n  transform-origin: top right;\n}\n\n.mcp-servers-popup.show,\n.mcp-tools-popup.show {\n  display: block;\n}\n\n.mcp-servers-popup h3,\n.mcp-tools-popup h3 {\n  margin: 0;\n  padding: 12px 16px;\n  font-size: var(--jp-ui-font-size1);\n  font-weight: 600;\n  color: var(--jp-ui-font-color0);\n  border-bottom: 1px solid var(--jp-border-color1);\n  background: var(--jp-layout-color1);\n  border-top-left-radius: 6px;\n  border-top-right-radius: 6px;\n}\n\n.mcp-servers-header,\n.mcp-tools-header {\n  margin: 0;\n  padding: 12px 16px;\n  font-size: var(--jp-ui-font-size1);\n  font-weight: 600;\n  color: var(--jp-ui-font-color0);\n  background: var(--jp-layout-color2);\n  border-bottom: 1px solid var(--jp-border-color1);\n}\n\n.mcp-servers-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.mcp-servers-header small {\n  font-size: var(--jp-ui-font-size0);\n  font-weight: normal;\n  color: var(--jp-ui-font-color2);\n}\n\n@keyframes popup-fade {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n.mcp-servers-list,\n.mcp-tools-list {\n  list-style: none;\n  margin: 0;\n  padding: 4px;\n}\n\n.mcp-tools-item {\n  padding: 8px 12px;\n  color: var(--jp-ui-font-color1);\n  font-size: var(--jp-ui-font-size1);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 4px;\n  margin: 2px 0;\n  transition:\n    background 0.2s,\n    color 0.2s;\n}\n\n.mcp-tools-item:hover {\n  background: var(--jp-layout-color3);\n}\n\n.mcp-tools-server {\n  color: var(--jp-ui-font-color2);\n  font-size: var(--jp-ui-font-size0);\n  background: var(--jp-layout-color2);\n  padding: 2px 6px;\n  border-radius: 3px;\n  margin-left: 8px;\n}\n\n.mcp-server-item {\n  padding: 8px 12px;\n  color: var(--jp-ui-font-color1);\n  font-size: var(--jp-ui-font-size1);\n  border-radius: 4px;\n  margin: 2px 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  transition: background 0.2s;\n}\n\n.mcp-server-item:hover {\n  background: var(--jp-layout-color3);\n}\n\n.mcp-no-servers {\n  padding: 12px;\n  color: var(--jp-ui-font-color2);\n  font-style: italic;\n  text-align: center;\n  background: var(--jp-layout-color2);\n  border-radius: 4px;\n  margin: 4px;\n}\n\n.mcp-toolbar-button {\n  background: none;\n  border: none;\n  padding: 4px 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  color: var(--jp-ui-font-color1);\n  margin-right: 8px;\n  border-radius: 4px;\n}\n\n.mcp-toolbar-button:hover {\n  background: var(--jp-layout-color3);\n}\n\n.mcp-toolbar-button svg {\n  width: 16px;\n  height: 16px;\n  margin-right: 4px;\n}\n\n.mcp-chat-area {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n}\n\n.mcp-chat-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.mcp-chat-item {\n  padding: 12px;\n  border-radius: 8px;\n  background: var(--jp-layout-color2);\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.mcp-chat-item:hover {\n  background: var(--jp-layout-color3);\n}\n\n.mcp-chat-title {\n  font-size: var(--jp-ui-font-size1);\n  color: var(--jp-ui-font-color0);\n  margin-bottom: 4px;\n}\n\n.mcp-chat-date {\n  font-size: var(--jp-ui-font-size0);\n  color: var(--jp-ui-font-color2);\n}\n\n.mcp-message {\n  font-size: var(--jp-ui-font-size1);\n  margin-bottom: 16px;\n  padding: 8px 12px;\n  border-radius: 8px;\n  max-width: 85%;\n}\n\n.mcp-message.user {\n  background: var(--jp-layout-color2);\n  margin-left: auto;\n}\n\n.mcp-message.assistant {\n  background: var(--jp-layout-color3);\n  margin-right: auto;\n}\n\n.mcp-input-area {\n  padding: 16px;\n  border-top: 1px solid var(--jp-border-color1);\n  background: var(--jp-layout-color1);\n}\n\n.mcp-input-container {\n  display: flex;\n  background: var(--jp-layout-color0);\n}\n\n.mcp-input {\n  flex: 1;\n  min-height: 40px;\n  padding: 8px 12px;\n  font-size: var(--jp-ui-font-size1);\n  font-family: var(--jp-ui-font-family);\n  border: none;\n  background: none;\n  resize: none;\n  color: var(--jp-ui-font-color0);\n}\n\n.mcp-input:focus {\n  outline: none;\n}\n\n.mcp-send-button {\n  background: none;\n  border: none;\n  padding: 8px 16px;\n  cursor: pointer;\n  color: var(--jp-brand-color1);\n}\n\n.mcp-send-button:hover {\n  background: var(--jp-layout-color2);\n}\n\n.tool-use {\n  color: var(--jp-brand-color1);\n  font-size: var(--jp-ui-font-size0);\n  padding: 4px 8px;\n  margin: 4px 0;\n  background: var(--jp-layout-color2);\n  border-radius: 4px;\n}\n\n.tool-result {\n  font-size: var(--jp-ui-font-size0);\n  margin: 4px 0;\n  border: 1px solid var(--jp-border-color1);\n  border-radius: 4px;\n}\n\n.tool-result.error {\n  border-color: var(--jp-error-color1);\n}\n\n.tool-result-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 4px 8px;\n  background: var(--jp-layout-color2);\n  border-bottom: 1px solid var(--jp-border-color1);\n}\n\n.tool-result-toggle {\n  background: none;\n  border: none;\n  padding: 2px 6px;\n  font-size: var(--jp-ui-font-size0);\n  cursor: pointer;\n  color: var(--jp-brand-color1);\n}\n\n.tool-result-toggle:hover {\n  background: var(--jp-layout-color3);\n  border-radius: 4px;\n}\n\n.tool-result > div:not(.tool-result-header) {\n  display: none;\n  padding: 8px;\n  background: var(--jp-layout-color0);\n  white-space: pre-wrap;\n}\n\n.tool-result.expanded > div:not(.tool-result-header) {\n  display: block;\n}\n",""]);const i=s},646:(n,t,e)=>{e.d(t,{A:()=>l});var o=e(601),r=e.n(o),a=e(314),s=e.n(a),i=e(475),c=s()(r());c.i(i.A),c.push([n.id,".mcp-chat {\n  position: fixed;\n  inset: 0;\n  display: flex;\n  flex-direction: column;\n  background: #faf9f7;\n}\n\n.mcp-chat-area {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  padding-bottom: 100px;\n  background: #faf9f7;\n  scrollbar-width: thin;\n  scrollbar-color: #e6e2dd transparent;\n}\n\n.mcp-chat-area::-webkit-scrollbar {\n  width: 8px;\n}\n\n.mcp-chat-area::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.mcp-chat-area::-webkit-scrollbar-thumb {\n  background-color: #e6e2dd;\n  border-radius: 4px;\n}\n\n.mcp-message {\n  margin: 8px 0;\n  padding: 8px 12px;\n  border-radius: 12px;\n  max-width: 80%;\n  font-size: 14px;\n  line-height: 1.5;\n  word-break: break-word;\n  overflow-wrap: break-word;\n}\n\n.mcp-message-markdown {\n  margin: 0;\n  padding: 0;\n}\n\n.mcp-message.user {\n  background: #f0ece6;\n  margin-left: auto;\n  color: #444;\n}\n\n.mcp-message.assistant {\n  background: #fff;\n  margin-right: auto;\n  color: #444;\n  border: 1px solid #e6e2dd;\n}\n\n.mcp-input-area {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 2px;\n  background: #fff;\n  border-top: 1px solid #e6e2dd;\n  box-sizing: border-box;\n  box-shadow: 0 -2px 10px rgb(0 0 0 / 5%);\n  max-height: 100px;\n  z-index: 1000;\n}\n\n.mcp-input-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 100%;\n}\n\n.mcp-input-container {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 8px 12px;\n  background: #fff;\n}\n\n.mcp-input {\n  flex: 1;\n  padding: 0;\n  border: none;\n  background: transparent;\n  color: #444;\n  resize: none;\n  min-height: 24px;\n  max-height: 48px;\n  overflow-y: auto;\n  line-height: 1.4;\n  box-sizing: border-box;\n}\n\n.mcp-input:focus {\n  outline: none;\n}\n\n.mcp-send-button {\n  width: 32px;\n  height: 32px;\n  background: #f0ece6;\n  color: #444;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  margin-right: -4px;\n}\n\n.mcp-send-button::before {\n  content: '↑';\n  font-size: 18px;\n}\n\n.mcp-send-button:hover {\n  background: #e6e2dd;\n}\n\n.mcp-send-button:active {\n  background: #dcd8d3;\n}\n\n.tool-result {\n  position: relative;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 8px;\n  background: #f8f8f8;\n  border-radius: 6px;\n  margin: 8px 0;\n  font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier,\n    monospace;\n  font-size: 13px;\n  transition: max-height 0.3s ease;\n}\n\n.tool-result pre {\n  margin: 8px 0 0;\n  white-space: pre-wrap;\n  word-break: break-word;\n}\n\n.tool-result.expanded {\n  max-height: none;\n}\n\n.tool-result-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n  color: #666;\n  font-size: 0.9em;\n}\n\n.tool-result-toggle {\n  background: none;\n  border: none;\n  color: #666;\n  cursor: pointer;\n  padding: 2px 6px;\n  font-size: 0.9em;\n  border-radius: 4px;\n}\n\n.tool-result-toggle:hover {\n  background: #eee;\n}\n\n.tool-result.error {\n  background: #fff0f0;\n  border: 1px solid #ffcdd2;\n}\n\n.mcp-model-select {\n  position: relative;\n  display: inline-block;\n  background: #f7f7f7;\n  border-radius: 8px;\n  padding: 2px 4px;\n  margin-bottom: 8px;\n  width: fit-content;\n  z-index: 1001;\n}\n\n.mcp-model-select select {\n  appearance: none;\n  -webkit-appearance: none;\n  width: auto;\n  padding: 6px 28px 6px 8px;\n  border: none;\n  background: transparent;\n  color: #333;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  outline: none;\n}\n\n.mcp-model-select::after {\n  content: '▼';\n  font-size: 8px;\n  color: #666;\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  pointer-events: none;\n}\n\n.mcp-model-select select:focus {\n  outline: none;\n}\n\n.mcp-model-select select option {\n  padding: 10px;\n  font-size: 14px;\n  background: #fff;\n  color: #333;\n  font-weight: 500;\n}\n\n.mcp-model-select select option:hover,\n.mcp-model-select select option:focus {\n  background: #f7f7f7;\n}\n",""]);const l=c}}]);