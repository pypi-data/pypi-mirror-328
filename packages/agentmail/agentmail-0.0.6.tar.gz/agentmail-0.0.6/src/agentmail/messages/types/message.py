# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .message_id import MessageId
from .message_thread_id import MessageThreadId
from .message_sent_at import MessageSentAt
import datetime as dt
import pydantic
import typing_extensions
from .message_from import MessageFrom
from ...core.serialization import FieldMetadata
import typing
from .message_subject import MessageSubject
from .message_preview import MessagePreview
from .message_to import MessageTo
from .message_cc import MessageCc
from .message_bcc import MessageBcc
from .message_text import MessageText
from .message_html import MessageHtml
from .message_attachments import MessageAttachments
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Message(UniversalBaseModel):
    message_id: MessageId
    thread_id: MessageThreadId
    sent_at: MessageSentAt
    received_at: dt.datetime = pydantic.Field()
    """
    Time at which message was received.
    """

    from_: typing_extensions.Annotated[MessageFrom, FieldMetadata(alias="from")]
    reply_to: typing.Optional[str] = pydantic.Field(default=None)
    """
    Address to reply to. In format `username@domain.com` or `Display Name <username@domain.com>`.
    """

    subject: MessageSubject
    preview: MessagePreview
    to: MessageTo
    cc: MessageCc
    bcc: MessageBcc
    text: MessageText
    html: MessageHtml
    attachments: MessageAttachments
    in_reply_to: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of message being replied to.
    """

    references: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    IDs of previous messages in thread.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
