# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .message_id import MessageId
from ...threads.types.thread_id import ThreadId
from .message_sent_at import MessageSentAt
import typing_extensions
from .message_from import MessageFrom
from ...core.serialization import FieldMetadata
from .message_subject import MessageSubject
from .message_preview import MessagePreview
from .message_to import MessageTo
from .message_cc import MessageCc
from .message_bcc import MessageBcc
from .message_attachments import MessageAttachments
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic


class MessageItem(UniversalBaseModel):
    message_id: MessageId
    thread_id: ThreadId
    sent_at: MessageSentAt
    from_: typing_extensions.Annotated[MessageFrom, FieldMetadata(alias="from")]
    subject: MessageSubject
    preview: MessagePreview
    to: MessageTo
    cc: MessageCc
    bcc: MessageBcc
    attachments: MessageAttachments

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
