# (generated with --quick)

import collections
import functools
import packages.config
import sys
import threading
import typing
import warnings
from typing import Any

Counter: type[typing.Counter]
ImproperlyConfigured: Any
PackageConfig: type[packages.config.PackageConfig]
PackageRegistryNotReady: Any
defaultdict: type[collections.defaultdict]
packages: Packages
partial: type[functools.partial]

class Packages:
    __doc__: str
    _lock: threading._RLock
    _pending_operations: collections.defaultdict
    all_models: collections.defaultdict
    get_models: functools._lru_cache_wrapper
    get_swappable_settings_name: functools._lru_cache_wrapper
    loading: bool
    models_ready: bool
    package_configs: dict
    packages_ready: bool
    ready: bool
    stored_package_configs: list[dict]
    def __init__(self, installed_packages = ...) -> None: ...
    def check_models_ready(self) -> None: ...
    def check_packages_ready(self) -> None: ...
    def clear_cache(self) -> None: ...
    def do_pending_operations(self, model) -> None: ...
    def get_containing_package_config(self, object_name) -> Any: ...
    def get_model(self, package_label, model_name = ..., require_ready = ...) -> Any: ...
    def get_package_config(self, package_label) -> Any: ...
    def get_package_configs(self) -> dict_values: ...
    def get_registered_model(self, package_label, model_name) -> Any: ...
    def is_installed(self, package_name) -> bool: ...
    def lazy_model_operation(self, function, *model_keys) -> None: ...
    def populate(self, installed_packages = ...) -> None: ...
    def register_model(self, package_label, model) -> None: ...
    def set_available_packages(self, available) -> None: ...
    def set_installed_packages(self, installed) -> None: ...
    def unset_available_packages(self) -> None: ...
