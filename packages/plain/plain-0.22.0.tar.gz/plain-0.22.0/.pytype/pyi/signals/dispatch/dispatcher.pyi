# (generated with --quick)

import logging
import threading
import weakref
from typing import Any, Callable, Union

NONE_ID: int
NO_RECEIVERS: Any
func_accepts_kwargs: Any
logger: logging.Logger

class Signal:
    __doc__: str
    _dead_receivers: bool
    lock: threading.Lock
    receivers: list
    sender_receivers_cache: Union[dict, weakref.WeakKeyDictionary[nothing, nothing]]
    use_caching: Any
    def __init__(self, use_caching = ...) -> None: ...
    def _clear_dead_receivers(self) -> None: ...
    def _live_receivers(self, sender) -> list[nothing]: ...
    def _log_robust_failure(self, receiver, err) -> None: ...
    def _remove_receiver(self, receiver = ...) -> None: ...
    def connect(self, receiver, sender = ..., weak = ..., dispatch_uid = ...) -> None: ...
    def disconnect(self, receiver = ..., sender = ..., dispatch_uid = ...) -> bool: ...
    def has_listeners(self, sender = ...) -> bool: ...
    def send(self, sender, **named) -> list[tuple[Any, Any]]: ...
    def send_robust(self, sender, **named) -> list[tuple[Any, Any]]: ...

def _make_id(target) -> Union[int, tuple[int, int]]: ...
def receiver(signal, **kwargs) -> Callable[[Any], Any]: ...
