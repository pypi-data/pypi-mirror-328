# (generated with --quick)

import io
import os
from typing import Any, Generator, TypeVar, Union, overload

BytesIO: type[io.BytesIO]
FileProxyMixin: Any
StringIO: type[io.StringIO]
UnsupportedOperation: type[io.UnsupportedOperation]
cached_property: Any

_TContentFile = TypeVar('_TContentFile', bound=ContentFile)
_TFile = TypeVar('_TFile', bound=File)

class ContentFile(File):
    __doc__: str
    file: Union[io.BytesIO, io.StringIO]
    mode: str
    name: Any
    size: int
    def __bool__(self) -> bool: ...
    def __init__(self, content, name = ...) -> None: ...
    def __str__(self) -> str: ...
    def close(self) -> None: ...
    def open(self: _TContentFile, mode = ...) -> _TContentFile: ...
    def write(self, data) -> int: ...

class File(Any):
    DEFAULT_CHUNK_SIZE: int
    file: Any
    mode: Any
    name: Any
    size: Any
    def __bool__(self) -> bool: ...
    def __enter__(self: _TFile) -> _TFile: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: BaseException, tb) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: BaseException, tb) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: None, tb) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: None, tb) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: BaseException, tb: None) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: BaseException, tb: None) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: None, tb: None) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: None, tb: None) -> None: ...
    def __init__(self, file, name = ...) -> None: ...
    def __iter__(self) -> Generator[Any, Any, None]: ...
    def __len__(self) -> Any: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> Any: ...
    def chunks(self, chunk_size = ...) -> Generator[Any, Any, None]: ...
    def close(self) -> None: ...
    def multiple_chunks(self, chunk_size = ...) -> Any: ...
    def open(self: _TFile, mode = ...) -> _TFile: ...

def endswith_cr(line) -> Any: ...
def endswith_lf(line) -> Any: ...
def equals_lf(line) -> Any: ...
