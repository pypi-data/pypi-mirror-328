# coding: utf-8

"""
REDACcess User API

This API provides functionalities to interact with a deployed anabrid REDAC system, including hardware status checks, job submission, job status retrieval, and result downloads. Also supports streaming of results by attaching to endpoints.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from anabrid.redaccess.api.common.models.gen.cluster_config_c import ClusterConfigC
from anabrid.redaccess.api.common.models.gen.cluster_config_i import ClusterConfigI
from anabrid.redaccess.api.common.models.gen.cluster_config_m0 import ClusterConfigM0
from anabrid.redaccess.api.common.models.gen.cluster_config_u import ClusterConfigU

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ClusterConfig(BaseModel):
    """
    ClusterConfig
    """  # noqa: E501

    m0: ClusterConfigM0 = Field(alias="/M0")
    m1: Dict[str, Any] = Field(alias="/M1")
    u: ClusterConfigU = Field(alias="/U")
    c: ClusterConfigC = Field(alias="/C")
    i: ClusterConfigI = Field(alias="/I")
    __properties: ClassVar[List[str]] = ["m0", "m1", "u", "c", "i"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # pydantic v2 version
        return self.model_dump_json(by_alias=True, exclude_unset=False)
        # return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of m0
        if self.m0:
            _dict["M0"] = self.m0.to_dict()
        if self.m1:
            _dict["M1"] = self.m1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of u
        if self.u:
            _dict["U"] = self.u.to_dict()
        # override the default output from pydantic by calling `to_dict()` of c
        if self.c:
            _dict["C"] = self.c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of i
        if self.i:
            _dict["I"] = self.i.to_dict()

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "/M0": (
                    ClusterConfigM0.from_dict(obj.get("/M0"))
                    if obj.get("/M0") is not None
                    else None
                ),
                "/M1": obj.get("/M1"),
                "/U": (
                    ClusterConfigU.from_dict(obj.get("/U"))
                    if obj.get("/U") is not None
                    else None
                ),
                "/C": (
                    ClusterConfigC.from_dict(obj.get("/C"))
                    if obj.get("/C") is not None
                    else None
                ),
                "/I": (
                    ClusterConfigI.from_dict(obj.get("/I"))
                    if obj.get("/I") is not None
                    else None
                ),
            }
        )
        return _obj
