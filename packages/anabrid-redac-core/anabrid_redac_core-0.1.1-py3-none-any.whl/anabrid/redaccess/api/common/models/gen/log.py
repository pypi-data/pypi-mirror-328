# coding: utf-8

"""
REDACcess User API

This API provides functionalities to interact with a deployed anabrid REDAC system, including hardware status checks, job submission, job status retrieval, and result downloads. Also supports streaming of results by attaching to endpoints.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from anabrid.redaccess.api.common.models.gen.log_entry import LogEntry

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Log(BaseModel):
    """
    Log
    """  # noqa: E501

    entries: Optional[List[LogEntry]] = None
    __properties: ClassVar[List[str]] = ["entries"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Log from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item in self.entries:
                if _item:
                    _items.append(_item.to_dict())
            _dict["entries"] = _items

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Log from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "entries": (
                    [LogEntry.from_dict(_item) for _item in obj.get("entries")]
                    if obj.get("entries") is not None
                    else None
                )
            }
        )
        return _obj
