# coding: utf-8

"""
REDACcess User API

This API provides functionalities to interact with a deployed anabrid REDAC system, including hardware status checks, job submission, job status retrieval, and result downloads. Also supports streaming of results by attaching to endpoints.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union, Optional
from anabrid.redaccess.api.common.models.gen.carrier_config import CarrierConfig

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class JobRequest(BaseModel):
    """
    JobRequest
    """  # noqa: E501

    job_id: Optional[str] = Field(
        None, description="The job's ID or None if this is a new job", alias="jobId"
    )
    device_id: StrictStr = Field(
        description="The device to run the job on.", alias="deviceId"
    )
    partition_id: Union[StrictFloat, StrictInt] = Field(
        description="ID (index) of the job to run on.", alias="partitionId"
    )
    config: Dict[str, CarrierConfig]
    op_time: Union[StrictFloat, StrictInt] = Field(
        description="OP (integration)) time for the job.", alias="opTime"
    )
    ic_time: Union[StrictFloat, StrictInt] = Field(
        description="IC (initial condition settle) time for the job.", alias="icTime"
    )
    sample_rate: Union[StrictFloat, StrictInt] = Field(
        description="Sample rate in Hz.", alias="sampleRate"
    )
    __properties: ClassVar[List[str]] = [
        "jobId",
        "deviceId",
        "partitionId",
        "config",
        "opTime",
        "icTime",
        "sampleRate"
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in config (dict)
        _field_dict = {}
        if self.config:
            for _key in self.config:
                if self.config[_key]:
                    _field_dict[_key] = self.config[_key].to_dict()
            _dict["config"] = _field_dict

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "jobId": obj.get("jobId"),
                "deviceId": obj.get("deviceId"),
                "partitionId": obj.get("partitionId"),
                "config": (
                    dict(
                        (_k, CarrierConfig.from_dict(_v))
                        for _k, _v in obj.get("config").items()
                    )
                    if obj.get("config") is not None
                    else None
                ),
                "opTime": obj.get("opTime"),
                "icTime": obj.get("icTime"),
                "sampleRate": obj.get("sampleRate"),
            }
        )

        return _obj
