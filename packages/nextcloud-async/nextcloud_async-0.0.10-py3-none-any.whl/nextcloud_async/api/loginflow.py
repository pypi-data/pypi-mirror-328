"""Implement the Nextcloud Login Flow v2.

This will allow your application to:

    * Use an app token to log in as a user
    * Check for Remote Wipe status (see api.wipe)

Using an app token for authorization will allow the user to:

    * Have the ability to disable access for your application
    * Signal your application to wipe all of its data (see api.wipe)

Reference:
    https://docs.nextcloud.com/server/latest/developer_manual/client_apis/LoginFlow/index.html
"""

import asyncio

from importlib.metadata import version

import datetime as dt

from typing import Dict, Optional

from nextcloud_async.exceptions import NextCloudLoginFlowTimeout
from nextcloud_async.api import NextCloudBaseAPI

__VERSION__ = version('nextcloud_async')


class LoginFlowV2(NextCloudBaseAPI):
    """Obtain an app password after user web authorization.

    Simply:
        > login_flow = await ncc.login_flow_initiate()
        > print(login_flow('login'))   # Direct user to open the provided URL
        > token = login_flow['poll']['token']
        > results = await ncc.login_flow_wait_confirm(token, timeout=60))
        > print(results['appPassword'])

    You may then use `appPassword` to log in as the user with your application.
    """

    async def login_flow_initiate(
            self,
            user_agent: Optional[str] = f'nextcloud_async/{__VERSION__}') -> Dict:
        r"""Initiate login flow v2.

        Args
        ----
            user_agent (str, optional): The name of your application. Defaults to
            'nextcloud_async/{__VERSION__}'.

        Returns
        -------
            Dict: Containing the user login URL and your temporary token for polling results.

            Example:

            {

                "poll":{

                    "token":"mQU...c6k8Wrs1",

                    "endpoint":"https:\/\/cloud.example.com\/login\/v2\/poll"
                },

                "login":"https:\/\/cloud.example.com\/login\/v2\/flow\/guyjG...YFg"

            }

        """
        response = await self.request(
            method='POST',
            url=f'{self.endpoint}/index.php/login/v2',
            headers={'user-agent': user_agent})
        return response.json()

    async def login_flow_wait_confirm(self, token, timeout: int = 60) -> Dict:
        r"""Wait for user to confirm application authorization.

        Args
        ----
            token (str): The temporary token provided by login_flow_initiate()

            timeout (int, optional): How long to wait for user authorization. Defaults to
            60 seconds.

        Raises
        ------
            NextCloudLoginFlowTimeout: When the user hasn't logged in by the given timeout.
            This function may be called repeatedly until the user accepts.

        Returns
        -------
            Dict: Your new credentials.

            Example:

            {

                "server":"https:\/\/cloud.example.com",

                "loginName":"username",

                "appPassword":"yKTVA4zgx...olYSuJ6sCN"
            }

        """
        start_dt = dt.datetime.now()
        running_time = 0

        response = await self.request(
            method='POST',
            url=f'{self.endpoint}/index.php/login/v2/poll',
            data={'token': token})

        while response.status_code == 404 and running_time < timeout:
            response = await self.request(
                method='POST',
                url=f'{self.endpoint}/index.php/login/v2/poll',
                data={'token': token})
            running_time = (dt.datetime.now() - start_dt).seconds
            await asyncio.sleep(1)

        if response.status_code == 404:
            raise NextCloudLoginFlowTimeout(
                'Login flow timed out.  You can try again.')

        return response.json()

    async def destroy_login_token(self):
        """Delete an app password generated by Login Flow v2.

        You must currently be logged in using the app password.

        Returns
        -------
            Empty 200 Response

        """
        return await self.ocs_query(
            method='DELETE',
            sub='/ocs/v2.php/core/apppassword')
