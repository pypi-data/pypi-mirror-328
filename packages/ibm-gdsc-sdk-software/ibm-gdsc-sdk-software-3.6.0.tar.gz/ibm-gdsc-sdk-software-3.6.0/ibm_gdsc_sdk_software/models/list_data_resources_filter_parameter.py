# coding: utf-8

"""
    IBM Guardium Data Security Center

    IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_software.models.sensitivity_category import SensitivityCategory
from typing import Optional, Set
from typing_extensions import Self

class ListDataResourcesFilterParameter(BaseModel):
    """
    ListDataResourcesFilterParameter
    """ # noqa: E501
    is_reviewed: Optional[StrictBool] = Field(default=None, alias="isReviewed")
    resource_owners: Optional[List[StrictStr]] = Field(default=None, alias="resourceOwners")
    resource_names: Optional[List[StrictStr]] = Field(default=None, alias="resourceNames")
    resource_types: Optional[List[StrictStr]] = Field(default=None, alias="resourceTypes")
    sensitivity_tags: Optional[List[StrictStr]] = Field(default=None, alias="sensitivityTags")
    sensitivity_categories: Optional[List[SensitivityCategory]] = Field(default=None, alias="sensitivityCategories")
    resource_partial_name: Optional[StrictStr] = Field(default=None, alias="resourcePartialName")
    __properties: ClassVar[List[str]] = ["isReviewed", "resourceOwners", "resourceNames", "resourceTypes", "sensitivityTags", "sensitivityCategories", "resourcePartialName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListDataResourcesFilterParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListDataResourcesFilterParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isReviewed": obj.get("isReviewed"),
            "resourceOwners": obj.get("resourceOwners"),
            "resourceNames": obj.get("resourceNames"),
            "resourceTypes": obj.get("resourceTypes"),
            "sensitivityTags": obj.get("sensitivityTags"),
            "sensitivityCategories": obj.get("sensitivityCategories"),
            "resourcePartialName": obj.get("resourcePartialName")
        })
        return _obj


