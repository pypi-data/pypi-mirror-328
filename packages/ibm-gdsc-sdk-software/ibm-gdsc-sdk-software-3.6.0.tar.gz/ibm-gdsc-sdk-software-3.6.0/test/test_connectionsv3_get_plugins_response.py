# coding: utf-8

"""
    IBM Guardium Data Security Center

    IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_software.models.connectionsv3_get_plugins_response import Connectionsv3GetPluginsResponse

class TestConnectionsv3GetPluginsResponse(unittest.TestCase):
    """Connectionsv3GetPluginsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Connectionsv3GetPluginsResponse:
        """Test Connectionsv3GetPluginsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Connectionsv3GetPluginsResponse`
        """
        model = Connectionsv3GetPluginsResponse()
        if include_optional:
            return Connectionsv3GetPluginsResponse(
                plugins = [
                    ibm_gdsc_sdk_software.models.plugin_configuration_is_the_details_of_a_custom_filter_plugin.PluginConfiguration is the details of a custom filter plugin(
                        datasource_type = '', 
                        developer_name = '', 
                        id = '', 
                        last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        logfile = '', 
                        name = '', 
                        readme = '', 
                        records = [
                            ibm_gdsc_sdk_software.models.name_and_value_for_each_plugin_record.name and value for each plugin record(
                                guard_record_name = '', 
                                value = '', )
                            ], 
                        state = '', 
                        supported_inputs = [
                            ''
                            ], )
                    ],
                status = ibm_gdsc_sdk_software.models.the_`status`_type_defines_a_logical_error_model_that_is_suitable_for_different
programming_environments,_including_rest_apis_and_rpc_apis/_it_is_used_by
[g_rpc](https://github/com/grpc)/_the_error_model_is_designed_to_be:.The `Status` type defines a logical error model that is suitable for different
programming environments, including REST APIs and RPC APIs. It is used by
[gRPC](https://github.com/grpc). The error model is designed to be:(
                    code = 56, 
                    details = [
                        ibm_gdsc_sdk_software.models.protobuf_any.protobufAny(
                            type_url = '', 
                            value = 'YQ==', )
                        ], 
                    message = '', )
            )
        else:
            return Connectionsv3GetPluginsResponse(
        )
        """

    def testConnectionsv3GetPluginsResponse(self):
        """Test Connectionsv3GetPluginsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
