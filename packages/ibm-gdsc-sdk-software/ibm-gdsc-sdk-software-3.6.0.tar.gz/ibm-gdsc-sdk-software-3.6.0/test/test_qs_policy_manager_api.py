# coding: utf-8

"""
    IBM Guardium Data Security Center

    IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_software.api.qs_policy_manager_api import QSPolicyManagerApi


class TestQSPolicyManagerApi(unittest.TestCase):
    """QSPolicyManagerApi unit test stubs"""

    def setUp(self) -> None:
        self.api = QSPolicyManagerApi()

    def tearDown(self) -> None:
        pass

    def test_q_s_policy_manager_batch_status_update(self) -> None:
        """Test case for q_s_policy_manager_batch_status_update

        BatchStatusUpdate - trigger the batch to update the status of the Ticket .
        """
        pass

    def test_q_s_policy_manager_create_ticket(self) -> None:
        """Test case for q_s_policy_manager_create_ticket

        CreateTicket - Create a new Incident .
        """
        pass

    def test_q_s_policy_manager_fetch_filesfrom_buckets(self) -> None:
        """Test case for q_s_policy_manager_fetch_filesfrom_buckets

        FetchFilesfromBuckets - fetch the file(s) from bucket of the object storage
        """
        pass

    def test_q_s_policy_manager_process_policy_dimention_records(self) -> None:
        """Test case for q_s_policy_manager_process_policy_dimention_records

        ProcessPolicyDimentionRecords - fetch the records from Policy Dimention and update Policy Fact table
        """
        pass

    def test_q_s_policy_manager_update_ticket_status(self) -> None:
        """Test case for q_s_policy_manager_update_ticket_status

        UpdateTicketStatus - Update the ticket status based on the IntegrationId and TicketId .
        """
        pass


if __name__ == '__main__':
    unittest.main()
