Metadata-Version: 2.1
Name: ibm-gdsc-sdk-software
Version: 3.6.1
Summary: IBM Guardium Data Security Center
Home-page: 
Author: IBM GDSC Team
Author-email: c3cvp8ch@ca.ibm.com
Keywords: OpenAPI,IBM Guardium Data Security Center
Description-Content-Type: text/markdown

# IBM Guardium Data Security Center Python client

## Requirements.

Python 3.7+

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install ibm-gdsc-sdk-software==3.6.1
```
(you may need to run `pip` with root permission: `sudo pip install ibm-gdsc-sdk-software==3.6.1`)

Then import the package:
```python
import ibm_gdsc_sdk_software
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import ibm_gdsc_sdk_software
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python

import os
import ibm_gdsc_sdk_software
from ibm_gdsc_sdk_software.models.tenantuserv3_get_users_response import Tenantuserv3GetUsersResponse
from ibm_gdsc_sdk_software.rest import ApiException
from pprint import pprint



# Configure HTTP basic authorization: BasicAuth
configuration = ibm_gdsc_sdk_software.Configuration(
    host = os.environ['URL'],
    username = os.environ['API_USERNAME'],
    password = os.environ['API_PASSWORD']
)

# Configure API key authorization: ApiKeyAuth
#configuration.api_key['ApiKeyAuth'] = os.environ['API_KEY']
configuration.verify_ssl = False
# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
#configuration.api_key_prefix['ApiKeyAuth'] = "Basic"
# Enter a context with an instance of the API client

with ibm_gdsc_sdk_software.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = ibm_gdsc_sdk_software.JumpboxServiceApi(api_client)
    uid = '' # str | Email. (optional)

    try:
        # Summary: Get users Description: Get all users base on a tenantID.
        api_response = api_instance.jumpbox_service_get_users(uid=uid)
        print("The response of JumpboxServiceApi->jumpbox_service_get_users:\n")
        pprint(api_response)
    except Exception as e:
        print("Exception when calling JumpboxServiceApi->jumpbox_service_get_users: %s\n" % e)

```

