import{a as j,n as F,d as N}from"./disclose-version.DitXKBiM.js";import{i as P}from"./legacy.DmYQQF0A.js";import{p as W,t as $,a as A,c as R,f as z,s as I,r as O,g as b,N as B}from"./index-client.IJhfC0Az.js";import{e as G,s as U,b as D,i as J,c as T}from"./index.B1eIzCxP.js";import{l as x,p as r}from"./props.C-C6UnW2.js";/**
 * @license lucide-svelte v0.456.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const L={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"};var M=F("<svg><!><!></svg>");function Y(e,t){const s=x(t,["children","$$slots","$$events","$$legacy"]),a=x(s,["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"]);W(t,!1);let n=r(t,"name",8,void 0),v=r(t,"color",8,"currentColor"),l=r(t,"size",8,24),p=r(t,"strokeWidth",8,2),y=r(t,"absoluteStrokeWidth",8,!1),E=r(t,"iconNode",24,()=>[]);const _=(...u)=>u.filter((i,d,f)=>!!i&&f.indexOf(i)===d).join(" ");P();var c=M();let w;var m=R(c);G(m,1,E,J,(u,i)=>{let d=()=>b(i)[0],f=()=>b(i)[1];var k=N(),C=z(k);D(C,d,!0,(h,V)=>{let g;$(()=>g=T(h,g,{...f()},void 0,h.namespaceURI===B,h.nodeName.includes("-")))}),j(u,k)});var S=I(m);U(S,t,"default",{},null),O(c),$(()=>w=T(c,w,{...L,...a,width:l(),height:l(),stroke:v(),"stroke-width":y()?Number(p())*24/Number(l()):p(),class:_("lucide-icon","lucide",n()?`lucide-${n()}`:"",s.class)},void 0,!0)),j(e,c),A()}const o="http://localhost:8000/api";async function Z(){const e=await fetch(`${o}/projects`);if(!e.ok)throw new Error(`Failed to fetch projects: ${e.statusText}`);return e.json()}async function tt(e){const t=await fetch(`${o}/jobs/${e}`,{method:"POST",headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error(`Failed to start experiment: ${t.statusText}`);return t.json()}async function et(e,t){const s=await fetch(`${o}/jobs/${e}/${t}/status`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!s.ok)throw new Error(`Failed to fetch job status: ${s.statusText}`);return s.json()}async function st(e,t=5,s=0){const a=await fetch(`${o}/runs/${e}?limit=${t}&offset=${s}`,{headers:{"Content-Type":"application/json"}});if(!a.ok)throw new Error(`Failed to fetch recent runs: ${a.statusText}`);return a.json()}async function ot(e){const t=await fetch(`${o}/run-details/${e}`);if(!t.ok)throw new Error(`Failed to fetch run details: ${t.statusText}`);return t.json()}async function at(e,t,s=10,a=0){const n=await fetch(`${o}/same-tasks/${e}/${t}?limit=${s}&offset=${a}`);if(!n.ok)throw new Error(`Failed to fetch same tasks: ${n.statusText}`);return n.json()}async function nt(e,t){const s=await fetch(`${o}/jobs/${e}/task/${t}`,{method:"POST",headers:{"Content-Type":"application/json"}});if(!s.ok)throw new Error(`Failed to start task: ${s.statusText}`);return s.json()}async function rt(e){const t=await fetch(`${o}/tasks/${e}`);if(!t.ok)throw new Error(`Failed to get available tasks: ${t.statusText}`);return t.json()}export{Y as I,ot as a,et as b,nt as c,Z as d,at as e,rt as f,st as g,tt as s};
