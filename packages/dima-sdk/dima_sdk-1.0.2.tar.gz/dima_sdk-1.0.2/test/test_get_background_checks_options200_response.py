# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dima_sdk.models.get_background_checks_options200_response import GetBackgroundChecksOptions200Response

class TestGetBackgroundChecksOptions200Response(unittest.TestCase):
    """GetBackgroundChecksOptions200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetBackgroundChecksOptions200Response:
        """Test GetBackgroundChecksOptions200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetBackgroundChecksOptions200Response`
        """
        model = GetBackgroundChecksOptions200Response()
        if include_optional:
            return GetBackgroundChecksOptions200Response(
                data = dima_sdk.models.get_background_checks_options_200_response_data.getBackgroundChecksOptions_200_response_data(
                    packages = [
                        dima_sdk.models.get_background_checks_options_200_response_data_packages_inner.getBackgroundChecksOptions_200_response_data_packages_inner(
                            id = '8afe3457-5fbf-4090-8869-4bd146bae075', 
                            name = 'Basic Employment', 
                            price = 101, 
                            checks = [
                                '331320f0-d9f5-4904-acc9-1693c93863c1'
                                ], 
                            currency = 'USD', 
                            is_available = True, )
                        ], 
                    individual_checks = [
                        dima_sdk.models.get_background_checks_options_200_response_data_individual_checks_inner.getBackgroundChecksOptions_200_response_data_individual_checks_inner(
                            id = '331320f0-d9f5-4904-acc9-1693c93863c1', 
                            name = 'Softcheck', 
                            price = 49, 
                            currency = 'USD', 
                            is_available = True, 
                            third_party_name = 'request_softcheck', )
                        ], )
            )
        else:
            return GetBackgroundChecksOptions200Response(
                data = dima_sdk.models.get_background_checks_options_200_response_data.getBackgroundChecksOptions_200_response_data(
                    packages = [
                        dima_sdk.models.get_background_checks_options_200_response_data_packages_inner.getBackgroundChecksOptions_200_response_data_packages_inner(
                            id = '8afe3457-5fbf-4090-8869-4bd146bae075', 
                            name = 'Basic Employment', 
                            price = 101, 
                            checks = [
                                '331320f0-d9f5-4904-acc9-1693c93863c1'
                                ], 
                            currency = 'USD', 
                            is_available = True, )
                        ], 
                    individual_checks = [
                        dima_sdk.models.get_background_checks_options_200_response_data_individual_checks_inner.getBackgroundChecksOptions_200_response_data_individual_checks_inner(
                            id = '331320f0-d9f5-4904-acc9-1693c93863c1', 
                            name = 'Softcheck', 
                            price = 49, 
                            currency = 'USD', 
                            is_available = True, 
                            third_party_name = 'request_softcheck', )
                        ], ),
        )
        """

    def testGetBackgroundChecksOptions200Response(self):
        """Test GetBackgroundChecksOptions200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
