# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.get_pay_stub200_response_data_inner_employees_inner import GetPayStub200ResponseDataInnerEmployeesInner
from typing import Optional, Set
from typing_extensions import Self

class GetPayStub200ResponseDataInner(BaseModel):
    """
    GetPayStub200ResponseDataInner
    """ # noqa: E501
    source: Optional[StrictStr] = Field(default=None, description="Source of the payroll data.")
    employees: Optional[List[GetPayStub200ResponseDataInnerEmployeesInner]] = Field(default=None, description="List of employees included in the payroll.")
    payroll_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the payroll.")
    payment_date: Optional[StrictStr] = Field(default=None, description="Date when the payment is made.")
    payment_type: Optional[StrictStr] = Field(default=None, description="Type of payroll payment.")
    payment_status: Optional[StrictStr] = Field(default=None, description="Current status of the payroll payment.")
    payroll_end_date: Optional[StrictStr] = Field(default=None, description="End date of the payroll period.")
    payroll_schedule: Optional[StrictStr] = Field(default=None, description="Frequency of the payroll schedule.")
    payroll_start_date: Optional[StrictStr] = Field(default=None, description="Start date of the payroll period.")
    __properties: ClassVar[List[str]] = ["source", "employees", "payroll_id", "payment_date", "payment_type", "payment_status", "payroll_end_date", "payroll_schedule", "payroll_start_date"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HISTORICAL', 'NEW']):
            raise ValueError("must be one of enum values ('HISTORICAL', 'NEW')")
        return value

    @field_validator('payment_type')
    def payment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECONCILIATION', 'PARALLEL', 'HISTORICAL', 'OFFCYCLE', 'REGULAR']):
            raise ValueError("must be one of enum values ('RECONCILIATION', 'PARALLEL', 'HISTORICAL', 'OFFCYCLE', 'REGULAR')")
        return value

    @field_validator('payment_status')
    def payment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPEN', 'LOCKED', 'CLOSED']):
            raise ValueError("must be one of enum values ('OPEN', 'LOCKED', 'CLOSED')")
        return value

    @field_validator('payroll_schedule')
    def payroll_schedule_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BIMONTHLY', 'MONTHLY', 'BIWEEKLY', 'WEEKLY']):
            raise ValueError("must be one of enum values ('BIMONTHLY', 'MONTHLY', 'BIWEEKLY', 'WEEKLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPayStub200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in employees (list)
        _items = []
        if self.employees:
            for _item_employees in self.employees:
                if _item_employees:
                    _items.append(_item_employees.to_dict())
            _dict['employees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPayStub200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": obj.get("source"),
            "employees": [GetPayStub200ResponseDataInnerEmployeesInner.from_dict(_item) for _item in obj["employees"]] if obj.get("employees") is not None else None,
            "payroll_id": obj.get("payroll_id"),
            "payment_date": obj.get("payment_date"),
            "payment_type": obj.get("payment_type"),
            "payment_status": obj.get("payment_status"),
            "payroll_end_date": obj.get("payroll_end_date"),
            "payroll_schedule": obj.get("payroll_schedule"),
            "payroll_start_date": obj.get("payroll_start_date")
        })
        return _obj


