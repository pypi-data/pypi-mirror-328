# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EquityTaxEventsRequestData(BaseModel):
    """
    EquityTaxEventsRequestData
    """ # noqa: E501
    fx_rate: Union[StrictFloat, StrictInt] = Field(description="The exchange rate used to convert the local currency to the payroll currency")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The tax rate applied to the benefit in kind")
    unit_fmv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fair market value of the equity grant at the time of the event")
    contract_d: Optional[StrictStr] = Field(default=None, description="The unique identifier of the contract of the employee who received the equity grant")
    event_date: Optional[date] = Field(default=None, description="The date of the event")
    sale_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price at which the equity was sold")
    gross_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The gross value of the equity grant")
    plan_currency: StrictStr = Field(description="The currency in which the equity grant was issued")
    exercise_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price at which the equity was exercised")
    equity_grant_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the equity grant - optional in case you don't have remove the property")
    settlement_date: date = Field(description="The date of the settlement")
    payroll_currency: StrictStr = Field(description="The currency in which the payroll is processed")
    tax_jurisdiction: StrictStr = Field(description="The tax jurisdiction in which the equity grant was issued")
    transaction_fees: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fees associated with the transaction")
    quantity_remaining: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of equity that remains")
    taxable_gain_or_loss: Union[StrictFloat, StrictInt] = Field(description="The taxable gain or loss")
    total_exercise_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total exercise price")
    total_taxes_withheld: Union[StrictFloat, StrictInt] = Field(description="The total amount of taxes withheld")
    method_of_tax_coverage: StrictStr = Field(description="The method used to cover the taxes")
    quantity_withheld_or_sold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of equity that was withheld or sold")
    withheld_tax_local_currency: Union[StrictFloat, StrictInt] = Field(description="The tax withheld in the local currency")
    benefit_in_kind_local_currency: Union[StrictFloat, StrictInt] = Field(description="The benefit in kind in the local currency")
    quantity_exercised_or_released: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of equity that was exercised or released")
    __properties: ClassVar[List[str]] = ["fx_rate", "tax_rate", "unit_fmv", "contract_d", "event_date", "sale_price", "gross_value", "plan_currency", "exercise_price", "equity_grant_id", "settlement_date", "payroll_currency", "tax_jurisdiction", "transaction_fees", "quantity_remaining", "taxable_gain_or_loss", "total_exercise_price", "total_taxes_withheld", "method_of_tax_coverage", "quantity_withheld_or_sold", "withheld_tax_local_currency", "benefit_in_kind_local_currency", "quantity_exercised_or_released"]

    @field_validator('method_of_tax_coverage')
    def method_of_tax_coverage_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AD_HOC', 'BIK_REPORTING_ONLY', 'BIK_WITHHOLDING_AT_SOURCE_CLIENT', 'BIK_WITHHOLDING_AT_SOURCE_CLIENT_REVERSE', 'BIK_WITHHOLDING_GROSSED_UP_BONUS', 'BIK_WITHHOLDING_NET_SETTLEMENT', 'BIK_WITHHOLDING_SALARY_DEDUCTION', 'BIK_WITHHOLDING_WORKER', 'NO_BIK_NO_WITHHOLDING']):
            raise ValueError("must be one of enum values ('AD_HOC', 'BIK_REPORTING_ONLY', 'BIK_WITHHOLDING_AT_SOURCE_CLIENT', 'BIK_WITHHOLDING_AT_SOURCE_CLIENT_REVERSE', 'BIK_WITHHOLDING_GROSSED_UP_BONUS', 'BIK_WITHHOLDING_NET_SETTLEMENT', 'BIK_WITHHOLDING_SALARY_DEDUCTION', 'BIK_WITHHOLDING_WORKER', 'NO_BIK_NO_WITHHOLDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EquityTaxEventsRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EquityTaxEventsRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fx_rate": obj.get("fx_rate"),
            "tax_rate": obj.get("tax_rate"),
            "unit_fmv": obj.get("unit_fmv"),
            "contract_d": obj.get("contract_d"),
            "event_date": obj.get("event_date"),
            "sale_price": obj.get("sale_price"),
            "gross_value": obj.get("gross_value"),
            "plan_currency": obj.get("plan_currency"),
            "exercise_price": obj.get("exercise_price"),
            "equity_grant_id": obj.get("equity_grant_id"),
            "settlement_date": obj.get("settlement_date"),
            "payroll_currency": obj.get("payroll_currency"),
            "tax_jurisdiction": obj.get("tax_jurisdiction"),
            "transaction_fees": obj.get("transaction_fees"),
            "quantity_remaining": obj.get("quantity_remaining"),
            "taxable_gain_or_loss": obj.get("taxable_gain_or_loss"),
            "total_exercise_price": obj.get("total_exercise_price"),
            "total_taxes_withheld": obj.get("total_taxes_withheld"),
            "method_of_tax_coverage": obj.get("method_of_tax_coverage"),
            "quantity_withheld_or_sold": obj.get("quantity_withheld_or_sold"),
            "withheld_tax_local_currency": obj.get("withheld_tax_local_currency"),
            "benefit_in_kind_local_currency": obj.get("benefit_in_kind_local_currency"),
            "quantity_exercised_or_released": obj.get("quantity_exercised_or_released")
        })
        return _obj


