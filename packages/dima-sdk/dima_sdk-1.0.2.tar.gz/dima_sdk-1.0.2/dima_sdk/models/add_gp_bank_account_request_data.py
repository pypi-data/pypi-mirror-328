# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AddGpBankAccountRequestData(BaseModel):
    """
    AddGpBankAccountRequestData
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="The city of the user's address.")
    iban: Optional[StrictStr] = Field(default=None, description="The International Bank Account Number (IBAN).")
    email: Optional[StrictStr] = Field(default=None, description="The user's email address.")
    phone: Optional[StrictStr] = Field(default=None, description="The user's phone number.")
    postal: Optional[StrictStr] = Field(default=None, description="The user's postal or ZIP code.")
    tax_id: Optional[StrictStr] = Field(default=None, description="The user's tax identification number.")
    bank_code: Optional[StrictStr] = Field(default=None, description="The bank code.")
    bank_name: Optional[StrictStr] = Field(default=None, description="Name of the user's bank.")
    full_name: Optional[StrictStr] = Field(default=None, description="Full name of the user.")
    swift_bic: Optional[StrictStr] = Field(default=None, description="SWIFT/BIC code for the bank.")
    rib_number: Optional[StrictStr] = Field(default=None, description="The RIB (Relevé d'Identité Bancaire).")
    branch_code: Optional[StrictStr] = Field(default=None, description="The branch code of the user's bank.")
    account_type: Optional[StrictStr] = Field(default=None, description="Bank account type.")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code of the user's address.")
    address_line1: Optional[StrictStr] = Field(default=None, description="The primary address line.")
    address_line2: Optional[StrictStr] = Field(default=None, description="The secondary address line.")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency code for transactions.")
    original_name: Optional[StrictStr] = Field(default=None, description="The original name of the user.")
    account_number: Optional[StrictStr] = Field(default=None, description="The user's bank account number.")
    province_state: Optional[StrictStr] = Field(default=None, description="The state or province of the user's address.")
    bank_branch_name: Optional[StrictStr] = Field(default=None, description="The name of the user's bank branch.")
    bank_country_code: Optional[StrictStr] = Field(default=None, description="The country code where the bank is located.")
    ach_routing_number: Optional[StrictStr] = Field(default=None, description="The ACH (Automated Clearing House) Routing Number.")
    __properties: ClassVar[List[str]] = ["city", "iban", "email", "phone", "postal", "tax_id", "bank_code", "bank_name", "full_name", "swift_bic", "rib_number", "branch_code", "account_type", "country_code", "address_line1", "address_line2", "currency_code", "original_name", "account_number", "province_state", "bank_branch_name", "bank_country_code", "ach_routing_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddGpBankAccountRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddGpBankAccountRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "iban": obj.get("iban"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "postal": obj.get("postal"),
            "tax_id": obj.get("tax_id"),
            "bank_code": obj.get("bank_code"),
            "bank_name": obj.get("bank_name"),
            "full_name": obj.get("full_name"),
            "swift_bic": obj.get("swift_bic"),
            "rib_number": obj.get("rib_number"),
            "branch_code": obj.get("branch_code"),
            "account_type": obj.get("account_type"),
            "country_code": obj.get("country_code"),
            "address_line1": obj.get("address_line1"),
            "address_line2": obj.get("address_line2"),
            "currency_code": obj.get("currency_code"),
            "original_name": obj.get("original_name"),
            "account_number": obj.get("account_number"),
            "province_state": obj.get("province_state"),
            "bank_branch_name": obj.get("bank_branch_name"),
            "bank_country_code": obj.get("bank_country_code"),
            "ach_routing_number": obj.get("ach_routing_number")
        })
        return _obj


