# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.address import Address
from dima_sdk.models.custom_field_value import CustomFieldValue
from dima_sdk.models.email import Email
from dima_sdk.models.employee_department import EmployeeDepartment
from dima_sdk.models.employee_direct_manager import EmployeeDirectManager
from dima_sdk.models.employment_detail import EmploymentDetail
from dima_sdk.models.get_people_list200_response_data_inner_direct_reports_inner import GetPeopleList200ResponseDataInnerDirectReportsInner
from dima_sdk.models.people_client_legal_entity import PeopleClientLegalEntity
from dima_sdk.models.people_custom_field import PeopleCustomField
from dima_sdk.models.worker_relations import WorkerRelations
from typing import Optional, Set
from typing_extensions import Self

class PeopleByIdContainerData(BaseModel):
    """
    PeopleByIdContainerData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the employee.")
    created_at: Optional[datetime] = Field(default=None, description="The creation timestamp of the employee record.")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the employee.")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the employee.")
    full_name: Optional[StrictStr] = Field(default=None, description="The full name of the employee.")
    worker_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The worker ID of the employee.")
    external_id: Optional[StrictStr] = Field(default=None, description="The external ID of the employee.")
    termination_last_day: Optional[date] = Field(default=None, description="The last day of work mentioned on the termination.")
    preferred_first_name: Optional[StrictStr] = Field(default=None, description="The preferred first name of the employee.")
    preferred_last_name: Optional[StrictStr] = Field(default=None, description="The preferred last name of the employee.")
    addresses: Optional[List[Address]] = None
    emails: Optional[List[Email]] = Field(default=None, description="An array of the employee's email addresses.")
    birth_date: Optional[StrictStr] = Field(default=None, description="The birth date of the employee.")
    start_date: Optional[date] = Field(default=None, description="The date the employee started working.")
    nationalities: Optional[List[StrictStr]] = Field(default=None, description="The nationality of the employee.")
    client_legal_entity: Optional[PeopleClientLegalEntity] = None
    state: Optional[StrictStr] = Field(default=None, description="The state of the employee.")
    seniority: Optional[StrictStr] = Field(default=None, description="The seniority level of the employee.")
    completion_date: Optional[StrictStr] = Field(default=None, description="The completion date of the task or project.")
    direct_manager: Optional[EmployeeDirectManager] = None
    direct_reports: Optional[List[GetPeopleList200ResponseDataInnerDirectReportsInner]] = Field(default=None, description="The direct reports to the employee.")
    direct_reports_count: Optional[StrictInt] = Field(default=None, description="The count of direct reports to the employee.")
    worker_relations: Optional[List[WorkerRelations]] = Field(default=None, description="when parameter IncludeWorkerRelations = true")
    custom_field_values: Optional[List[CustomFieldValue]] = Field(default=None, description="when parameter include_custom_fields = true")
    employments: Optional[List[EmploymentDetail]] = None
    hiring_status: Optional[StrictStr] = Field(default=None, description="The current hiring status of the employee.")
    new_hiring_status: Optional[StrictStr] = Field(default=None, description="The new hiring status of the employee.")
    hiring_type: Optional[StrictStr] = Field(default=None, description="The type of hiring of the employee.")
    job_title: Optional[StrictStr] = Field(default=None, description="The job title of the employee.")
    country: Optional[StrictStr] = Field(default=None, description="The country of the employee.")
    timezone: Optional[StrictStr] = Field(default=None, description="The timezone of the employee.")
    department: Optional[EmployeeDepartment] = None
    work_location: Optional[StrictStr] = Field(default=None, description="The work location of the employee.")
    updated_at: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    custom_fields: Optional[List[PeopleCustomField]] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "first_name", "last_name", "full_name", "worker_id", "external_id", "termination_last_day", "preferred_first_name", "preferred_last_name", "addresses", "emails", "birth_date", "start_date", "nationalities", "client_legal_entity", "state", "seniority", "completion_date", "direct_manager", "direct_reports", "direct_reports_count", "worker_relations", "custom_field_values", "employments", "hiring_status", "new_hiring_status", "hiring_type", "job_title", "country", "timezone", "department", "work_location", "updated_at", "custom_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PeopleByIdContainerData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item_emails in self.emails:
                if _item_emails:
                    _items.append(_item_emails.to_dict())
            _dict['emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of client_legal_entity
        if self.client_legal_entity:
            _dict['client_legal_entity'] = self.client_legal_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of direct_manager
        if self.direct_manager:
            _dict['direct_manager'] = self.direct_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in direct_reports (list)
        _items = []
        if self.direct_reports:
            for _item_direct_reports in self.direct_reports:
                if _item_direct_reports:
                    _items.append(_item_direct_reports.to_dict())
            _dict['direct_reports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in worker_relations (list)
        _items = []
        if self.worker_relations:
            for _item_worker_relations in self.worker_relations:
                if _item_worker_relations:
                    _items.append(_item_worker_relations.to_dict())
            _dict['worker_relations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_field_values (list)
        _items = []
        if self.custom_field_values:
            for _item_custom_field_values in self.custom_field_values:
                if _item_custom_field_values:
                    _items.append(_item_custom_field_values.to_dict())
            _dict['custom_field_values'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in employments (list)
        _items = []
        if self.employments:
            for _item_employments in self.employments:
                if _item_employments:
                    _items.append(_item_employments.to_dict())
            _dict['employments'] = _items
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if termination_last_day (nullable) is None
        # and model_fields_set contains the field
        if self.termination_last_day is None and "termination_last_day" in self.model_fields_set:
            _dict['termination_last_day'] = None

        # set to None if completion_date (nullable) is None
        # and model_fields_set contains the field
        if self.completion_date is None and "completion_date" in self.model_fields_set:
            _dict['completion_date'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PeopleByIdContainerData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "full_name": obj.get("full_name"),
            "worker_id": obj.get("worker_id"),
            "external_id": obj.get("external_id"),
            "termination_last_day": obj.get("termination_last_day"),
            "preferred_first_name": obj.get("preferred_first_name"),
            "preferred_last_name": obj.get("preferred_last_name"),
            "addresses": [Address.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "emails": [Email.from_dict(_item) for _item in obj["emails"]] if obj.get("emails") is not None else None,
            "birth_date": obj.get("birth_date"),
            "start_date": obj.get("start_date"),
            "nationalities": obj.get("nationalities"),
            "client_legal_entity": PeopleClientLegalEntity.from_dict(obj["client_legal_entity"]) if obj.get("client_legal_entity") is not None else None,
            "state": obj.get("state"),
            "seniority": obj.get("seniority"),
            "completion_date": obj.get("completion_date"),
            "direct_manager": EmployeeDirectManager.from_dict(obj["direct_manager"]) if obj.get("direct_manager") is not None else None,
            "direct_reports": [GetPeopleList200ResponseDataInnerDirectReportsInner.from_dict(_item) for _item in obj["direct_reports"]] if obj.get("direct_reports") is not None else None,
            "direct_reports_count": obj.get("direct_reports_count"),
            "worker_relations": [WorkerRelations.from_dict(_item) for _item in obj["worker_relations"]] if obj.get("worker_relations") is not None else None,
            "custom_field_values": [CustomFieldValue.from_dict(_item) for _item in obj["custom_field_values"]] if obj.get("custom_field_values") is not None else None,
            "employments": [EmploymentDetail.from_dict(_item) for _item in obj["employments"]] if obj.get("employments") is not None else None,
            "hiring_status": obj.get("hiring_status"),
            "new_hiring_status": obj.get("new_hiring_status"),
            "hiring_type": obj.get("hiring_type"),
            "job_title": obj.get("job_title"),
            "country": obj.get("country"),
            "timezone": obj.get("timezone"),
            "department": EmployeeDepartment.from_dict(obj["department"]) if obj.get("department") is not None else None,
            "work_location": obj.get("work_location"),
            "updated_at": obj.get("updated_at"),
            "custom_fields": [PeopleCustomField.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None
        })
        return _obj


