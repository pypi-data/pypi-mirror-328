# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetContractById200ResponseDataClientLegalEntity(BaseModel):
    """
    GetContractById200ResponseDataClientLegalEntity
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="Name of a team.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the legal entity.")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the legal entity.")
    subtype: Optional[StrictStr] = Field(default=None, description="Sub-type of the legal entity.")
    vat_number: Optional[StrictStr] = Field(default=None, description="VAT number of the legal entity.")
    registration_number: Optional[StrictStr] = Field(default=None, description="Registration number of the legal entity.")
    __properties: ClassVar[List[str]] = ["id", "name", "type", "email", "subtype", "vat_number", "registration_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetContractById200ResponseDataClientLegalEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if subtype (nullable) is None
        # and model_fields_set contains the field
        if self.subtype is None and "subtype" in self.model_fields_set:
            _dict['subtype'] = None

        # set to None if vat_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_number is None and "vat_number" in self.model_fields_set:
            _dict['vat_number'] = None

        # set to None if registration_number (nullable) is None
        # and model_fields_set contains the field
        if self.registration_number is None and "registration_number" in self.model_fields_set:
            _dict['registration_number'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetContractById200ResponseDataClientLegalEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "email": obj.get("email"),
            "subtype": obj.get("subtype"),
            "vat_number": obj.get("vat_number"),
            "registration_number": obj.get("registration_number")
        })
        return _obj


