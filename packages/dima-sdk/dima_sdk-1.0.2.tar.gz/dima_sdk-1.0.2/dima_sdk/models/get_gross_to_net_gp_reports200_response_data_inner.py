# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetGrossToNetGPReports200ResponseDataInner(BaseModel):
    """
    GetGrossToNetGPReports200ResponseDataInner
    """ # noqa: E501
    net_pay: Optional[StrictStr] = Field(default=None, description="The net pay of the employee.")
    ee_loans: Optional[StrictStr] = Field(default=None, description="Employee loans deducted from gross pay.")
    contract_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the employee's contract.")
    cost_center: Optional[StrictStr] = Field(default=None, description="The cost center to which the employee belongs.")
    annual_bonus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The annual bonus amount for the employee.")
    car_allowance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Car allowance amount for the employee.")
    ee_income_tax: Optional[StrictStr] = Field(default=None, description="Income tax deducted from the employee.")
    employee_name: Optional[StrictStr] = Field(default=None, description="The name of the employee.")
    employer_cost: Optional[StrictStr] = Field(default=None, description="The employer's total cost.")
    esp_deduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Employee stock purchase deduction amount.")
    funding_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The funding amount for the employee.")
    home_allowance: Optional[StrictStr] = Field(default=None, description="The home allowance for the employee.")
    employee_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The employee's unique number.")
    backdated_salary: Optional[StrictStr] = Field(default=None, description="The backdated salary amount.")
    employee_division: Optional[StrictStr] = Field(default=None, description="The division to which the employee belongs.")
    employee_job_title: Optional[StrictStr] = Field(default=None, description="The employee's job title.")
    employee_department: Optional[StrictStr] = Field(default=None, description="The department to which the employee belongs.")
    er_occupational_risk: Optional[StrictStr] = Field(default=None, description="Employer's contribution to occupational risk insurance.")
    pension_contribution: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount contributed to the pension by the employee.")
    employer_contribution: Optional[StrictStr] = Field(default=None, description="The employer's contribution amount.")
    employment_status_tag_internal: Optional[StrictStr] = Field(default=None, description="Internal tag indicating the employment status.")
    __properties: ClassVar[List[str]] = ["net_pay", "ee_loans", "contract_id", "cost_center", "annual_bonus", "car_allowance", "ee_income_tax", "employee_name", "employer_cost", "esp_deduction", "funding_amount", "home_allowance", "employee_number", "backdated_salary", "employee_division", "employee_job_title", "employee_department", "er_occupational_risk", "pension_contribution", "employer_contribution", "employment_status_tag_internal"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGrossToNetGPReports200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if net_pay (nullable) is None
        # and model_fields_set contains the field
        if self.net_pay is None and "net_pay" in self.model_fields_set:
            _dict['net_pay'] = None

        # set to None if ee_loans (nullable) is None
        # and model_fields_set contains the field
        if self.ee_loans is None and "ee_loans" in self.model_fields_set:
            _dict['ee_loans'] = None

        # set to None if cost_center (nullable) is None
        # and model_fields_set contains the field
        if self.cost_center is None and "cost_center" in self.model_fields_set:
            _dict['cost_center'] = None

        # set to None if annual_bonus (nullable) is None
        # and model_fields_set contains the field
        if self.annual_bonus is None and "annual_bonus" in self.model_fields_set:
            _dict['annual_bonus'] = None

        # set to None if car_allowance (nullable) is None
        # and model_fields_set contains the field
        if self.car_allowance is None and "car_allowance" in self.model_fields_set:
            _dict['car_allowance'] = None

        # set to None if ee_income_tax (nullable) is None
        # and model_fields_set contains the field
        if self.ee_income_tax is None and "ee_income_tax" in self.model_fields_set:
            _dict['ee_income_tax'] = None

        # set to None if employee_name (nullable) is None
        # and model_fields_set contains the field
        if self.employee_name is None and "employee_name" in self.model_fields_set:
            _dict['employee_name'] = None

        # set to None if employer_cost (nullable) is None
        # and model_fields_set contains the field
        if self.employer_cost is None and "employer_cost" in self.model_fields_set:
            _dict['employer_cost'] = None

        # set to None if esp_deduction (nullable) is None
        # and model_fields_set contains the field
        if self.esp_deduction is None and "esp_deduction" in self.model_fields_set:
            _dict['esp_deduction'] = None

        # set to None if funding_amount (nullable) is None
        # and model_fields_set contains the field
        if self.funding_amount is None and "funding_amount" in self.model_fields_set:
            _dict['funding_amount'] = None

        # set to None if home_allowance (nullable) is None
        # and model_fields_set contains the field
        if self.home_allowance is None and "home_allowance" in self.model_fields_set:
            _dict['home_allowance'] = None

        # set to None if employee_number (nullable) is None
        # and model_fields_set contains the field
        if self.employee_number is None and "employee_number" in self.model_fields_set:
            _dict['employee_number'] = None

        # set to None if backdated_salary (nullable) is None
        # and model_fields_set contains the field
        if self.backdated_salary is None and "backdated_salary" in self.model_fields_set:
            _dict['backdated_salary'] = None

        # set to None if employee_division (nullable) is None
        # and model_fields_set contains the field
        if self.employee_division is None and "employee_division" in self.model_fields_set:
            _dict['employee_division'] = None

        # set to None if employee_job_title (nullable) is None
        # and model_fields_set contains the field
        if self.employee_job_title is None and "employee_job_title" in self.model_fields_set:
            _dict['employee_job_title'] = None

        # set to None if employee_department (nullable) is None
        # and model_fields_set contains the field
        if self.employee_department is None and "employee_department" in self.model_fields_set:
            _dict['employee_department'] = None

        # set to None if er_occupational_risk (nullable) is None
        # and model_fields_set contains the field
        if self.er_occupational_risk is None and "er_occupational_risk" in self.model_fields_set:
            _dict['er_occupational_risk'] = None

        # set to None if pension_contribution (nullable) is None
        # and model_fields_set contains the field
        if self.pension_contribution is None and "pension_contribution" in self.model_fields_set:
            _dict['pension_contribution'] = None

        # set to None if employer_contribution (nullable) is None
        # and model_fields_set contains the field
        if self.employer_contribution is None and "employer_contribution" in self.model_fields_set:
            _dict['employer_contribution'] = None

        # set to None if employment_status_tag_internal (nullable) is None
        # and model_fields_set contains the field
        if self.employment_status_tag_internal is None and "employment_status_tag_internal" in self.model_fields_set:
            _dict['employment_status_tag_internal'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGrossToNetGPReports200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "net_pay": obj.get("net_pay"),
            "ee_loans": obj.get("ee_loans"),
            "contract_id": obj.get("contract_id"),
            "cost_center": obj.get("cost_center"),
            "annual_bonus": obj.get("annual_bonus"),
            "car_allowance": obj.get("car_allowance"),
            "ee_income_tax": obj.get("ee_income_tax"),
            "employee_name": obj.get("employee_name"),
            "employer_cost": obj.get("employer_cost"),
            "esp_deduction": obj.get("esp_deduction"),
            "funding_amount": obj.get("funding_amount"),
            "home_allowance": obj.get("home_allowance"),
            "employee_number": obj.get("employee_number"),
            "backdated_salary": obj.get("backdated_salary"),
            "employee_division": obj.get("employee_division"),
            "employee_job_title": obj.get("employee_job_title"),
            "employee_department": obj.get("employee_department"),
            "er_occupational_risk": obj.get("er_occupational_risk"),
            "pension_contribution": obj.get("pension_contribution"),
            "employer_contribution": obj.get("employer_contribution"),
            "employment_status_tag_internal": obj.get("employment_status_tag_internal")
        })
        return _obj


