# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_sdk.models.client_of_contract import ClientOfContract
from dima_sdk.models.compensation_details_of_contract import CompensationDetailsOfContract
from dima_sdk.models.contract_custom_field import ContractCustomField
from dima_sdk.models.contract_status_enum import ContractStatusEnum
from dima_sdk.models.contract_template import ContractTemplate
from dima_sdk.models.contract_type_enum import ContractTypeEnum
from dima_sdk.models.contract_who_reports_enum import ContractWhoReportsEnum
from dima_sdk.models.employment_details_of_contract import EmploymentDetailsOfContract
from dima_sdk.models.eor_quote_base import EorQuoteBase
from dima_sdk.models.invitations_of_basic_contract import InvitationsOfBasicContract
from dima_sdk.models.seniority import Seniority
from dima_sdk.models.signatures_of_contract import SignaturesOfContract
from dima_sdk.models.worker_of_contract import WorkerOfContract
from typing import Optional, Set
from typing_extensions import Self

class Contract(BaseModel):
    """
    Contract
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True)]
    title: Annotated[str, Field(min_length=1, strict=True)]
    type: ContractTypeEnum
    status: ContractStatusEnum
    created_at: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    job_title: Optional[StrictStr] = None
    seniority: Optional[Seniority]
    who_reports: Optional[ContractWhoReportsEnum] = None
    scope_of_work: Optional[StrictStr] = None
    start_date: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    termination_date: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    special_clause: StrictStr
    is_archived: StrictBool
    client: Optional[ClientOfContract]
    worker: Optional[WorkerOfContract]
    invitations: InvitationsOfBasicContract
    signatures: SignaturesOfContract
    compensation_details: CompensationDetailsOfContract
    employment_details: EmploymentDetailsOfContract
    notice_period: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=0, description="Days before to notice the termination of contract for eather party.")
    contract_template: Optional[ContractTemplate] = None
    custom_fields: Optional[List[ContractCustomField]] = None
    quote: Optional[EorQuoteBase] = None
    external_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for the object provided by an external system.")
    __properties: ClassVar[List[str]] = ["id", "title", "type", "status", "created_at", "job_title", "seniority", "who_reports", "scope_of_work", "start_date", "termination_date", "special_clause", "is_archived", "client", "worker", "invitations", "signatures", "compensation_details", "employment_details", "notice_period", "contract_template", "custom_fields", "quote", "external_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Contract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of seniority
        if self.seniority:
            _dict['seniority'] = self.seniority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict['worker'] = self.worker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invitations
        if self.invitations:
            _dict['invitations'] = self.invitations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signatures
        if self.signatures:
            _dict['signatures'] = self.signatures.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensation_details
        if self.compensation_details:
            _dict['compensation_details'] = self.compensation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employment_details
        if self.employment_details:
            _dict['employment_details'] = self.employment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract_template
        if self.contract_template:
            _dict['contract_template'] = self.contract_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of quote
        if self.quote:
            _dict['quote'] = self.quote.to_dict()
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if seniority (nullable) is None
        # and model_fields_set contains the field
        if self.seniority is None and "seniority" in self.model_fields_set:
            _dict['seniority'] = None

        # set to None if scope_of_work (nullable) is None
        # and model_fields_set contains the field
        if self.scope_of_work is None and "scope_of_work" in self.model_fields_set:
            _dict['scope_of_work'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        # set to None if termination_date (nullable) is None
        # and model_fields_set contains the field
        if self.termination_date is None and "termination_date" in self.model_fields_set:
            _dict['termination_date'] = None

        # set to None if client (nullable) is None
        # and model_fields_set contains the field
        if self.client is None and "client" in self.model_fields_set:
            _dict['client'] = None

        # set to None if worker (nullable) is None
        # and model_fields_set contains the field
        if self.worker is None and "worker" in self.model_fields_set:
            _dict['worker'] = None

        # set to None if contract_template (nullable) is None
        # and model_fields_set contains the field
        if self.contract_template is None and "contract_template" in self.model_fields_set:
            _dict['contract_template'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Contract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "job_title": obj.get("job_title"),
            "seniority": Seniority.from_dict(obj["seniority"]) if obj.get("seniority") is not None else None,
            "who_reports": obj.get("who_reports"),
            "scope_of_work": obj.get("scope_of_work"),
            "start_date": obj.get("start_date"),
            "termination_date": obj.get("termination_date"),
            "special_clause": obj.get("special_clause"),
            "is_archived": obj.get("is_archived"),
            "client": ClientOfContract.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "worker": WorkerOfContract.from_dict(obj["worker"]) if obj.get("worker") is not None else None,
            "invitations": InvitationsOfBasicContract.from_dict(obj["invitations"]) if obj.get("invitations") is not None else None,
            "signatures": SignaturesOfContract.from_dict(obj["signatures"]) if obj.get("signatures") is not None else None,
            "compensation_details": CompensationDetailsOfContract.from_dict(obj["compensation_details"]) if obj.get("compensation_details") is not None else None,
            "employment_details": EmploymentDetailsOfContract.from_dict(obj["employment_details"]) if obj.get("employment_details") is not None else None,
            "notice_period": obj.get("notice_period") if obj.get("notice_period") is not None else 0,
            "contract_template": ContractTemplate.from_dict(obj["contract_template"]) if obj.get("contract_template") is not None else None,
            "custom_fields": [ContractCustomField.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "quote": EorQuoteBase.from_dict(obj["quote"]) if obj.get("quote") is not None else None,
            "external_id": obj.get("external_id")
        })
        return _obj


