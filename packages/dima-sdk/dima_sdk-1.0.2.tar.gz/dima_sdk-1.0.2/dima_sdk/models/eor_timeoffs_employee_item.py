# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from dima_sdk.models.eor_client_timeoff_requests import EorClientTimeoffRequests
from typing import Optional, Set
from typing_extensions import Self

class EorTimeoffsEmployeeItem(BaseModel):
    """
    EorTimeoffsEmployeeItem
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of this resource.")
    name: StrictStr
    eor_contract_id: Union[StrictFloat, StrictInt]
    contract_id: StrictStr
    vacations: List[EorClientTimeoffRequests] = Field(description="List of employee vacation time offs.")
    sick_leaves: List[EorClientTimeoffRequests] = Field(description="List of employee sick leave time offs.")
    others: List[EorClientTimeoffRequests] = Field(description="List of all other employee time offs.")
    time_zones: StrictStr
    __properties: ClassVar[List[str]] = ["id", "name", "eor_contract_id", "contract_id", "vacations", "sick_leaves", "others", "time_zones"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorTimeoffsEmployeeItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vacations (list)
        _items = []
        if self.vacations:
            for _item_vacations in self.vacations:
                if _item_vacations:
                    _items.append(_item_vacations.to_dict())
            _dict['vacations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sick_leaves (list)
        _items = []
        if self.sick_leaves:
            for _item_sick_leaves in self.sick_leaves:
                if _item_sick_leaves:
                    _items.append(_item_sick_leaves.to_dict())
            _dict['sick_leaves'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in others (list)
        _items = []
        if self.others:
            for _item_others in self.others:
                if _item_others:
                    _items.append(_item_others.to_dict())
            _dict['others'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorTimeoffsEmployeeItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "eor_contract_id": obj.get("eor_contract_id"),
            "contract_id": obj.get("contract_id"),
            "vacations": [EorClientTimeoffRequests.from_dict(_item) for _item in obj["vacations"]] if obj.get("vacations") is not None else None,
            "sick_leaves": [EorClientTimeoffRequests.from_dict(_item) for _item in obj["sick_leaves"]] if obj.get("sick_leaves") is not None else None,
            "others": [EorClientTimeoffRequests.from_dict(_item) for _item in obj["others"]] if obj.get("others") is not None else None,
            "time_zones": obj.get("time_zones")
        })
        return _obj


