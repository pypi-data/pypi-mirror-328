# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_sdk.models.update_people_personal_information_by_id_request_data_phone_numbers_inner import UpdatePeoplePersonalInformationByIdRequestDataPhoneNumbersInner
from typing import Optional, Set
from typing_extensions import Self

class UpdatePeoplePersonalInformationByIdRequestData(BaseModel):
    """
    UpdatePeoplePersonalInformationByIdRequestData
    """ # noqa: E501
    work_email: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The personal email of the worker.")
    date_of_birth: Optional[date] = Field(default=None, description="The date of birth of the worker. Format: YYYY-MM-DD.")
    phone_numbers: Optional[List[UpdatePeoplePersonalInformationByIdRequestDataPhoneNumbersInner]] = None
    personal_email: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The personal email of the worker.")
    preferred_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The preferred name of the worker.")
    legal_last_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The legal last name of the worker.")
    legal_first_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The legal first name of the worker.")
    __properties: ClassVar[List[str]] = ["work_email", "date_of_birth", "phone_numbers", "personal_email", "preferred_name", "legal_last_name", "legal_first_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePeoplePersonalInformationByIdRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item_phone_numbers in self.phone_numbers:
                if _item_phone_numbers:
                    _items.append(_item_phone_numbers.to_dict())
            _dict['phone_numbers'] = _items
        # set to None if preferred_name (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_name is None and "preferred_name" in self.model_fields_set:
            _dict['preferred_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePeoplePersonalInformationByIdRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "work_email": obj.get("work_email"),
            "date_of_birth": obj.get("date_of_birth"),
            "phone_numbers": [UpdatePeoplePersonalInformationByIdRequestDataPhoneNumbersInner.from_dict(_item) for _item in obj["phone_numbers"]] if obj.get("phone_numbers") is not None else None,
            "personal_email": obj.get("personal_email"),
            "preferred_name": obj.get("preferred_name"),
            "legal_last_name": obj.get("legal_last_name"),
            "legal_first_name": obj.get("legal_first_name")
        })
        return _obj


