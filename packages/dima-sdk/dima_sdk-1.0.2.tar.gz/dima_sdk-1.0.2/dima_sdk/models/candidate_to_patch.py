# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_sdk.models.candidate_status_enum import CandidateStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class CandidateToPatch(BaseModel):
    """
    Details of candidate to update
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="Candidate's first name.")
    last_name: Optional[StrictStr] = Field(default=None, description="Candidate's last name.")
    status: CandidateStatusEnum
    start_date: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")
    job_title: Optional[StrictStr] = Field(default=None, description="Job Title.")
    link: Optional[StrictStr] = Field(default=None, description="Link to candidate's profile in ATS.")
    email: Optional[Annotated[str, Field(min_length=5, strict=True)]] = Field(default=None, description="Worker's email address.")
    nationality: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = None
    country: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = Field(default=None, description="Country code.")
    state: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=50)]] = Field(default=None, description="Job location state.")
    __properties: ClassVar[List[str]] = ["first_name", "last_name", "status", "start_date", "job_title", "link", "email", "nationality", "country", "state"]

    @field_validator('country')
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CandidateToPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CandidateToPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "status": obj.get("status"),
            "start_date": obj.get("start_date"),
            "job_title": obj.get("job_title"),
            "link": obj.get("link"),
            "email": obj.get("email"),
            "nationality": obj.get("nationality"),
            "country": obj.get("country"),
            "state": obj.get("state")
        })
        return _obj


