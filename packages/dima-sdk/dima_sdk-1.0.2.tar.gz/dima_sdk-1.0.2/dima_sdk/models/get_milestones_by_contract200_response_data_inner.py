# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.get_milestones_by_contract200_response_data_inner_id import GetMilestonesByContract200ResponseDataInnerId
from dima_sdk.models.get_milestones_by_contract200_response_data_inner_reported_by import GetMilestonesByContract200ResponseDataInnerReportedBy
from dima_sdk.models.get_milestones_by_contract200_response_data_inner_reviewed_by import GetMilestonesByContract200ResponseDataInnerReviewedBy
from typing import Optional, Set
from typing_extensions import Self

class GetMilestonesByContract200ResponseDataInner(BaseModel):
    """
    GetMilestonesByContract200ResponseDataInner
    """ # noqa: E501
    id: GetMilestonesByContract200ResponseDataInnerId
    title: StrictStr = Field(description="The title of the milestone.")
    amount: StrictStr = Field(description="The amount to be paid for completing this milestone.")
    status: StrictStr = Field(description="The current status of the milestone, such as 'Pending Approval', 'Approved', or 'Completed'.")
    created_at: Optional[datetime] = Field(description="The creation date of the milestone in ISO-8601 format.")
    description: StrictStr = Field(description="A detailed description of the milestone.")
    reported_by: GetMilestonesByContract200ResponseDataInnerReportedBy
    reviewed_by: Optional[GetMilestonesByContract200ResponseDataInnerReviewedBy]
    approval_requested: StrictBool = Field(description="Indicates whether approval has been requested for the milestone.")
    __properties: ClassVar[List[str]] = ["id", "title", "amount", "status", "created_at", "description", "reported_by", "reviewed_by", "approval_requested"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMilestonesByContract200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reported_by
        if self.reported_by:
            _dict['reported_by'] = self.reported_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviewed_by
        if self.reviewed_by:
            _dict['reviewed_by'] = self.reviewed_by.to_dict()
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if reviewed_by (nullable) is None
        # and model_fields_set contains the field
        if self.reviewed_by is None and "reviewed_by" in self.model_fields_set:
            _dict['reviewed_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMilestonesByContract200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": GetMilestonesByContract200ResponseDataInnerId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "title": obj.get("title"),
            "amount": obj.get("amount"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "reported_by": GetMilestonesByContract200ResponseDataInnerReportedBy.from_dict(obj["reported_by"]) if obj.get("reported_by") is not None else None,
            "reviewed_by": GetMilestonesByContract200ResponseDataInnerReviewedBy.from_dict(obj["reviewed_by"]) if obj.get("reviewed_by") is not None else None,
            "approval_requested": obj.get("approval_requested")
        })
        return _obj


