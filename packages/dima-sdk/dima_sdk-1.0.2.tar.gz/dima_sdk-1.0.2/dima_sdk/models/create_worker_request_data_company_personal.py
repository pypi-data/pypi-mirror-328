# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateWorkerRequestDataCompanyPersonal(BaseModel):
    """
    CreateWorkerRequestDataCompanyPersonal
    """ # noqa: E501
    zip: Union[StrictFloat, StrictInt] = Field(description="Zip/Postal code")
    city: StrictStr = Field(description="City")
    phone: Union[StrictFloat, StrictInt] = Field(description="Phone number")
    street: StrictStr = Field(description="Street address")
    citizen: StrictStr = Field(description="Citizenship country code")
    country: Optional[StrictStr] = Field(default=None, description="Country code")
    id_type: Optional[StrictStr] = Field(default=None, description="Type of identification")
    province: Optional[StrictStr] = Field(default=None, description="Province/State")
    timezone: Optional[StrictStr] = Field(default=None, description="Personal timezone")
    personal_id: Union[StrictFloat, StrictInt] = Field(description="Personal identification number")
    legal_status: Optional[StrictStr] = Field(default=None, description="Legal status (required only when type is INDIVIDUAL)")
    tax_residence: Optional[StrictStr] = Field(default=None, description="Tax residence country code")
    entity_tax_residence: Optional[StrictStr] = Field(default=None, description="Entity tax residence (only applicable for company type)")
    __properties: ClassVar[List[str]] = ["zip", "city", "phone", "street", "citizen", "country", "id_type", "province", "timezone", "personal_id", "legal_status", "tax_residence", "entity_tax_residence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateWorkerRequestDataCompanyPersonal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if province (nullable) is None
        # and model_fields_set contains the field
        if self.province is None and "province" in self.model_fields_set:
            _dict['province'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateWorkerRequestDataCompanyPersonal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "zip": obj.get("zip"),
            "city": obj.get("city"),
            "phone": obj.get("phone"),
            "street": obj.get("street"),
            "citizen": obj.get("citizen"),
            "country": obj.get("country"),
            "id_type": obj.get("id_type"),
            "province": obj.get("province"),
            "timezone": obj.get("timezone"),
            "personal_id": obj.get("personal_id"),
            "legal_status": obj.get("legal_status"),
            "tax_residence": obj.get("tax_residence"),
            "entity_tax_residence": obj.get("entity_tax_residence")
        })
        return _obj


