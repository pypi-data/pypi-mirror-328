# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.eor_holidays_rollover_type import EorHolidaysRolloverType
from typing import Optional, Set
from typing_extensions import Self

class EorEntitlementListItem(BaseModel):
    """
    Entitlement Item for a given year.
    """ # noqa: E501
    year: Optional[Union[StrictFloat, StrictInt]] = None
    vacation_allowed: Optional[StrictStr] = Field(default=None, description="Minimum vacation allowed.")
    sick_leave_allowed: Optional[StrictStr] = Field(default=None, description="Maximum sick leave allowed.")
    vacation_requested: Optional[StrictStr] = Field(default=None, description="Vacation days requested by the employee.")
    vacation_approved: Optional[StrictStr] = Field(default=None, description="Vacation days approved.")
    vacation_used: Optional[StrictStr] = Field(default=None, description="Vacation days used by the employee.")
    vacation_total: Optional[StrictStr] = Field(default=None, description="Total number of vacation days requested, approved and used.")
    sick_leave_requested: Optional[StrictStr] = Field(default=None, description="Sick days requested by the employee.")
    sick_leave_approved: Optional[StrictStr] = Field(default=None, description="Sick days approved.")
    sick_leave_used: Optional[StrictStr] = Field(default=None, description="Sick days used by the employee.")
    sick_leave_total: Optional[StrictStr] = Field(default=None, description="Total number of sick days requested, approved and used.")
    other_leave_requested: Optional[StrictStr] = Field(default=None, description="Other type of time off requested by the employee.")
    other_leave_approved: Optional[StrictStr] = Field(default=None, description="Other type of time off days approved.")
    other_leave_used: Optional[StrictStr] = Field(default=None, description="Other type of time off days used by the employee.")
    other_leave_total: Optional[StrictStr] = Field(default=None, description="Total number of other type of time off days requested, approved and used.")
    rollover_type: Optional[EorHolidaysRolloverType] = None
    max_rollover_yearly: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["year", "vacation_allowed", "sick_leave_allowed", "vacation_requested", "vacation_approved", "vacation_used", "vacation_total", "sick_leave_requested", "sick_leave_approved", "sick_leave_used", "sick_leave_total", "other_leave_requested", "other_leave_approved", "other_leave_used", "other_leave_total", "rollover_type", "max_rollover_yearly"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorEntitlementListItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorEntitlementListItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "year": obj.get("year"),
            "vacation_allowed": obj.get("vacation_allowed"),
            "sick_leave_allowed": obj.get("sick_leave_allowed"),
            "vacation_requested": obj.get("vacation_requested"),
            "vacation_approved": obj.get("vacation_approved"),
            "vacation_used": obj.get("vacation_used"),
            "vacation_total": obj.get("vacation_total"),
            "sick_leave_requested": obj.get("sick_leave_requested"),
            "sick_leave_approved": obj.get("sick_leave_approved"),
            "sick_leave_used": obj.get("sick_leave_used"),
            "sick_leave_total": obj.get("sick_leave_total"),
            "other_leave_requested": obj.get("other_leave_requested"),
            "other_leave_approved": obj.get("other_leave_approved"),
            "other_leave_used": obj.get("other_leave_used"),
            "other_leave_total": obj.get("other_leave_total"),
            "rollover_type": obj.get("rollover_type"),
            "max_rollover_yearly": obj.get("max_rollover_yearly")
        })
        return _obj


