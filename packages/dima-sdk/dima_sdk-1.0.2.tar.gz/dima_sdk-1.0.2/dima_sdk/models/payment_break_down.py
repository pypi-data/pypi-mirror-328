# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PaymentBreakDown(BaseModel):
    """
    PaymentBreakDown
    """ # noqa: E501
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    general_ledger_account: Optional[StrictStr] = None
    team: Optional[StrictStr] = None
    contractor_unique_identifier: Optional[StrictStr] = Field(default=None, description="Worker's unique identifier.")
    contractor_employee_name: Optional[StrictStr] = Field(default=None, description="Worker's name.")
    contractor_email: Optional[StrictStr] = Field(default=None, description="Worker's email.")
    invoice_number: Optional[StrictStr] = Field(default=None, description="Invoice number.")
    currency: Optional[StrictStr] = Field(default=None, description="Currency code.")
    payment_currency: Optional[StrictStr] = None
    receipt_number: Optional[StrictStr] = None
    work: Optional[StrictStr] = None
    bonus: Optional[StrictStr] = None
    expenses: Optional[StrictStr] = None
    commissions: Optional[StrictStr] = None
    deductions: Optional[StrictStr] = None
    overtime: Optional[StrictStr] = None
    pro_rata: Optional[StrictStr] = None
    others: Optional[StrictStr] = None
    processing_fee: Optional[StrictStr] = None
    adjustment: Optional[StrictStr] = None
    total: Optional[StrictStr] = Field(default=None, description="Total due.")
    total_payment_currency: Optional[StrictStr] = Field(default=None, description="Total in payment currency.")
    payment_date: Optional[StrictStr] = Field(default=None, description="Date of payment.")
    frequency: Optional[StrictStr] = None
    contract_country: Optional[StrictStr] = Field(default=None, description="Country of the contract.")
    contract_start_date: Optional[StrictStr] = Field(default=None, description="Contract start date.")
    approvers: Optional[StrictStr] = None
    approve_date: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["date", "general_ledger_account", "team", "contractor_unique_identifier", "contractor_employee_name", "contractor_email", "invoice_number", "currency", "payment_currency", "receipt_number", "work", "bonus", "expenses", "commissions", "deductions", "overtime", "pro_rata", "others", "processing_fee", "adjustment", "total", "total_payment_currency", "payment_date", "frequency", "contract_country", "contract_start_date", "approvers", "approve_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentBreakDown from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentBreakDown from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "general_ledger_account": obj.get("general_ledger_account"),
            "team": obj.get("team"),
            "contractor_unique_identifier": obj.get("contractor_unique_identifier"),
            "contractor_employee_name": obj.get("contractor_employee_name"),
            "contractor_email": obj.get("contractor_email"),
            "invoice_number": obj.get("invoice_number"),
            "currency": obj.get("currency"),
            "payment_currency": obj.get("payment_currency"),
            "receipt_number": obj.get("receipt_number"),
            "work": obj.get("work"),
            "bonus": obj.get("bonus"),
            "expenses": obj.get("expenses"),
            "commissions": obj.get("commissions"),
            "deductions": obj.get("deductions"),
            "overtime": obj.get("overtime"),
            "pro_rata": obj.get("pro_rata"),
            "others": obj.get("others"),
            "processing_fee": obj.get("processing_fee"),
            "adjustment": obj.get("adjustment"),
            "total": obj.get("total"),
            "total_payment_currency": obj.get("total_payment_currency"),
            "payment_date": obj.get("payment_date"),
            "frequency": obj.get("frequency"),
            "contract_country": obj.get("contract_country"),
            "contract_start_date": obj.get("contract_start_date"),
            "approvers": obj.get("approvers"),
            "approve_date": obj.get("approve_date")
        })
        return _obj


