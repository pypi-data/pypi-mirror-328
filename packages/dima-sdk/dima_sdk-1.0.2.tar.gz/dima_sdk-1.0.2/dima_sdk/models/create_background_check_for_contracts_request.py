# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateBackgroundCheckForContractsRequest(BaseModel):
    """
    The background check information for a contract. Either `individual_check_ids` or `package_id` must be provided, but not both.
    """ # noqa: E501
    package_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the package used for the background check.")
    contract_ids: List[StrictStr] = Field(description="List of contract ids.")
    individual_check_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of individual check IDs.")
    __properties: ClassVar[List[str]] = ["package_id", "contract_ids", "individual_check_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateBackgroundCheckForContractsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if individual_check_ids (nullable) is None
        # and model_fields_set contains the field
        if self.individual_check_ids is None and "individual_check_ids" in self.model_fields_set:
            _dict['individual_check_ids'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateBackgroundCheckForContractsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "package_id": obj.get("package_id"),
            "contract_ids": obj.get("contract_ids"),
            "individual_check_ids": obj.get("individual_check_ids")
        })
        return _obj


