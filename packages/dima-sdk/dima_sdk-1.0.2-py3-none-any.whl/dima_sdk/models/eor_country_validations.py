# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.eor_country_validations_definite_contract import EorCountryValidationsDefiniteContract
from dima_sdk.models.eor_country_validations_health_insurance import EorCountryValidationsHealthInsurance
from dima_sdk.models.eor_country_validations_holiday import EorCountryValidationsHoliday
from dima_sdk.models.eor_country_validations_part_time_holiday import EorCountryValidationsPartTimeHoliday
from dima_sdk.models.eor_country_validations_part_time_probation import EorCountryValidationsPartTimeProbation
from dima_sdk.models.eor_country_validations_pension import EorCountryValidationsPension
from dima_sdk.models.eor_country_validations_probation import EorCountryValidationsProbation
from dima_sdk.models.eor_country_validations_salary import EorCountryValidationsSalary
from dima_sdk.models.eor_country_validations_sick_days import EorCountryValidationsSickDays
from dima_sdk.models.eor_country_validations_work_schedule import EorCountryValidationsWorkSchedule
from dima_sdk.models.eor_field import EorField
from typing import Optional, Set
from typing_extensions import Self

class EorCountryValidations(BaseModel):
    """
    EorCountryValidations
    """ # noqa: E501
    holiday: Optional[EorCountryValidationsHoliday] = None
    part_time_holiday: Optional[EorCountryValidationsPartTimeHoliday] = None
    sick_days: Optional[EorCountryValidationsSickDays] = None
    salary: Optional[EorCountryValidationsSalary] = None
    probation: Optional[EorCountryValidationsProbation] = None
    part_time_probation: Optional[EorCountryValidationsPartTimeProbation] = None
    work_schedule: Optional[EorCountryValidationsWorkSchedule] = None
    insurance_fee: Optional[StrictStr] = Field(default=None, description="Insurance fee.")
    currency: Optional[StrictStr] = Field(default=None, description="Country currency.")
    hiring_guide_country_name: Optional[StrictStr] = Field(default=None, description="Country name.")
    start_date_buffer: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Calculate employee's minimum start date using the start date buffer. Today's date + (number of business days x start_date_buffer) = Minimum start date.")
    definite_contract: Optional[EorCountryValidationsDefiniteContract] = None
    adjustments_information_box: Optional[StrictStr] = Field(default=None, description="Country specific notes and information.")
    health_insurance: Optional[EorCountryValidationsHealthInsurance] = None
    pension: Optional[EorCountryValidationsPension] = None
    mandatory_fields: Optional[List[EorField]] = None
    __properties: ClassVar[List[str]] = ["holiday", "part_time_holiday", "sick_days", "salary", "probation", "part_time_probation", "work_schedule", "insurance_fee", "currency", "hiring_guide_country_name", "start_date_buffer", "definite_contract", "adjustments_information_box", "health_insurance", "pension", "mandatory_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorCountryValidations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of holiday
        if self.holiday:
            _dict['holiday'] = self.holiday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of part_time_holiday
        if self.part_time_holiday:
            _dict['part_time_holiday'] = self.part_time_holiday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sick_days
        if self.sick_days:
            _dict['sick_days'] = self.sick_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of salary
        if self.salary:
            _dict['salary'] = self.salary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of probation
        if self.probation:
            _dict['probation'] = self.probation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of part_time_probation
        if self.part_time_probation:
            _dict['part_time_probation'] = self.part_time_probation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_schedule
        if self.work_schedule:
            _dict['work_schedule'] = self.work_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of definite_contract
        if self.definite_contract:
            _dict['definite_contract'] = self.definite_contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_insurance
        if self.health_insurance:
            _dict['health_insurance'] = self.health_insurance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pension
        if self.pension:
            _dict['pension'] = self.pension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mandatory_fields (list)
        _items = []
        if self.mandatory_fields:
            for _item_mandatory_fields in self.mandatory_fields:
                if _item_mandatory_fields:
                    _items.append(_item_mandatory_fields.to_dict())
            _dict['mandatory_fields'] = _items
        # set to None if health_insurance (nullable) is None
        # and model_fields_set contains the field
        if self.health_insurance is None and "health_insurance" in self.model_fields_set:
            _dict['health_insurance'] = None

        # set to None if pension (nullable) is None
        # and model_fields_set contains the field
        if self.pension is None and "pension" in self.model_fields_set:
            _dict['pension'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorCountryValidations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "holiday": EorCountryValidationsHoliday.from_dict(obj["holiday"]) if obj.get("holiday") is not None else None,
            "part_time_holiday": EorCountryValidationsPartTimeHoliday.from_dict(obj["part_time_holiday"]) if obj.get("part_time_holiday") is not None else None,
            "sick_days": EorCountryValidationsSickDays.from_dict(obj["sick_days"]) if obj.get("sick_days") is not None else None,
            "salary": EorCountryValidationsSalary.from_dict(obj["salary"]) if obj.get("salary") is not None else None,
            "probation": EorCountryValidationsProbation.from_dict(obj["probation"]) if obj.get("probation") is not None else None,
            "part_time_probation": EorCountryValidationsPartTimeProbation.from_dict(obj["part_time_probation"]) if obj.get("part_time_probation") is not None else None,
            "work_schedule": EorCountryValidationsWorkSchedule.from_dict(obj["work_schedule"]) if obj.get("work_schedule") is not None else None,
            "insurance_fee": obj.get("insurance_fee"),
            "currency": obj.get("currency"),
            "hiring_guide_country_name": obj.get("hiring_guide_country_name"),
            "start_date_buffer": obj.get("start_date_buffer"),
            "definite_contract": EorCountryValidationsDefiniteContract.from_dict(obj["definite_contract"]) if obj.get("definite_contract") is not None else None,
            "adjustments_information_box": obj.get("adjustments_information_box"),
            "health_insurance": EorCountryValidationsHealthInsurance.from_dict(obj["health_insurance"]) if obj.get("health_insurance") is not None else None,
            "pension": EorCountryValidationsPension.from_dict(obj["pension"]) if obj.get("pension") is not None else None,
            "mandatory_fields": [EorField.from_dict(_item) for _item in obj["mandatory_fields"]] if obj.get("mandatory_fields") is not None else None
        })
        return _obj


