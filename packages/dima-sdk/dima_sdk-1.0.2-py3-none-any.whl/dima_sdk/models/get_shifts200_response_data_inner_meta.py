# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.get_shifts200_response_data_inner_meta_breaks_inner import GetShifts200ResponseDataInnerMetaBreaksInner
from dima_sdk.models.get_shifts200_response_data_inner_meta_end import GetShifts200ResponseDataInnerMetaEnd
from dima_sdk.models.get_shifts200_response_data_inner_meta_start import GetShifts200ResponseDataInnerMetaStart
from typing import Optional, Set
from typing_extensions import Self

class GetShifts200ResponseDataInnerMeta(BaseModel):
    """
    GetShifts200ResponseDataInnerMeta
    """ # noqa: E501
    end: Optional[GetShifts200ResponseDataInnerMetaEnd] = None
    start: Optional[GetShifts200ResponseDataInnerMetaStart] = None
    breaks: Optional[List[GetShifts200ResponseDataInnerMetaBreaksInner]] = Field(default=None, description="List of break periods within the shift.")
    approval_date: Optional[StrictStr] = Field(default=None, description="Approval date of the shift.")
    __properties: ClassVar[List[str]] = ["end", "start", "breaks", "approval_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetShifts200ResponseDataInnerMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end
        if self.end:
            _dict['end'] = self.end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start
        if self.start:
            _dict['start'] = self.start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in breaks (list)
        _items = []
        if self.breaks:
            for _item_breaks in self.breaks:
                if _item_breaks:
                    _items.append(_item_breaks.to_dict())
            _dict['breaks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetShifts200ResponseDataInnerMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "end": GetShifts200ResponseDataInnerMetaEnd.from_dict(obj["end"]) if obj.get("end") is not None else None,
            "start": GetShifts200ResponseDataInnerMetaStart.from_dict(obj["start"]) if obj.get("start") is not None else None,
            "breaks": [GetShifts200ResponseDataInnerMetaBreaksInner.from_dict(_item) for _item in obj["breaks"]] if obj.get("breaks") is not None else None,
            "approval_date": obj.get("approval_date")
        })
        return _obj


