# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_sdk.models.basic_timesheet_contract import BasicTimesheetContract
from dima_sdk.models.basic_timesheet_payment_cycle import BasicTimesheetPaymentCycle
from dima_sdk.models.basic_timesheet_reported_by import BasicTimesheetReportedBy
from dima_sdk.models.basic_timesheet_reviewed_by import BasicTimesheetReviewedBy
from dima_sdk.models.basic_timesheet_worksheet import BasicTimesheetWorksheet
from dima_sdk.models.file_attachment_info import FileAttachmentInfo
from dima_sdk.models.timesheet_status_enum import TimesheetStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class BasicTimesheet(BaseModel):
    """
    BasicTimesheet
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of this resource.")
    type: StrictStr = Field(description="Deprecated - it is always \"work\"")
    status: Optional[TimesheetStatusEnum]
    description: StrictStr
    date_submitted: datetime = Field(description="Long date-time format following ISO-8601")
    currency_code: Annotated[str, Field(min_length=3, strict=True, max_length=3)]
    total_amount: StrictStr = Field(description="is equal to quantity times rate of active work statement + bonus in this record")
    quantity: Optional[Union[StrictFloat, StrictInt]]
    created_at: StrictStr
    scale: Optional[StrictStr] = None
    custom_scale: Optional[StrictStr] = None
    attachment: Optional[FileAttachmentInfo]
    worksheet: Optional[BasicTimesheetWorksheet]
    reviewed_by: Optional[BasicTimesheetReviewedBy]
    contract: BasicTimesheetContract
    payment_cycle: Optional[BasicTimesheetPaymentCycle] = None
    reported_by: BasicTimesheetReportedBy
    __properties: ClassVar[List[str]] = ["id", "type", "status", "description", "date_submitted", "currency_code", "total_amount", "quantity", "created_at", "scale", "custom_scale", "attachment", "worksheet", "reviewed_by", "contract", "payment_cycle", "reported_by"]

    @field_validator('currency_code')
    def currency_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BasicTimesheet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attachment
        if self.attachment:
            _dict['attachment'] = self.attachment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worksheet
        if self.worksheet:
            _dict['worksheet'] = self.worksheet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviewed_by
        if self.reviewed_by:
            _dict['reviewed_by'] = self.reviewed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_cycle
        if self.payment_cycle:
            _dict['payment_cycle'] = self.payment_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reported_by
        if self.reported_by:
            _dict['reported_by'] = self.reported_by.to_dict()
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if quantity (nullable) is None
        # and model_fields_set contains the field
        if self.quantity is None and "quantity" in self.model_fields_set:
            _dict['quantity'] = None

        # set to None if scale (nullable) is None
        # and model_fields_set contains the field
        if self.scale is None and "scale" in self.model_fields_set:
            _dict['scale'] = None

        # set to None if custom_scale (nullable) is None
        # and model_fields_set contains the field
        if self.custom_scale is None and "custom_scale" in self.model_fields_set:
            _dict['custom_scale'] = None

        # set to None if attachment (nullable) is None
        # and model_fields_set contains the field
        if self.attachment is None and "attachment" in self.model_fields_set:
            _dict['attachment'] = None

        # set to None if worksheet (nullable) is None
        # and model_fields_set contains the field
        if self.worksheet is None and "worksheet" in self.model_fields_set:
            _dict['worksheet'] = None

        # set to None if reviewed_by (nullable) is None
        # and model_fields_set contains the field
        if self.reviewed_by is None and "reviewed_by" in self.model_fields_set:
            _dict['reviewed_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BasicTimesheet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "description": obj.get("description"),
            "date_submitted": obj.get("date_submitted"),
            "currency_code": obj.get("currency_code"),
            "total_amount": obj.get("total_amount"),
            "quantity": obj.get("quantity"),
            "created_at": obj.get("created_at"),
            "scale": obj.get("scale"),
            "custom_scale": obj.get("custom_scale"),
            "attachment": FileAttachmentInfo.from_dict(obj["attachment"]) if obj.get("attachment") is not None else None,
            "worksheet": BasicTimesheetWorksheet.from_dict(obj["worksheet"]) if obj.get("worksheet") is not None else None,
            "reviewed_by": BasicTimesheetReviewedBy.from_dict(obj["reviewed_by"]) if obj.get("reviewed_by") is not None else None,
            "contract": BasicTimesheetContract.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "payment_cycle": BasicTimesheetPaymentCycle.from_dict(obj["payment_cycle"]) if obj.get("payment_cycle") is not None else None,
            "reported_by": BasicTimesheetReportedBy.from_dict(obj["reported_by"]) if obj.get("reported_by") is not None else None
        })
        return _obj


