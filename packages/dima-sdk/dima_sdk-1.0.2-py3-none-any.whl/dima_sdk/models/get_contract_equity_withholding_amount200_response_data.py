# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.get_contract_equity_withholding_amount200_response_data_breakdown_inner import GetContractEquityWithholdingAmount200ResponseDataBreakdownInner
from typing import Optional, Set
from typing_extensions import Self

class GetContractEquityWithholdingAmount200ResponseData(BaseModel):
    """
    GetContractEquityWithholdingAmount200ResponseData
    """ # noqa: E501
    oid: Optional[StrictStr] = Field(default=None, description="Deel contract id.")
    fx_rate: Optional[StrictStr] = Field(default=None, description="Exchange rate used to convert event currency to country of taxation currency.")
    breakdown: Optional[List[GetContractEquityWithholdingAmount200ResponseDataBreakdownInner]] = None
    event_value: Optional[StrictStr] = Field(default=None, description="Event value that user provided.")
    event_currency: Optional[StrictStr] = Field(default=None, description="Event currency that user provided.")
    withholding_currency: Optional[StrictStr] = Field(default=None, description="Country of taxation currency.")
    aggregate_withholding_rate: Optional[StrictStr] = Field(default=None, description="Total withholding amount expressed as a percentage of event value.")
    overall_withholding_amount: Optional[StrictStr] = Field(default=None, description="Total withholding amount denominated in country of taxation currency (withholding_currency).")
    __properties: ClassVar[List[str]] = ["oid", "fx_rate", "breakdown", "event_value", "event_currency", "withholding_currency", "aggregate_withholding_rate", "overall_withholding_amount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetContractEquityWithholdingAmount200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in breakdown (list)
        _items = []
        if self.breakdown:
            for _item_breakdown in self.breakdown:
                if _item_breakdown:
                    _items.append(_item_breakdown.to_dict())
            _dict['breakdown'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetContractEquityWithholdingAmount200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "oid": obj.get("oid"),
            "fx_rate": obj.get("fx_rate"),
            "breakdown": [GetContractEquityWithholdingAmount200ResponseDataBreakdownInner.from_dict(_item) for _item in obj["breakdown"]] if obj.get("breakdown") is not None else None,
            "event_value": obj.get("event_value"),
            "event_currency": obj.get("event_currency"),
            "withholding_currency": obj.get("withholding_currency"),
            "aggregate_withholding_rate": obj.get("aggregate_withholding_rate"),
            "overall_withholding_amount": obj.get("overall_withholding_amount")
        })
        return _obj


