# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.get_all_profile_worker_relations_external_id_response_container_data_inner_child_relationships_inner import GetAllProfileWorkerRelationsExternalIdResponseContainerDataInnerChildRelationshipsInner
from dima_sdk.models.get_all_profile_worker_relations_external_id_response_container_data_inner_parent_relationship import GetAllProfileWorkerRelationsExternalIdResponseContainerDataInnerParentRelationship
from typing import Optional, Set
from typing_extensions import Self

class GetAllProfileWorkerRelationsExternalIdResponseContainerDataInner(BaseModel):
    """
    GetAllProfileWorkerRelationsExternalIdResponseContainerDataInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The ID of the relation type")
    is_parent: Optional[StrictBool] = Field(default=None, description="Whether this relation is the parent or not")
    is_default: Optional[StrictBool] = Field(default=None, description="Whether this relation is default or not")
    name: Optional[StrictStr] = Field(default=None, description="The name of the relation type")
    external_id: Optional[StrictStr] = Field(default=None, description="The external ID of the relation type")
    parent_relationship: Optional[GetAllProfileWorkerRelationsExternalIdResponseContainerDataInnerParentRelationship] = None
    child_relationships: Optional[List[GetAllProfileWorkerRelationsExternalIdResponseContainerDataInnerChildRelationshipsInner]] = Field(default=None, description="An array containing the information about the child profiles in the relation.")
    __properties: ClassVar[List[str]] = ["id", "is_parent", "is_default", "name", "external_id", "parent_relationship", "child_relationships"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAllProfileWorkerRelationsExternalIdResponseContainerDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent_relationship
        if self.parent_relationship:
            _dict['parent_relationship'] = self.parent_relationship.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in child_relationships (list)
        _items = []
        if self.child_relationships:
            for _item_child_relationships in self.child_relationships:
                if _item_child_relationships:
                    _items.append(_item_child_relationships.to_dict())
            _dict['child_relationships'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAllProfileWorkerRelationsExternalIdResponseContainerDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "is_parent": obj.get("is_parent"),
            "is_default": obj.get("is_default"),
            "name": obj.get("name"),
            "external_id": obj.get("external_id"),
            "parent_relationship": GetAllProfileWorkerRelationsExternalIdResponseContainerDataInnerParentRelationship.from_dict(obj["parent_relationship"]) if obj.get("parent_relationship") is not None else None,
            "child_relationships": [GetAllProfileWorkerRelationsExternalIdResponseContainerDataInnerChildRelationshipsInner.from_dict(_item) for _item in obj["child_relationships"]] if obj.get("child_relationships") is not None else None
        })
        return _obj


