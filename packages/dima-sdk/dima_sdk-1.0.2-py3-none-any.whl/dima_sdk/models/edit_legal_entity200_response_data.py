# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.edit_legal_entity200_response_data_company_identifiers import EditLegalEntity200ResponseDataCompanyIdentifiers
from dima_sdk.models.edit_legal_entity_request_address import EditLegalEntityRequestAddress
from typing import Optional, Set
from typing_extensions import Self

class EditLegalEntity200ResponseData(BaseModel):
    """
    EditLegalEntity200ResponseData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the legal entity.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the legal entity.")
    phone: Optional[StrictStr] = Field(default=None, description="The phone number of the legal entity.")
    address: Optional[EditLegalEntityRequestAddress] = None
    sic_number: Optional[StrictStr] = Field(default=None, description="The SIC number of the legal entity.")
    entity_type: Optional[StrictStr] = Field(default=None, description="The type of the legal entity.")
    industry_name: Optional[StrictStr] = Field(default=None, description="The industry name of the legal entity.")
    company_identifiers: Optional[EditLegalEntity200ResponseDataCompanyIdentifiers] = None
    __properties: ClassVar[List[str]] = ["id", "name", "phone", "address", "sic_number", "entity_type", "industry_name", "company_identifiers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditLegalEntity200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_identifiers
        if self.company_identifiers:
            _dict['company_identifiers'] = self.company_identifiers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditLegalEntity200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "address": EditLegalEntityRequestAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "sic_number": obj.get("sic_number"),
            "entity_type": obj.get("entity_type"),
            "industry_name": obj.get("industry_name"),
            "company_identifiers": EditLegalEntity200ResponseDataCompanyIdentifiers.from_dict(obj["company_identifiers"]) if obj.get("company_identifiers") is not None else None
        })
        return _obj


