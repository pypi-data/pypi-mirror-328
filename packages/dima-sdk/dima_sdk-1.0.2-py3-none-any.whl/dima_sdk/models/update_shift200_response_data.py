# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.update_shift200_response_data_meta import UpdateShift200ResponseDataMeta
from dima_sdk.models.update_shift200_response_data_summary import UpdateShift200ResponseDataSummary
from typing import Optional, Set
from typing_extensions import Self

class UpdateShift200ResponseData(BaseModel):
    """
    UpdateShift200ResponseData
    """ # noqa: E501
    meta: Optional[UpdateShift200ResponseDataMeta] = None
    summary: Optional[UpdateShift200ResponseDataSummary] = None
    created_at: Optional[StrictStr] = Field(default=None, description="Timestamp when the shift was created.")
    updated_at: Optional[StrictStr] = Field(default=None, description="Timestamp when the shift was last updated.")
    contract_id: Optional[StrictStr] = Field(default=None, description="The contract ID associated with the shift.")
    description: Optional[StrictStr] = Field(default=None, description="The description of the shift.")
    external_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the shift.")
    date_of_work: Optional[StrictStr] = Field(default=None, description="The date of the shift.")
    __properties: ClassVar[List[str]] = ["meta", "summary", "created_at", "updated_at", "contract_id", "description", "external_id", "date_of_work"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateShift200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateShift200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meta": UpdateShift200ResponseDataMeta.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "summary": UpdateShift200ResponseDataSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "contract_id": obj.get("contract_id"),
            "description": obj.get("description"),
            "external_id": obj.get("external_id"),
            "date_of_work": obj.get("date_of_work")
        })
        return _obj


