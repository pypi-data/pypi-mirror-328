# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.employee_timeoffs_item_attachments_inner import EmployeeTimeoffsItemAttachmentsInner
from dima_sdk.models.employee_timeoffs_item_requester import EmployeeTimeoffsItemRequester
from dima_sdk.models.employee_timeoffs_item_reviewer import EmployeeTimeoffsItemReviewer
from typing import Optional, Set
from typing_extensions import Self

class EmployeeTimeoffsItem(BaseModel):
    """
    EmployeeTimeoffsItem
    """ # noqa: E501
    time_off_id: StrictStr = Field(description="Unique identifier of this resource.")
    time_off_type_id: StrictStr = Field(description="Unique identifier of this resource.")
    policy_id: StrictStr = Field(description="Unique identifier of this resource.")
    policy_type_id: StrictStr = Field(description="Unique identifier of this resource.")
    policy_name: StrictStr = Field(description="Time off policy name.")
    policy_type_name: StrictStr = Field(description="Time off policy type name.")
    reason: StrictStr = Field(description="Reason for time off.")
    type: StrictStr = Field(description="Time off type.")
    requested_at: StrictStr = Field(description="Time off requested date.")
    reviewed_at: StrictStr = Field(description="Time off reviewed date.")
    with_multiple_dates: StrictBool = Field(description="Time off with multiple dates.")
    created_at: StrictStr = Field(description="Time off created date.")
    updated_at: StrictStr = Field(description="Time off updated date.")
    denial_reason: Optional[StrictStr] = Field(description="Time off denial reason.")
    requester: EmployeeTimeoffsItemRequester
    reviewer: EmployeeTimeoffsItemReviewer
    days_used_start_year: StrictStr = Field(description="Days used in the start year.")
    days_used_end_year: StrictStr = Field(description="Days used in the end year.")
    days_used: StrictStr = Field(description="Days used.")
    start_date: StrictStr = Field(description="Time off start date.")
    end_date: StrictStr = Field(description="Time off end date.")
    is_start_date_half_day: StrictBool = Field(description="Is start date half day.")
    is_end_date_half_day: StrictBool = Field(description="Is end date half day.")
    attachments: List[EmployeeTimeoffsItemAttachmentsInner]
    change_request: Optional[StrictStr] = Field(description="Time off change request.")
    __properties: ClassVar[List[str]] = ["time_off_id", "time_off_type_id", "policy_id", "policy_type_id", "policy_name", "policy_type_name", "reason", "type", "requested_at", "reviewed_at", "with_multiple_dates", "created_at", "updated_at", "denial_reason", "requester", "reviewer", "days_used_start_year", "days_used_end_year", "days_used", "start_date", "end_date", "is_start_date_half_day", "is_end_date_half_day", "attachments", "change_request"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['VACATION', 'SICK_LEAVE', 'OTHER']):
            raise ValueError("must be one of enum values ('VACATION', 'SICK_LEAVE', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmployeeTimeoffsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviewer
        if self.reviewer:
            _dict['reviewer'] = self.reviewer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if denial_reason (nullable) is None
        # and model_fields_set contains the field
        if self.denial_reason is None and "denial_reason" in self.model_fields_set:
            _dict['denial_reason'] = None

        # set to None if change_request (nullable) is None
        # and model_fields_set contains the field
        if self.change_request is None and "change_request" in self.model_fields_set:
            _dict['change_request'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmployeeTimeoffsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "time_off_id": obj.get("time_off_id"),
            "time_off_type_id": obj.get("time_off_type_id"),
            "policy_id": obj.get("policy_id"),
            "policy_type_id": obj.get("policy_type_id"),
            "policy_name": obj.get("policy_name"),
            "policy_type_name": obj.get("policy_type_name"),
            "reason": obj.get("reason"),
            "type": obj.get("type"),
            "requested_at": obj.get("requested_at"),
            "reviewed_at": obj.get("reviewed_at"),
            "with_multiple_dates": obj.get("with_multiple_dates"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "denial_reason": obj.get("denial_reason"),
            "requester": EmployeeTimeoffsItemRequester.from_dict(obj["requester"]) if obj.get("requester") is not None else None,
            "reviewer": EmployeeTimeoffsItemReviewer.from_dict(obj["reviewer"]) if obj.get("reviewer") is not None else None,
            "days_used_start_year": obj.get("days_used_start_year"),
            "days_used_end_year": obj.get("days_used_end_year"),
            "days_used": obj.get("days_used"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "is_start_date_half_day": obj.get("is_start_date_half_day"),
            "is_end_date_half_day": obj.get("is_end_date_half_day"),
            "attachments": [EmployeeTimeoffsItemAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "change_request": obj.get("change_request")
        })
        return _obj


