# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.get_time_offs_query200_response_data_inner_recipient_profile import GetTimeOffsQuery200ResponseDataInnerRecipientProfile
from dima_sdk.models.get_time_offs_query200_response_data_inner_requester_profile import GetTimeOffsQuery200ResponseDataInnerRequesterProfile
from dima_sdk.models.get_time_offs_query200_response_data_inner_time_off_dailies_inner import GetTimeOffsQuery200ResponseDataInnerTimeOffDailiesInner
from typing import Optional, Set
from typing_extensions import Self

class GetTimeOffsQuery200ResponseDataInner(BaseModel):
    """
    GetTimeOffsQuery200ResponseDataInner
    """ # noqa: E501
    id: StrictStr = Field(description="Time off id")
    amount: Union[StrictFloat, StrictInt] = Field(description="Amount of time off")
    reason: Optional[StrictStr] = Field(default=None, description="Reason for time off")
    status: Optional[StrictStr] = Field(default=None, description="Status of time off")
    is_paid: StrictBool = Field(description="Is time off paid")
    end_date: datetime = Field(description="End date of time off")
    created_at: datetime = Field(description="Time off creation date")
    start_date: datetime = Field(description="Start date of time off")
    updated_at: datetime = Field(description="Time off update date")
    approved_at: Optional[datetime] = Field(default=None, description="Time off approval date")
    description: Optional[StrictStr] = Field(default=None, description="Time off description")
    contract_oid: Optional[StrictStr] = Field(default=None, description="Contract id")
    requested_at: datetime = Field(description="Time off request date")
    half_end_date: StrictBool = Field(description="Is half end date. Only used for backwards compatibility, please do not use.")
    half_start_date: StrictBool = Field(description="Is half start date. Only used for backwards compatibility, please do not use.")
    deduction_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Deduction amount")
    time_off_dailies: Optional[List[GetTimeOffsQuery200ResponseDataInnerTimeOffDailiesInner]] = None
    time_off_type_id: StrictStr = Field(description="Time off type id")
    recipient_profile: Optional[GetTimeOffsQuery200ResponseDataInnerRecipientProfile] = None
    requester_profile: Optional[GetTimeOffsQuery200ResponseDataInnerRequesterProfile] = None
    time_off_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time off percentage")
    is_end_date_estimated: Optional[StrictBool] = Field(default=None, description="Is end date estimated")
    other_type_description: Optional[StrictStr] = Field(default=None, description="Other type description")
    __properties: ClassVar[List[str]] = ["id", "amount", "reason", "status", "is_paid", "end_date", "created_at", "start_date", "updated_at", "approved_at", "description", "contract_oid", "requested_at", "half_end_date", "half_start_date", "deduction_amount", "time_off_dailies", "time_off_type_id", "recipient_profile", "requester_profile", "time_off_percentage", "is_end_date_estimated", "other_type_description"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REQUESTED', 'APPROVED', 'REJECTED', 'USED', 'CANCELED']):
            raise ValueError("must be one of enum values ('REQUESTED', 'APPROVED', 'REJECTED', 'USED', 'CANCELED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTimeOffsQuery200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in time_off_dailies (list)
        _items = []
        if self.time_off_dailies:
            for _item_time_off_dailies in self.time_off_dailies:
                if _item_time_off_dailies:
                    _items.append(_item_time_off_dailies.to_dict())
            _dict['time_off_dailies'] = _items
        # override the default output from pydantic by calling `to_dict()` of recipient_profile
        if self.recipient_profile:
            _dict['recipient_profile'] = self.recipient_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requester_profile
        if self.requester_profile:
            _dict['requester_profile'] = self.requester_profile.to_dict()
        # set to None if approved_at (nullable) is None
        # and model_fields_set contains the field
        if self.approved_at is None and "approved_at" in self.model_fields_set:
            _dict['approved_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTimeOffsQuery200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "amount": obj.get("amount"),
            "reason": obj.get("reason"),
            "status": obj.get("status"),
            "is_paid": obj.get("is_paid"),
            "end_date": obj.get("end_date"),
            "created_at": obj.get("created_at"),
            "start_date": obj.get("start_date"),
            "updated_at": obj.get("updated_at"),
            "approved_at": obj.get("approved_at"),
            "description": obj.get("description"),
            "contract_oid": obj.get("contract_oid"),
            "requested_at": obj.get("requested_at"),
            "half_end_date": obj.get("half_end_date"),
            "half_start_date": obj.get("half_start_date"),
            "deduction_amount": obj.get("deduction_amount"),
            "time_off_dailies": [GetTimeOffsQuery200ResponseDataInnerTimeOffDailiesInner.from_dict(_item) for _item in obj["time_off_dailies"]] if obj.get("time_off_dailies") is not None else None,
            "time_off_type_id": obj.get("time_off_type_id"),
            "recipient_profile": GetTimeOffsQuery200ResponseDataInnerRecipientProfile.from_dict(obj["recipient_profile"]) if obj.get("recipient_profile") is not None else None,
            "requester_profile": GetTimeOffsQuery200ResponseDataInnerRequesterProfile.from_dict(obj["requester_profile"]) if obj.get("requester_profile") is not None else None,
            "time_off_percentage": obj.get("time_off_percentage"),
            "is_end_date_estimated": obj.get("is_end_date_estimated"),
            "other_type_description": obj.get("other_type_description")
        })
        return _obj


