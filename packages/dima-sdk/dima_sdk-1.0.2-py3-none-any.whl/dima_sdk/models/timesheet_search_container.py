# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_sdk.models.invoice_adjustment_search_container_contract_types import InvoiceAdjustmentSearchContainerContractTypes
from dima_sdk.models.sort_dir_enum import SortDirEnum
from dima_sdk.models.timesheet_search_container_statuses import TimesheetSearchContainerStatuses
from dima_sdk.models.timesheet_search_container_types import TimesheetSearchContainerTypes
from typing import Optional, Set
from typing_extensions import Self

class TimesheetSearchContainer(BaseModel):
    """
    This is a model to make it easier to understand and restrict search parameters
    """ # noqa: E501
    limit: Optional[Annotated[str, Field(strict=True, max_length=5)]] = Field(default='10', description="Return a page of results with given number of records.")
    offset: Optional[Annotated[str, Field(strict=True, max_length=5)]] = '10'
    order_direction: Optional[SortDirEnum] = None
    contract_id: Optional[StrictStr] = None
    invoice_id: Optional[Annotated[str, Field(strict=True, max_length=10)]] = None
    reporter_id: Optional[Annotated[str, Field(strict=True, max_length=10)]] = None
    contract_types: Optional[InvoiceAdjustmentSearchContainerContractTypes] = None
    types: Optional[TimesheetSearchContainerTypes] = None
    statuses: Optional[TimesheetSearchContainerStatuses] = None
    date_from: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example 2022-12-31.")
    date_to: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example 2022-12-31.")
    __properties: ClassVar[List[str]] = ["limit", "offset", "order_direction", "contract_id", "invoice_id", "reporter_id", "contract_types", "types", "statuses", "date_from", "date_to"]

    @field_validator('limit')
    def limit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{1,5}$", value):
            raise ValueError(r"must validate the regular expression /^\d{1,5}$/")
        return value

    @field_validator('offset')
    def offset_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{1,5}$", value):
            raise ValueError(r"must validate the regular expression /^\d{1,5}$/")
        return value

    @field_validator('invoice_id')
    def invoice_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+$/")
        return value

    @field_validator('reporter_id')
    def reporter_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+$", value):
            raise ValueError(r"must validate the regular expression /^\d+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimesheetSearchContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contract_types
        if self.contract_types:
            _dict['contract_types'] = self.contract_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of types
        if self.types:
            _dict['types'] = self.types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statuses
        if self.statuses:
            _dict['statuses'] = self.statuses.to_dict()
        # set to None if date_from (nullable) is None
        # and model_fields_set contains the field
        if self.date_from is None and "date_from" in self.model_fields_set:
            _dict['date_from'] = None

        # set to None if date_to (nullable) is None
        # and model_fields_set contains the field
        if self.date_to is None and "date_to" in self.model_fields_set:
            _dict['date_to'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimesheetSearchContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "limit": obj.get("limit") if obj.get("limit") is not None else '10',
            "offset": obj.get("offset") if obj.get("offset") is not None else '10',
            "order_direction": obj.get("order_direction"),
            "contract_id": obj.get("contract_id"),
            "invoice_id": obj.get("invoice_id"),
            "reporter_id": obj.get("reporter_id"),
            "contract_types": InvoiceAdjustmentSearchContainerContractTypes.from_dict(obj["contract_types"]) if obj.get("contract_types") is not None else None,
            "types": TimesheetSearchContainerTypes.from_dict(obj["types"]) if obj.get("types") is not None else None,
            "statuses": TimesheetSearchContainerStatuses.from_dict(obj["statuses"]) if obj.get("statuses") is not None else None,
            "date_from": obj.get("date_from"),
            "date_to": obj.get("date_to")
        })
        return _obj


