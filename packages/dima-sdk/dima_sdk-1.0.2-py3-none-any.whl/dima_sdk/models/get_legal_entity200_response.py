# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.get_legal_entity200_response_address import GetLegalEntity200ResponseAddress
from dima_sdk.models.get_legal_entity200_response_registration_address import GetLegalEntity200ResponseRegistrationAddress
from typing import Optional, Set
from typing_extensions import Self

class GetLegalEntity200Response(BaseModel):
    """
    GetLegalEntity200Response
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the legal entity.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the legal entity.")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number of the legal entity.")
    vat_id: Optional[StrictStr] = Field(default=None, description="VAT ID of the legal entity, known as EIN in the US.")
    address: Optional[GetLegalEntity200ResponseAddress] = None
    country: Optional[StrictStr] = Field(default=None, description="Country of the legal entity.")
    naics_code: Optional[StrictStr] = Field(default=None, description="NAICS code of the legal entity.")
    entity_type: Optional[StrictStr] = Field(default=None, description="Type of the legal entity (e.g., LLC).")
    employment_type: Optional[StrictStr] = Field(default=None, description="Employment type of the legal entity.")
    registration_number: Optional[StrictStr] = Field(default=None, description="Registration number of the legal entity.")
    registration_address: Optional[GetLegalEntity200ResponseRegistrationAddress] = None
    union_or_leased_employees: Optional[StrictBool] = Field(default=None, description="Indicates if the legal entity has union or leased employees.")
    __properties: ClassVar[List[str]] = ["id", "name", "phone", "vat_id", "address", "country", "naics_code", "entity_type", "employment_type", "registration_number", "registration_address", "union_or_leased_employees"]

    @field_validator('employment_type')
    def employment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['peo', 'usp', 'gp']):
            raise ValueError("must be one of enum values ('peo', 'usp', 'gp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetLegalEntity200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registration_address
        if self.registration_address:
            _dict['registration_address'] = self.registration_address.to_dict()
        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if vat_id (nullable) is None
        # and model_fields_set contains the field
        if self.vat_id is None and "vat_id" in self.model_fields_set:
            _dict['vat_id'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if naics_code (nullable) is None
        # and model_fields_set contains the field
        if self.naics_code is None and "naics_code" in self.model_fields_set:
            _dict['naics_code'] = None

        # set to None if registration_number (nullable) is None
        # and model_fields_set contains the field
        if self.registration_number is None and "registration_number" in self.model_fields_set:
            _dict['registration_number'] = None

        # set to None if registration_address (nullable) is None
        # and model_fields_set contains the field
        if self.registration_address is None and "registration_address" in self.model_fields_set:
            _dict['registration_address'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetLegalEntity200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "vat_id": obj.get("vat_id"),
            "address": GetLegalEntity200ResponseAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "country": obj.get("country"),
            "naics_code": obj.get("naics_code"),
            "entity_type": obj.get("entity_type"),
            "employment_type": obj.get("employment_type"),
            "registration_number": obj.get("registration_number"),
            "registration_address": GetLegalEntity200ResponseRegistrationAddress.from_dict(obj["registration_address"]) if obj.get("registration_address") is not None else None,
            "union_or_leased_employees": obj.get("union_or_leased_employees")
        })
        return _obj


