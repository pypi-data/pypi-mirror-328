# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.offboarding_tracker_id_get200_response_data_termination_initiated_by import OffboardingTrackerIdGet200ResponseDataTerminationInitiatedBy
from dima_sdk.models.offboarding_tracker_id_get200_response_data_termination_termination_impact import OffboardingTrackerIdGet200ResponseDataTerminationTerminationImpact
from typing import Optional, Set
from typing_extensions import Self

class OffboardingTrackerIdGet200ResponseDataTermination(BaseModel):
    """
    OffboardingTrackerIdGet200ResponseDataTermination
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The termination ID")
    end_date: Optional[StrictStr] = Field(default=None, description="The end date of the contract termination.")
    ending_type: Optional[StrictStr] = Field(default=None, description="The type of termination (e.g., ENDING_CONTRACT).")
    initiated_at: Optional[StrictStr] = Field(default=None, description="The date and time when the termination was initiated.")
    initiated_by: Optional[OffboardingTrackerIdGet200ResponseDataTerminationInitiatedBy] = None
    public_message: Optional[StrictStr] = Field(default=None, description="A public message regarding the termination.")
    termination_impact: Optional[OffboardingTrackerIdGet200ResponseDataTerminationTerminationImpact] = None
    eligible_for_rehire: Optional[StrictStr] = Field(default=None, description="Indicates whether the individual is eligible for rehire.")
    eligible_for_rehire_reason: Optional[StrictStr] = Field(default=None, description="The reason why the individual is or is not eligible for rehire.")
    __properties: ClassVar[List[str]] = ["id", "end_date", "ending_type", "initiated_at", "initiated_by", "public_message", "termination_impact", "eligible_for_rehire", "eligible_for_rehire_reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OffboardingTrackerIdGet200ResponseDataTermination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initiated_by
        if self.initiated_by:
            _dict['initiated_by'] = self.initiated_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of termination_impact
        if self.termination_impact:
            _dict['termination_impact'] = self.termination_impact.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if initiated_at (nullable) is None
        # and model_fields_set contains the field
        if self.initiated_at is None and "initiated_at" in self.model_fields_set:
            _dict['initiated_at'] = None

        # set to None if initiated_by (nullable) is None
        # and model_fields_set contains the field
        if self.initiated_by is None and "initiated_by" in self.model_fields_set:
            _dict['initiated_by'] = None

        # set to None if public_message (nullable) is None
        # and model_fields_set contains the field
        if self.public_message is None and "public_message" in self.model_fields_set:
            _dict['public_message'] = None

        # set to None if termination_impact (nullable) is None
        # and model_fields_set contains the field
        if self.termination_impact is None and "termination_impact" in self.model_fields_set:
            _dict['termination_impact'] = None

        # set to None if eligible_for_rehire (nullable) is None
        # and model_fields_set contains the field
        if self.eligible_for_rehire is None and "eligible_for_rehire" in self.model_fields_set:
            _dict['eligible_for_rehire'] = None

        # set to None if eligible_for_rehire_reason (nullable) is None
        # and model_fields_set contains the field
        if self.eligible_for_rehire_reason is None and "eligible_for_rehire_reason" in self.model_fields_set:
            _dict['eligible_for_rehire_reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OffboardingTrackerIdGet200ResponseDataTermination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "end_date": obj.get("end_date"),
            "ending_type": obj.get("ending_type"),
            "initiated_at": obj.get("initiated_at"),
            "initiated_by": OffboardingTrackerIdGet200ResponseDataTerminationInitiatedBy.from_dict(obj["initiated_by"]) if obj.get("initiated_by") is not None else None,
            "public_message": obj.get("public_message"),
            "termination_impact": OffboardingTrackerIdGet200ResponseDataTerminationTerminationImpact.from_dict(obj["termination_impact"]) if obj.get("termination_impact") is not None else None,
            "eligible_for_rehire": obj.get("eligible_for_rehire"),
            "eligible_for_rehire_reason": obj.get("eligible_for_rehire_reason")
        })
        return _obj


