# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_sdk.models.create_case201_response_data_process import CreateCase201ResponseDataProcess
from typing import Optional, Set
from typing_extensions import Self

class CreateCase201ResponseData(BaseModel):
    """
    CreateCase201ResponseData
    """ # noqa: E501
    status: StrictStr = Field(description="Current status of the immigration case")
    process: CreateCase201ResponseDataProcess
    created_at: datetime = Field(description="Timestamp when the case was created")
    updated_at: datetime = Field(description="Timestamp when the case was last updated")
    closure_note: Optional[Annotated[str, Field(strict=True, max_length=400)]] = Field(default=None, description="Optional note explaining why the case was closed")
    closure_reason: Optional[StrictStr] = Field(default=None, description="Standardized reason for case closure")
    __properties: ClassVar[List[str]] = ["status", "process", "created_at", "updated_at", "closure_note", "closure_reason"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OPEN', 'CLOSED', 'ON_HOLD']):
            raise ValueError("must be one of enum values ('OPEN', 'CLOSED', 'ON_HOLD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCase201ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCase201ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "process": CreateCase201ResponseDataProcess.from_dict(obj["process"]) if obj.get("process") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "closure_note": obj.get("closure_note"),
            "closure_reason": obj.get("closure_reason")
        })
        return _obj


