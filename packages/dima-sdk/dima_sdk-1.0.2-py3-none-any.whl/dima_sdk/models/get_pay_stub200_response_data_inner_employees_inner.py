# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.get_pay_stub200_response_data_inner_employees_inner_contributions_inner import GetPayStub200ResponseDataInnerEmployeesInnerContributionsInner
from dima_sdk.models.get_pay_stub200_response_data_inner_employees_inner_employer_contributions_inner import GetPayStub200ResponseDataInnerEmployeesInnerEmployerContributionsInner
from typing import Optional, Set
from typing_extensions import Self

class GetPayStub200ResponseDataInnerEmployeesInner(BaseModel):
    """
    GetPayStub200ResponseDataInnerEmployeesInner
    """ # noqa: E501
    gross_pay: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total gross pay for the employee for this payroll period.")
    contract_id: Optional[StrictStr] = Field(default=None, description="Identifier for the employee contract.")
    employee_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the employee.")
    hours_worked: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total hours worked by the employee in this payroll period.")
    contributions: Optional[List[GetPayStub200ResponseDataInnerEmployeesInnerContributionsInner]] = Field(default=None, description="List of contributions made by the employee.")
    employer_contributions: Optional[List[GetPayStub200ResponseDataInnerEmployeesInnerEmployerContributionsInner]] = Field(default=None, description="List of contributions made by the employer.")
    __properties: ClassVar[List[str]] = ["gross_pay", "contract_id", "employee_id", "hours_worked", "contributions", "employer_contributions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPayStub200ResponseDataInnerEmployeesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contributions (list)
        _items = []
        if self.contributions:
            for _item_contributions in self.contributions:
                if _item_contributions:
                    _items.append(_item_contributions.to_dict())
            _dict['contributions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in employer_contributions (list)
        _items = []
        if self.employer_contributions:
            for _item_employer_contributions in self.employer_contributions:
                if _item_employer_contributions:
                    _items.append(_item_employer_contributions.to_dict())
            _dict['employer_contributions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPayStub200ResponseDataInnerEmployeesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gross_pay": obj.get("gross_pay"),
            "contract_id": obj.get("contract_id"),
            "employee_id": obj.get("employee_id"),
            "hours_worked": obj.get("hours_worked"),
            "contributions": [GetPayStub200ResponseDataInnerEmployeesInnerContributionsInner.from_dict(_item) for _item in obj["contributions"]] if obj.get("contributions") is not None else None,
            "employer_contributions": [GetPayStub200ResponseDataInnerEmployeesInnerEmployerContributionsInner.from_dict(_item) for _item in obj["employer_contributions"]] if obj.get("employer_contributions") is not None else None
        })
        return _obj


