# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GetContractById200ResponseDataCompensationDetails(BaseModel):
    """
    GetContractById200ResponseDataCompensationDetails
    """ # noqa: E501
    scale: Optional[StrictStr] = Field(default=None, description="Scale of the payment.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount to be paid. This field can be excluded when creating a Pay-as-you-go task-based or Milestone contracts.")
    frequency: Optional[StrictStr] = Field(default=None, description="Scale of the invoice cycle.")
    currency_code: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Currency code.")
    first_payment: Optional[StrictStr] = Field(default=None, description="First payment amount.")
    first_payment_date: Optional[StrictStr] = Field(default=None, description="First payment date.")
    gross_annual_salary: Optional[StrictStr] = Field(default=None, description="Gross annual salary.")
    gross_signing_bonus: Optional[StrictStr] = Field(default=None, description="Gross signing bonus.")
    gross_variable_bonus: Optional[StrictStr] = Field(default=None, description="Gross variable bonus.")
    __properties: ClassVar[List[str]] = ["scale", "amount", "frequency", "currency_code", "first_payment", "first_payment_date", "gross_annual_salary", "gross_signing_bonus", "gross_variable_bonus"]

    @field_validator('currency_code')
    def currency_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetContractById200ResponseDataCompensationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if scale (nullable) is None
        # and model_fields_set contains the field
        if self.scale is None and "scale" in self.model_fields_set:
            _dict['scale'] = None

        # set to None if first_payment (nullable) is None
        # and model_fields_set contains the field
        if self.first_payment is None and "first_payment" in self.model_fields_set:
            _dict['first_payment'] = None

        # set to None if first_payment_date (nullable) is None
        # and model_fields_set contains the field
        if self.first_payment_date is None and "first_payment_date" in self.model_fields_set:
            _dict['first_payment_date'] = None

        # set to None if gross_annual_salary (nullable) is None
        # and model_fields_set contains the field
        if self.gross_annual_salary is None and "gross_annual_salary" in self.model_fields_set:
            _dict['gross_annual_salary'] = None

        # set to None if gross_signing_bonus (nullable) is None
        # and model_fields_set contains the field
        if self.gross_signing_bonus is None and "gross_signing_bonus" in self.model_fields_set:
            _dict['gross_signing_bonus'] = None

        # set to None if gross_variable_bonus (nullable) is None
        # and model_fields_set contains the field
        if self.gross_variable_bonus is None and "gross_variable_bonus" in self.model_fields_set:
            _dict['gross_variable_bonus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetContractById200ResponseDataCompensationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scale": obj.get("scale"),
            "amount": obj.get("amount"),
            "frequency": obj.get("frequency"),
            "currency_code": obj.get("currency_code"),
            "first_payment": obj.get("first_payment"),
            "first_payment_date": obj.get("first_payment_date"),
            "gross_annual_salary": obj.get("gross_annual_salary"),
            "gross_signing_bonus": obj.get("gross_signing_bonus"),
            "gross_variable_bonus": obj.get("gross_variable_bonus")
        })
        return _obj


