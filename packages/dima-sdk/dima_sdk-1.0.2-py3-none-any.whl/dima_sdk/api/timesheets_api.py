# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictStr, field_validator
from typing import Any, Optional
from typing_extensions import Annotated
from dima_sdk.models.create_timesheet201_response import CreateTimesheet201Response
from dima_sdk.models.create_timesheet_request import CreateTimesheetRequest
from dima_sdk.models.create_timesheet_review_request import CreateTimesheetReviewRequest
from dima_sdk.models.generic_result_created import GenericResultCreated
from dima_sdk.models.generic_result_updated import GenericResultUpdated
from dima_sdk.models.get_timesheet_by_id200_response import GetTimesheetById200Response
from dima_sdk.models.get_timesheets200_response import GetTimesheets200Response
from dima_sdk.models.get_timesheets_by_contract200_response import GetTimesheetsByContract200Response
from dima_sdk.models.sign_contract201_response import SignContract201Response
from dima_sdk.models.timesheet_reviews_to_create_container import TimesheetReviewsToCreateContainer
from dima_sdk.models.uninvite_to_sign_contract200_response import UninviteToSignContract200Response
from dima_sdk.models.update_timesheet_by_id_request import UpdateTimesheetByIdRequest

from dima_sdk.api_client import ApiClient, RequestSerialized
from dima_sdk.api_response import ApiResponse
from dima_sdk.rest import RESTResponseType


class TimesheetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_timesheet(
        self,
        create_timesheet_request: Annotated[CreateTimesheetRequest, Field(description="Timesheet object that needs to be created")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateTimesheet201Response:
        """Create a timesheet entry

        Submit work for a contractor.  **Token scopes**: `timesheets:write`

        :param create_timesheet_request: Timesheet object that needs to be created (required)
        :type create_timesheet_request: CreateTimesheetRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_serialize(
            create_timesheet_request=create_timesheet_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTimesheet201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_timesheet_with_http_info(
        self,
        create_timesheet_request: Annotated[CreateTimesheetRequest, Field(description="Timesheet object that needs to be created")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateTimesheet201Response]:
        """Create a timesheet entry

        Submit work for a contractor.  **Token scopes**: `timesheets:write`

        :param create_timesheet_request: Timesheet object that needs to be created (required)
        :type create_timesheet_request: CreateTimesheetRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_serialize(
            create_timesheet_request=create_timesheet_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTimesheet201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_timesheet_without_preload_content(
        self,
        create_timesheet_request: Annotated[CreateTimesheetRequest, Field(description="Timesheet object that needs to be created")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a timesheet entry

        Submit work for a contractor.  **Token scopes**: `timesheets:write`

        :param create_timesheet_request: Timesheet object that needs to be created (required)
        :type create_timesheet_request: CreateTimesheetRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_serialize(
            create_timesheet_request=create_timesheet_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTimesheet201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_timesheet_serialize(
        self,
        create_timesheet_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_timesheet_request is not None:
            _body_params = create_timesheet_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/timesheets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_timesheet_review(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        create_timesheet_review_request: CreateTimesheetReviewRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SignContract201Response:
        """Review a single timesheet

        Review a timesheet to approve or decline submitted work.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param create_timesheet_review_request: (required)
        :type create_timesheet_review_request: CreateTimesheetReviewRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_review_serialize(
            id=id,
            create_timesheet_review_request=create_timesheet_review_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SignContract201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_timesheet_review_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        create_timesheet_review_request: CreateTimesheetReviewRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SignContract201Response]:
        """Review a single timesheet

        Review a timesheet to approve or decline submitted work.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param create_timesheet_review_request: (required)
        :type create_timesheet_review_request: CreateTimesheetReviewRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_review_serialize(
            id=id,
            create_timesheet_review_request=create_timesheet_review_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SignContract201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_timesheet_review_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        create_timesheet_review_request: CreateTimesheetReviewRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Review a single timesheet

        Review a timesheet to approve or decline submitted work.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param create_timesheet_review_request: (required)
        :type create_timesheet_review_request: CreateTimesheetReviewRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_review_serialize(
            id=id,
            create_timesheet_review_request=create_timesheet_review_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SignContract201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_timesheet_review_serialize(
        self,
        id,
        create_timesheet_review_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_timesheet_review_request is not None:
            _body_params = create_timesheet_review_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/timesheets/{id}/reviews',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_timesheet_reviews(
        self,
        timesheet_reviews_to_create_container: Annotated[Optional[TimesheetReviewsToCreateContainer], Field(description="Timesheet review objects that need to be created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericResultCreated:
        """Review multiple timesheets

        Review a batch of timesheets to approve or reject submitted work.

        :param timesheet_reviews_to_create_container: Timesheet review objects that need to be created
        :type timesheet_reviews_to_create_container: TimesheetReviewsToCreateContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_reviews_serialize(
            timesheet_reviews_to_create_container=timesheet_reviews_to_create_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericResultCreated",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_timesheet_reviews_with_http_info(
        self,
        timesheet_reviews_to_create_container: Annotated[Optional[TimesheetReviewsToCreateContainer], Field(description="Timesheet review objects that need to be created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericResultCreated]:
        """Review multiple timesheets

        Review a batch of timesheets to approve or reject submitted work.

        :param timesheet_reviews_to_create_container: Timesheet review objects that need to be created
        :type timesheet_reviews_to_create_container: TimesheetReviewsToCreateContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_reviews_serialize(
            timesheet_reviews_to_create_container=timesheet_reviews_to_create_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericResultCreated",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_timesheet_reviews_without_preload_content(
        self,
        timesheet_reviews_to_create_container: Annotated[Optional[TimesheetReviewsToCreateContainer], Field(description="Timesheet review objects that need to be created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Review multiple timesheets

        Review a batch of timesheets to approve or reject submitted work.

        :param timesheet_reviews_to_create_container: Timesheet review objects that need to be created
        :type timesheet_reviews_to_create_container: TimesheetReviewsToCreateContainer
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_timesheet_reviews_serialize(
            timesheet_reviews_to_create_container=timesheet_reviews_to_create_container,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "GenericResultCreated",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_timesheet_reviews_serialize(
        self,
        timesheet_reviews_to_create_container,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if timesheet_reviews_to_create_container is not None:
            _body_params = timesheet_reviews_to_create_container


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/timesheets/many/reviews',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_timesheet_by_id(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        reason: Annotated[Optional[StrictStr], Field(description="Reason for deleting an existing task")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UninviteToSignContract200Response:
        """Delete a timesheet entry

        Delete a single timesheet entry.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param reason: Reason for deleting an existing task
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_timesheet_by_id_serialize(
            id=id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UninviteToSignContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_timesheet_by_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        reason: Annotated[Optional[StrictStr], Field(description="Reason for deleting an existing task")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UninviteToSignContract200Response]:
        """Delete a timesheet entry

        Delete a single timesheet entry.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param reason: Reason for deleting an existing task
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_timesheet_by_id_serialize(
            id=id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UninviteToSignContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_timesheet_by_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        reason: Annotated[Optional[StrictStr], Field(description="Reason for deleting an existing task")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a timesheet entry

        Delete a single timesheet entry.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param reason: Reason for deleting an existing task
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_timesheet_by_id_serialize(
            id=id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UninviteToSignContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_timesheet_by_id_serialize(
        self,
        id,
        reason,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if reason is not None:
            
            _query_params.append(('reason', reason))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/timesheets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_timesheet_by_id(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTimesheetById200Response:
        """Retrieve a single timesheet entry

        Retrieve a single timesheet entry by Id.  **Token scopes**: `timesheets:read`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheet_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheetById200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_timesheet_by_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTimesheetById200Response]:
        """Retrieve a single timesheet entry

        Retrieve a single timesheet entry by Id.  **Token scopes**: `timesheets:read`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheet_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheetById200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_timesheet_by_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a single timesheet entry

        Retrieve a single timesheet entry by Id.  **Token scopes**: `timesheets:read`

        :param id: ID of an existing timesheet (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheet_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheetById200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_timesheet_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/timesheets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_timesheets(
        self,
        contract_id: Annotated[Optional[StrictStr], Field(description="Id of an Deel contract.")] = None,
        contract_types: Annotated[Optional[Any], Field(description="types of contracts to filter")] = None,
        statuses: Optional[Any] = None,
        reporter_id: Optional[StrictStr] = None,
        date_from: Optional[date] = None,
        date_to: Optional[date] = None,
        limit: Optional[Annotated[str, Field(strict=True)]] = None,
        offset: Optional[Annotated[str, Field(strict=True)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTimesheets200Response:
        """List of timesheets

        Retrieve a list of timesheets in your Deel account. You can filter the list by providing additional paramters e.g. contract_id, contract_type etc.  **Token scopes**: `timesheets:read`

        :param contract_id: Id of an Deel contract.
        :type contract_id: str
        :param contract_types: types of contracts to filter
        :type contract_types: GetTimesheetsByContractContractTypesParameter
        :param statuses:
        :type statuses: GetTimesheetsStatusesParameter
        :param reporter_id:
        :type reporter_id: str
        :param date_from:
        :type date_from: date
        :param date_to:
        :type date_to: date
        :param limit:
        :type limit: str
        :param offset:
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheets_serialize(
            contract_id=contract_id,
            contract_types=contract_types,
            statuses=statuses,
            reporter_id=reporter_id,
            date_from=date_from,
            date_to=date_to,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheets200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_timesheets_with_http_info(
        self,
        contract_id: Annotated[Optional[StrictStr], Field(description="Id of an Deel contract.")] = None,
        contract_types: Annotated[Optional[Any], Field(description="types of contracts to filter")] = None,
        statuses: Optional[Any] = None,
        reporter_id: Optional[StrictStr] = None,
        date_from: Optional[date] = None,
        date_to: Optional[date] = None,
        limit: Optional[Annotated[str, Field(strict=True)]] = None,
        offset: Optional[Annotated[str, Field(strict=True)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTimesheets200Response]:
        """List of timesheets

        Retrieve a list of timesheets in your Deel account. You can filter the list by providing additional paramters e.g. contract_id, contract_type etc.  **Token scopes**: `timesheets:read`

        :param contract_id: Id of an Deel contract.
        :type contract_id: str
        :param contract_types: types of contracts to filter
        :type contract_types: GetTimesheetsByContractContractTypesParameter
        :param statuses:
        :type statuses: GetTimesheetsStatusesParameter
        :param reporter_id:
        :type reporter_id: str
        :param date_from:
        :type date_from: date
        :param date_to:
        :type date_to: date
        :param limit:
        :type limit: str
        :param offset:
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheets_serialize(
            contract_id=contract_id,
            contract_types=contract_types,
            statuses=statuses,
            reporter_id=reporter_id,
            date_from=date_from,
            date_to=date_to,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheets200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_timesheets_without_preload_content(
        self,
        contract_id: Annotated[Optional[StrictStr], Field(description="Id of an Deel contract.")] = None,
        contract_types: Annotated[Optional[Any], Field(description="types of contracts to filter")] = None,
        statuses: Optional[Any] = None,
        reporter_id: Optional[StrictStr] = None,
        date_from: Optional[date] = None,
        date_to: Optional[date] = None,
        limit: Optional[Annotated[str, Field(strict=True)]] = None,
        offset: Optional[Annotated[str, Field(strict=True)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of timesheets

        Retrieve a list of timesheets in your Deel account. You can filter the list by providing additional paramters e.g. contract_id, contract_type etc.  **Token scopes**: `timesheets:read`

        :param contract_id: Id of an Deel contract.
        :type contract_id: str
        :param contract_types: types of contracts to filter
        :type contract_types: GetTimesheetsByContractContractTypesParameter
        :param statuses:
        :type statuses: GetTimesheetsStatusesParameter
        :param reporter_id:
        :type reporter_id: str
        :param date_from:
        :type date_from: date
        :param date_to:
        :type date_to: date
        :param limit:
        :type limit: str
        :param offset:
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheets_serialize(
            contract_id=contract_id,
            contract_types=contract_types,
            statuses=statuses,
            reporter_id=reporter_id,
            date_from=date_from,
            date_to=date_to,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheets200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_timesheets_serialize(
        self,
        contract_id,
        contract_types,
        statuses,
        reporter_id,
        date_from,
        date_to,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if contract_id is not None:
            
            _query_params.append(('contract_id', contract_id))
            
        if contract_types is not None:
            
            _query_params.append(('contract_types', contract_types))
            
        if statuses is not None:
            
            _query_params.append(('statuses', statuses))
            
        if reporter_id is not None:
            
            _query_params.append(('reporter_id', reporter_id))
            
        if date_from is not None:
            if isinstance(date_from, date):
                _query_params.append(
                    (
                        'date_from',
                        date_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_from', date_from))
            
        if date_to is not None:
            if isinstance(date_to, date):
                _query_params.append(
                    (
                        'date_to',
                        date_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_to', date_to))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/timesheets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_timesheets_by_contract(
        self,
        contract_id: Annotated[StrictStr, Field(description="Deel contract id.")],
        contract_types: Annotated[Optional[Any], Field(description="Types of contracts to filter.")] = None,
        statuses: Annotated[Optional[Any], Field(description="Statuses of timesheets to filter.")] = None,
        reporter_id: Annotated[Optional[StrictStr], Field(description="ID of an existing profile")] = None,
        date_from: Annotated[Optional[date], Field(description="Filtered results will include records created on or after the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")] = None,
        date_to: Annotated[Optional[date], Field(description="Filtered results will include records created before the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Return a page of results after given index of row")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTimesheetsByContract200Response:
        """List of timesheets by contract

        Retrieve a list of timesheets found for a contract.  **Token scopes**: `timesheets:read`

        :param contract_id: Deel contract id. (required)
        :type contract_id: str
        :param contract_types: Types of contracts to filter.
        :type contract_types: GetTimesheetsByContractContractTypesParameter
        :param statuses: Statuses of timesheets to filter.
        :type statuses: GetTimesheetsByContractStatusesParameter
        :param reporter_id: ID of an existing profile
        :type reporter_id: str
        :param date_from: Filtered results will include records created on or after the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
        :type date_from: date
        :param date_to: Filtered results will include records created before the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
        :type date_to: date
        :param limit: Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings
        :type limit: str
        :param offset: Return a page of results after given index of row
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheets_by_contract_serialize(
            contract_id=contract_id,
            contract_types=contract_types,
            statuses=statuses,
            reporter_id=reporter_id,
            date_from=date_from,
            date_to=date_to,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheetsByContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_timesheets_by_contract_with_http_info(
        self,
        contract_id: Annotated[StrictStr, Field(description="Deel contract id.")],
        contract_types: Annotated[Optional[Any], Field(description="Types of contracts to filter.")] = None,
        statuses: Annotated[Optional[Any], Field(description="Statuses of timesheets to filter.")] = None,
        reporter_id: Annotated[Optional[StrictStr], Field(description="ID of an existing profile")] = None,
        date_from: Annotated[Optional[date], Field(description="Filtered results will include records created on or after the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")] = None,
        date_to: Annotated[Optional[date], Field(description="Filtered results will include records created before the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Return a page of results after given index of row")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTimesheetsByContract200Response]:
        """List of timesheets by contract

        Retrieve a list of timesheets found for a contract.  **Token scopes**: `timesheets:read`

        :param contract_id: Deel contract id. (required)
        :type contract_id: str
        :param contract_types: Types of contracts to filter.
        :type contract_types: GetTimesheetsByContractContractTypesParameter
        :param statuses: Statuses of timesheets to filter.
        :type statuses: GetTimesheetsByContractStatusesParameter
        :param reporter_id: ID of an existing profile
        :type reporter_id: str
        :param date_from: Filtered results will include records created on or after the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
        :type date_from: date
        :param date_to: Filtered results will include records created before the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
        :type date_to: date
        :param limit: Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings
        :type limit: str
        :param offset: Return a page of results after given index of row
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheets_by_contract_serialize(
            contract_id=contract_id,
            contract_types=contract_types,
            statuses=statuses,
            reporter_id=reporter_id,
            date_from=date_from,
            date_to=date_to,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheetsByContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_timesheets_by_contract_without_preload_content(
        self,
        contract_id: Annotated[StrictStr, Field(description="Deel contract id.")],
        contract_types: Annotated[Optional[Any], Field(description="Types of contracts to filter.")] = None,
        statuses: Annotated[Optional[Any], Field(description="Statuses of timesheets to filter.")] = None,
        reporter_id: Annotated[Optional[StrictStr], Field(description="ID of an existing profile")] = None,
        date_from: Annotated[Optional[date], Field(description="Filtered results will include records created on or after the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")] = None,
        date_to: Annotated[Optional[date], Field(description="Filtered results will include records created before the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Return a page of results after given index of row")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of timesheets by contract

        Retrieve a list of timesheets found for a contract.  **Token scopes**: `timesheets:read`

        :param contract_id: Deel contract id. (required)
        :type contract_id: str
        :param contract_types: Types of contracts to filter.
        :type contract_types: GetTimesheetsByContractContractTypesParameter
        :param statuses: Statuses of timesheets to filter.
        :type statuses: GetTimesheetsByContractStatusesParameter
        :param reporter_id: ID of an existing profile
        :type reporter_id: str
        :param date_from: Filtered results will include records created on or after the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
        :type date_from: date
        :param date_to: Filtered results will include records created before the provided date. Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.
        :type date_to: date
        :param limit: Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings
        :type limit: str
        :param offset: Return a page of results after given index of row
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timesheets_by_contract_serialize(
            contract_id=contract_id,
            contract_types=contract_types,
            statuses=statuses,
            reporter_id=reporter_id,
            date_from=date_from,
            date_to=date_to,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimesheetsByContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_timesheets_by_contract_serialize(
        self,
        contract_id,
        contract_types,
        statuses,
        reporter_id,
        date_from,
        date_to,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contract_id is not None:
            _path_params['contract_id'] = contract_id
        # process the query parameters
        if contract_types is not None:
            
            _query_params.append(('contract_types', contract_types))
            
        if statuses is not None:
            
            _query_params.append(('statuses', statuses))
            
        if reporter_id is not None:
            
            _query_params.append(('reporter_id', reporter_id))
            
        if date_from is not None:
            if isinstance(date_from, date):
                _query_params.append(
                    (
                        'date_from',
                        date_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_from', date_from))
            
        if date_to is not None:
            if isinstance(date_to, date):
                _query_params.append(
                    (
                        'date_to',
                        date_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_to', date_to))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/contracts/{contract_id}/timesheets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_timesheet_by_id(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet.")],
        update_timesheet_by_id_request: UpdateTimesheetByIdRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenericResultUpdated:
        """Update a timesheet entry

        Update a single timesheet entry.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet. (required)
        :type id: str
        :param update_timesheet_by_id_request: (required)
        :type update_timesheet_by_id_request: UpdateTimesheetByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_timesheet_by_id_serialize(
            id=id,
            update_timesheet_by_id_request=update_timesheet_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResultUpdated",
            '201': "UpdateAdjustment200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_timesheet_by_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet.")],
        update_timesheet_by_id_request: UpdateTimesheetByIdRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenericResultUpdated]:
        """Update a timesheet entry

        Update a single timesheet entry.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet. (required)
        :type id: str
        :param update_timesheet_by_id_request: (required)
        :type update_timesheet_by_id_request: UpdateTimesheetByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_timesheet_by_id_serialize(
            id=id,
            update_timesheet_by_id_request=update_timesheet_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResultUpdated",
            '201': "UpdateAdjustment200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_timesheet_by_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of an existing timesheet.")],
        update_timesheet_by_id_request: UpdateTimesheetByIdRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a timesheet entry

        Update a single timesheet entry.  **Token scopes**: `timesheets:write`

        :param id: ID of an existing timesheet. (required)
        :type id: str
        :param update_timesheet_by_id_request: (required)
        :type update_timesheet_by_id_request: UpdateTimesheetByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_timesheet_by_id_serialize(
            id=id,
            update_timesheet_by_id_request=update_timesheet_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenericResultUpdated",
            '201': "UpdateAdjustment200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_timesheet_by_id_serialize(
        self,
        id,
        update_timesheet_by_id_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_timesheet_by_id_request is not None:
            _body_params = update_timesheet_by_id_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/timesheets/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


