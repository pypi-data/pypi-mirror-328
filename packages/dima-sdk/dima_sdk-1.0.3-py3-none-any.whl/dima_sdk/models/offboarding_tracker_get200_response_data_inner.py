# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.offboarding_tracker_get200_response_data_inner_contract import OffboardingTrackerGet200ResponseDataInnerContract
from dima_sdk.models.offboarding_tracker_get200_response_data_inner_hris_profile import OffboardingTrackerGet200ResponseDataInnerHrisProfile
from dima_sdk.models.offboarding_tracker_get200_response_data_inner_progress import OffboardingTrackerGet200ResponseDataInnerProgress
from dima_sdk.models.offboarding_tracker_id_get200_response_data_app_experience import OffboardingTrackerIdGet200ResponseDataAppExperience
from typing import Optional, Set
from typing_extensions import Self

class OffboardingTrackerGet200ResponseDataInner(BaseModel):
    """
    OffboardingTrackerGet200ResponseDataInner
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the individual associated with the offboarding.")
    contract: Optional[OffboardingTrackerGet200ResponseDataInnerContract] = None
    progress: Optional[OffboardingTrackerGet200ResponseDataInnerProgress] = None
    unique_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for the offboarding item.")
    hiring_type: Optional[StrictStr] = Field(default=None, description="The hiring type for the individual (e.g., contractor).")
    hris_profile: Optional[OffboardingTrackerGet200ResponseDataInnerHrisProfile] = None
    app_experience: Optional[OffboardingTrackerIdGet200ResponseDataAppExperience] = None
    termination_id: Optional[StrictStr] = Field(default=None, description="The termination ID if the individual has been terminated.")
    offboarding_type: Optional[StrictStr] = Field(default=None, description="The type of offboarding (e.g., ENDING_CONTRACT, TERMINATION).")
    __properties: ClassVar[List[str]] = ["name", "contract", "progress", "unique_id", "hiring_type", "hris_profile", "app_experience", "termination_id", "offboarding_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OffboardingTrackerGet200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict['progress'] = self.progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hris_profile
        if self.hris_profile:
            _dict['hris_profile'] = self.hris_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_experience
        if self.app_experience:
            _dict['app_experience'] = self.app_experience.to_dict()
        # set to None if termination_id (nullable) is None
        # and model_fields_set contains the field
        if self.termination_id is None and "termination_id" in self.model_fields_set:
            _dict['termination_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OffboardingTrackerGet200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "contract": OffboardingTrackerGet200ResponseDataInnerContract.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "progress": OffboardingTrackerGet200ResponseDataInnerProgress.from_dict(obj["progress"]) if obj.get("progress") is not None else None,
            "unique_id": obj.get("unique_id"),
            "hiring_type": obj.get("hiring_type"),
            "hris_profile": OffboardingTrackerGet200ResponseDataInnerHrisProfile.from_dict(obj["hris_profile"]) if obj.get("hris_profile") is not None else None,
            "app_experience": OffboardingTrackerIdGet200ResponseDataAppExperience.from_dict(obj["app_experience"]) if obj.get("app_experience") is not None else None,
            "termination_id": obj.get("termination_id"),
            "offboarding_type": obj.get("offboarding_type")
        })
        return _obj


