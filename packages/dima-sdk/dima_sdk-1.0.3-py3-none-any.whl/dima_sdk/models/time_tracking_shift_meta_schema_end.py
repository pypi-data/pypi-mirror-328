# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TimeTrackingShiftMetaSchemaEnd(BaseModel):
    """
    End details of the shift
    """ # noqa: E501
    var_date: Annotated[str, Field(strict=True)] = Field(description="End date in YYYY-MM-DD format", alias="date")
    time: Annotated[str, Field(strict=True)] = Field(description="End time in HH:MM format")
    is_rest_day: StrictBool = Field(description="Indicates if the end date is a rest day")
    is_public_holiday: StrictBool = Field(description="Indicates if the end date is a public holiday")
    __properties: ClassVar[List[str]] = ["date", "time", "is_rest_day", "is_public_holiday"]

    @field_validator('var_date')
    def var_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{4}-\d{2}-\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}$/")
        return value

    @field_validator('time')
    def time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{2}:\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{2}:\d{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeTrackingShiftMetaSchemaEnd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeTrackingShiftMetaSchemaEnd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "time": obj.get("time"),
            "is_rest_day": obj.get("is_rest_day"),
            "is_public_holiday": obj.get("is_public_holiday")
        })
        return _obj


