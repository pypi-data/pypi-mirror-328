# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.get_profile_entitlements200_response_entitlements_inner_policy_policy_type import GetProfileEntitlements200ResponseEntitlementsInnerPolicyPolicyType
from dima_sdk.models.get_profile_entitlements200_response_entitlements_inner_policy_time_off_types_inner import GetProfileEntitlements200ResponseEntitlementsInnerPolicyTimeOffTypesInner
from typing import Optional, Set
from typing_extensions import Self

class GetProfileEntitlements200ResponseEntitlementsInnerPolicy(BaseModel):
    """
    GetProfileEntitlements200ResponseEntitlementsInnerPolicy
    """ # noqa: E501
    id: StrictStr = Field(description="Policy ID")
    name: StrictStr = Field(description="Policy name")
    created_at: datetime = Field(description="Policy creation date")
    leave_type: Optional[StrictStr] = Field(default=None, description="Leave type")
    updated_at: datetime = Field(description="Policy update date")
    description: Optional[StrictStr] = Field(default=None, description="Policy description")
    policy_type: Optional[GetProfileEntitlements200ResponseEntitlementsInnerPolicyPolicyType] = None
    tracking_unit: Optional[StrictStr] = Field(default=None, description="Tracking unit")
    policy_type_id: Optional[StrictStr] = Field(default=None, description="Policy type ID")
    time_off_types: Optional[List[GetProfileEntitlements200ResponseEntitlementsInnerPolicyTimeOffTypesInner]] = None
    tracking_cadence: Optional[StrictStr] = Field(default=None, description="Tracking cadence")
    tracking_start_date: Optional[datetime] = Field(default=None, description="Tracking start date")
    tracking_unit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tracking unit amount")
    __properties: ClassVar[List[str]] = ["id", "name", "created_at", "leave_type", "updated_at", "description", "policy_type", "tracking_unit", "policy_type_id", "time_off_types", "tracking_cadence", "tracking_start_date", "tracking_unit_amount"]

    @field_validator('leave_type')
    def leave_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHORT_TERM_LEAVE', 'LONG_TERM_LEAVE']):
            raise ValueError("must be one of enum values ('SHORT_TERM_LEAVE', 'LONG_TERM_LEAVE')")
        return value

    @field_validator('tracking_unit')
    def tracking_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOUR', 'BUSINESS_DAY', 'CALENDAR_DAY', 'WEEK', 'MONTH', 'YEAR']):
            raise ValueError("must be one of enum values ('HOUR', 'BUSINESS_DAY', 'CALENDAR_DAY', 'WEEK', 'MONTH', 'YEAR')")
        return value

    @field_validator('tracking_cadence')
    def tracking_cadence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIXED_DAY', 'ANNIVERSARY']):
            raise ValueError("must be one of enum values ('FIXED_DAY', 'ANNIVERSARY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetProfileEntitlements200ResponseEntitlementsInnerPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policy_type
        if self.policy_type:
            _dict['policy_type'] = self.policy_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in time_off_types (list)
        _items = []
        if self.time_off_types:
            for _item_time_off_types in self.time_off_types:
                if _item_time_off_types:
                    _items.append(_item_time_off_types.to_dict())
            _dict['time_off_types'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetProfileEntitlements200ResponseEntitlementsInnerPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created_at": obj.get("created_at"),
            "leave_type": obj.get("leave_type"),
            "updated_at": obj.get("updated_at"),
            "description": obj.get("description"),
            "policy_type": GetProfileEntitlements200ResponseEntitlementsInnerPolicyPolicyType.from_dict(obj["policy_type"]) if obj.get("policy_type") is not None else None,
            "tracking_unit": obj.get("tracking_unit"),
            "policy_type_id": obj.get("policy_type_id"),
            "time_off_types": [GetProfileEntitlements200ResponseEntitlementsInnerPolicyTimeOffTypesInner.from_dict(_item) for _item in obj["time_off_types"]] if obj.get("time_off_types") is not None else None,
            "tracking_cadence": obj.get("tracking_cadence"),
            "tracking_start_date": obj.get("tracking_start_date"),
            "tracking_unit_amount": obj.get("tracking_unit_amount")
        })
        return _obj


