# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.eor_termination_request200_response_request_data import EorTerminationRequest200ResponseRequestData
from typing import Optional, Set
from typing_extensions import Self

class EorTerminationRequest200Response(BaseModel):
    """
    EorTerminationRequest200Response
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    end_date: Optional[datetime] = Field(default=None, description="The definitive contract end date")
    contract_id: Optional[StrictStr] = Field(default=None, description="Public contract oid")
    request_data: Optional[EorTerminationRequest200ResponseRequestData] = None
    desired_end_date: Optional[datetime] = Field(default=None, description="The desired end date. If the date is not provided, it will be selected by HRX the closest date possible")
    __properties: ClassVar[List[str]] = ["id", "end_date", "contract_id", "request_data", "desired_end_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorTerminationRequest200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request_data
        if self.request_data:
            _dict['request_data'] = self.request_data.to_dict()
        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        # set to None if request_data (nullable) is None
        # and model_fields_set contains the field
        if self.request_data is None and "request_data" in self.model_fields_set:
            _dict['request_data'] = None

        # set to None if desired_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.desired_end_date is None and "desired_end_date" in self.model_fields_set:
            _dict['desired_end_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorTerminationRequest200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "end_date": obj.get("end_date"),
            "contract_id": obj.get("contract_id"),
            "request_data": EorTerminationRequest200ResponseRequestData.from_dict(obj["request_data"]) if obj.get("request_data") is not None else None,
            "desired_end_date": obj.get("desired_end_date")
        })
        return _obj


