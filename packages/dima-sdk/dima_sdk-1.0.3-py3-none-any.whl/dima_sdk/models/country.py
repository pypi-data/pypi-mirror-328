# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_sdk.models.state_of_country import StateOfCountry
from typing import Optional, Set
from typing_extensions import Self

class Country(BaseModel):
    """
    Country
    """ # noqa: E501
    code: Annotated[str, Field(min_length=2, strict=True, max_length=2)] = Field(description="Country code.")
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Country name.")
    visa_support: StrictBool = Field(description="Identifies if Deel provides visa support for employees being hired in this country.")
    eor_support: StrictBool = Field(description="Identifies if Deel support EoR in this country.")
    state_type: Optional[StrictStr] = Field(description="Identifies the type of sub-territory within a country where local laws may apply. Some countries may have states, provinces, prefectures or regions.")
    states: List[StateOfCountry]
    __properties: ClassVar[List[str]] = ["code", "name", "visa_support", "eor_support", "state_type", "states"]

    @field_validator('code')
    def code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Country from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in states (list)
        _items = []
        if self.states:
            for _item_states in self.states:
                if _item_states:
                    _items.append(_item_states.to_dict())
            _dict['states'] = _items
        # set to None if state_type (nullable) is None
        # and model_fields_set contains the field
        if self.state_type is None and "state_type" in self.model_fields_set:
            _dict['state_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Country from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "name": obj.get("name"),
            "visa_support": obj.get("visa_support"),
            "eor_support": obj.get("eor_support"),
            "state_type": obj.get("state_type"),
            "states": [StateOfCountry.from_dict(_item) for _item in obj["states"]] if obj.get("states") is not None else None
        })
        return _obj


