# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class RequestExerciseEquityRequest(BaseModel):
    """
    RequestExerciseEquityRequest
    """ # noqa: E501
    fmv: StrictStr = Field(description="The fair market value of the equity.")
    quantity: Union[StrictFloat, StrictInt] = Field(description="The quantity of equity to exercise.")
    issuer_id: StrictStr = Field(description="The unique identifier of the issuer.")
    worker_id: StrictStr = Field(description="The unique identifier of the worker.")
    address_zip: StrictStr = Field(description="The zip code of the address.")
    exercise_id: StrictStr = Field(description="The unique identifier of the exercise.")
    address_city: StrictStr = Field(description="The city of the address.")
    address_state: StrictStr = Field(description="The state of the address.")
    address_street: StrictStr = Field(description="The street of the address.")
    stakeholder_id: StrictStr = Field(description="The unique identifier of the stakeholder.")
    address_country: StrictStr = Field(description="The country of the address.")
    option_grant_id: StrictStr = Field(description="The unique identifier of the option grant.")
    fmv_currency_code: StrictStr = Field(description="The currency code of the fair market value.")
    stakeholder_email: StrictStr = Field(description="The email of the stakeholder.")
    option_grant_issue: StrictStr = Field(description="The issue of the option grant.")
    option_grant_label: StrictStr = Field(description="The label of the option grant.")
    option_grant_currency: StrictStr = Field(description="The currency of the option grant.")
    option_grant_issue_date: date = Field(description="The issue date of the option grant.")
    option_grant_expiry_date: date = Field(description="The expiry date of the option grant.")
    stakeholder_relationship: StrictStr = Field(description="The relationship of the stakeholder.")
    option_grant_strike_price: StrictStr = Field(description="The strike price of the option grant.")
    __properties: ClassVar[List[str]] = ["fmv", "quantity", "issuer_id", "worker_id", "address_zip", "exercise_id", "address_city", "address_state", "address_street", "stakeholder_id", "address_country", "option_grant_id", "fmv_currency_code", "stakeholder_email", "option_grant_issue", "option_grant_label", "option_grant_currency", "option_grant_issue_date", "option_grant_expiry_date", "stakeholder_relationship", "option_grant_strike_price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestExerciseEquityRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestExerciseEquityRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fmv": obj.get("fmv"),
            "quantity": obj.get("quantity"),
            "issuer_id": obj.get("issuer_id"),
            "worker_id": obj.get("worker_id"),
            "address_zip": obj.get("address_zip"),
            "exercise_id": obj.get("exercise_id"),
            "address_city": obj.get("address_city"),
            "address_state": obj.get("address_state"),
            "address_street": obj.get("address_street"),
            "stakeholder_id": obj.get("stakeholder_id"),
            "address_country": obj.get("address_country"),
            "option_grant_id": obj.get("option_grant_id"),
            "fmv_currency_code": obj.get("fmv_currency_code"),
            "stakeholder_email": obj.get("stakeholder_email"),
            "option_grant_issue": obj.get("option_grant_issue"),
            "option_grant_label": obj.get("option_grant_label"),
            "option_grant_currency": obj.get("option_grant_currency"),
            "option_grant_issue_date": obj.get("option_grant_issue_date"),
            "option_grant_expiry_date": obj.get("option_grant_expiry_date"),
            "stakeholder_relationship": obj.get("stakeholder_relationship"),
            "option_grant_strike_price": obj.get("option_grant_strike_price")
        })
        return _obj


