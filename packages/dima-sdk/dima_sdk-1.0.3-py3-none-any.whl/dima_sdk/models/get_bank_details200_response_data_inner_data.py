# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetBankDetails200ResponseDataInnerData(BaseModel):
    """
    GetBankDetails200ResponseDataInnerData
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="Name of the city")
    iban: Optional[StrictStr] = Field(default=None, description="International Bank Account Number")
    postal: Optional[StrictStr] = Field(default=None, description="Postal code")
    bank_name: Optional[StrictStr] = Field(default=None, description="Name of the bank")
    full_name: Optional[StrictStr] = Field(default=None, description="Full name of the account holder")
    swift_bic: Optional[StrictStr] = Field(default=None, description="SWIFT/BIC code")
    country_code: Optional[StrictStr] = Field(default=None, description="Country code")
    address_line1: Optional[StrictStr] = Field(default=None, description="Address line 1")
    original_name: Optional[StrictStr] = Field(default=None, description="Original name of the account holder")
    province_state: Optional[StrictStr] = Field(default=None, description="Province or state")
    bank_country_code: Optional[StrictStr] = Field(default=None, description="Country code of the bank")
    __properties: ClassVar[List[str]] = ["city", "iban", "postal", "bank_name", "full_name", "swift_bic", "country_code", "address_line1", "original_name", "province_state", "bank_country_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBankDetails200ResponseDataInnerData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBankDetails200ResponseDataInnerData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "iban": obj.get("iban"),
            "postal": obj.get("postal"),
            "bank_name": obj.get("bank_name"),
            "full_name": obj.get("full_name"),
            "swift_bic": obj.get("swift_bic"),
            "country_code": obj.get("country_code"),
            "address_line1": obj.get("address_line1"),
            "original_name": obj.get("original_name"),
            "province_state": obj.get("province_state"),
            "bank_country_code": obj.get("bank_country_code")
        })
        return _obj


