# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GetInvoiceList200ResponseDataRowsInner(BaseModel):
    """
    GetInvoiceList200ResponseDataRowsInner
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of this resource as a UUID.")
    fee: Optional[StrictStr] = Field(default=None, description="Fee added to the invoice amount.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the invoice.")
    label: StrictStr = Field(description="Label or reference number of the invoice.")
    total: StrictStr = Field(description="Total invoice amount, including fees and VAT.")
    amount: Optional[StrictStr] = Field(default=None, description="Billed amount of the invoice.")
    status: StrictStr = Field(description="Current status of the invoice.")
    vat_id: Optional[StrictStr] = Field(description="VAT identification number related to the invoice.")
    paid_at: Optional[datetime] = Field(description="Date and time when the invoice was paid (ISO-8601 format).")
    currency: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="Three-letter currency code for the invoice.")
    deel_fee: Optional[StrictStr] = Field(default=None, description="Fee charged by Deel.")
    due_date: Optional[datetime] = Field(description="Date and time when the invoice is due (ISO-8601 format).")
    is_sealed: Optional[StrictBool] = Field(default=None, description="Indicates whether the invoice is sealed.")
    issued_at: Optional[datetime] = Field(description="Date and time when the invoice was issued (ISO-8601 format).")
    vat_total: Optional[StrictStr] = Field(description="Total amount of VAT charged on the invoice.")
    created_at: Optional[datetime] = Field(description="Date and time when the invoice was created (ISO-8601 format).")
    is_overdue: Optional[StrictBool] = Field(description="Indicates whether the invoice is overdue.")
    contract_id: StrictStr = Field(description="Unique identifier of the related contract.")
    is_offcycle: Optional[StrictBool] = Field(default=None, description="Indicates whether the invoice is off-cycle.")
    exchange_fee: Optional[StrictStr] = Field(default=None, description="Fee related to currency exchange for the invoice.")
    processed_at: Optional[datetime] = Field(default=None, description="Date and time when the invoice was processed (ISO-8601 format).")
    has_breakdown: Optional[StrictBool] = Field(default=None, description="Indicates whether the invoice includes a breakdown of items.")
    is_early_paid: Optional[StrictBool] = Field(default=None, description="Indicates whether the invoice was paid early.")
    payment_method: Optional[StrictStr] = Field(default=None, description="Method used to pay the invoice.")
    vat_percentage: Optional[StrictStr] = Field(description="Percentage of VAT charged on the invoice.")
    early_payout_fee: Optional[StrictStr] = Field(default=None, description="Fee charged for early payout of the invoice.")
    payment_currency: Optional[StrictStr] = Field(default=None, description="Currency in which the invoice was paid.")
    money_received_at: Optional[datetime] = Field(default=None, description="Date and time when the payment was received (ISO-8601 format).")
    payment_processed_at: Optional[datetime] = Field(default=None, description="Date and time when the payment was processed (ISO-8601 format).")
    is_paid_to_contractor: Optional[StrictBool] = Field(default=None, description="Indicates whether the invoice was paid to the contractor.")
    __properties: ClassVar[List[str]] = ["id", "fee", "type", "label", "total", "amount", "status", "vat_id", "paid_at", "currency", "deel_fee", "due_date", "is_sealed", "issued_at", "vat_total", "created_at", "is_overdue", "contract_id", "is_offcycle", "exchange_fee", "processed_at", "has_breakdown", "is_early_paid", "payment_method", "vat_percentage", "early_payout_fee", "payment_currency", "money_received_at", "payment_processed_at", "is_paid_to_contractor"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'paid', 'processing', 'canceled', 'skipped', 'failed', 'refunded']):
            raise ValueError("must be one of enum values ('pending', 'paid', 'processing', 'canceled', 'skipped', 'failed', 'refunded')")
        return value

    @field_validator('currency')
    def currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetInvoiceList200ResponseDataRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fee (nullable) is None
        # and model_fields_set contains the field
        if self.fee is None and "fee" in self.model_fields_set:
            _dict['fee'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if vat_id (nullable) is None
        # and model_fields_set contains the field
        if self.vat_id is None and "vat_id" in self.model_fields_set:
            _dict['vat_id'] = None

        # set to None if paid_at (nullable) is None
        # and model_fields_set contains the field
        if self.paid_at is None and "paid_at" in self.model_fields_set:
            _dict['paid_at'] = None

        # set to None if deel_fee (nullable) is None
        # and model_fields_set contains the field
        if self.deel_fee is None and "deel_fee" in self.model_fields_set:
            _dict['deel_fee'] = None

        # set to None if due_date (nullable) is None
        # and model_fields_set contains the field
        if self.due_date is None and "due_date" in self.model_fields_set:
            _dict['due_date'] = None

        # set to None if is_sealed (nullable) is None
        # and model_fields_set contains the field
        if self.is_sealed is None and "is_sealed" in self.model_fields_set:
            _dict['is_sealed'] = None

        # set to None if issued_at (nullable) is None
        # and model_fields_set contains the field
        if self.issued_at is None and "issued_at" in self.model_fields_set:
            _dict['issued_at'] = None

        # set to None if vat_total (nullable) is None
        # and model_fields_set contains the field
        if self.vat_total is None and "vat_total" in self.model_fields_set:
            _dict['vat_total'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if is_overdue (nullable) is None
        # and model_fields_set contains the field
        if self.is_overdue is None and "is_overdue" in self.model_fields_set:
            _dict['is_overdue'] = None

        # set to None if is_offcycle (nullable) is None
        # and model_fields_set contains the field
        if self.is_offcycle is None and "is_offcycle" in self.model_fields_set:
            _dict['is_offcycle'] = None

        # set to None if exchange_fee (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_fee is None and "exchange_fee" in self.model_fields_set:
            _dict['exchange_fee'] = None

        # set to None if processed_at (nullable) is None
        # and model_fields_set contains the field
        if self.processed_at is None and "processed_at" in self.model_fields_set:
            _dict['processed_at'] = None

        # set to None if has_breakdown (nullable) is None
        # and model_fields_set contains the field
        if self.has_breakdown is None and "has_breakdown" in self.model_fields_set:
            _dict['has_breakdown'] = None

        # set to None if is_early_paid (nullable) is None
        # and model_fields_set contains the field
        if self.is_early_paid is None and "is_early_paid" in self.model_fields_set:
            _dict['is_early_paid'] = None

        # set to None if payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method is None and "payment_method" in self.model_fields_set:
            _dict['payment_method'] = None

        # set to None if vat_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.vat_percentage is None and "vat_percentage" in self.model_fields_set:
            _dict['vat_percentage'] = None

        # set to None if early_payout_fee (nullable) is None
        # and model_fields_set contains the field
        if self.early_payout_fee is None and "early_payout_fee" in self.model_fields_set:
            _dict['early_payout_fee'] = None

        # set to None if money_received_at (nullable) is None
        # and model_fields_set contains the field
        if self.money_received_at is None and "money_received_at" in self.model_fields_set:
            _dict['money_received_at'] = None

        # set to None if payment_processed_at (nullable) is None
        # and model_fields_set contains the field
        if self.payment_processed_at is None and "payment_processed_at" in self.model_fields_set:
            _dict['payment_processed_at'] = None

        # set to None if is_paid_to_contractor (nullable) is None
        # and model_fields_set contains the field
        if self.is_paid_to_contractor is None and "is_paid_to_contractor" in self.model_fields_set:
            _dict['is_paid_to_contractor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetInvoiceList200ResponseDataRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "fee": obj.get("fee"),
            "type": obj.get("type"),
            "label": obj.get("label"),
            "total": obj.get("total"),
            "amount": obj.get("amount"),
            "status": obj.get("status"),
            "vat_id": obj.get("vat_id"),
            "paid_at": obj.get("paid_at"),
            "currency": obj.get("currency"),
            "deel_fee": obj.get("deel_fee"),
            "due_date": obj.get("due_date"),
            "is_sealed": obj.get("is_sealed"),
            "issued_at": obj.get("issued_at"),
            "vat_total": obj.get("vat_total"),
            "created_at": obj.get("created_at"),
            "is_overdue": obj.get("is_overdue"),
            "contract_id": obj.get("contract_id"),
            "is_offcycle": obj.get("is_offcycle"),
            "exchange_fee": obj.get("exchange_fee"),
            "processed_at": obj.get("processed_at"),
            "has_breakdown": obj.get("has_breakdown"),
            "is_early_paid": obj.get("is_early_paid"),
            "payment_method": obj.get("payment_method"),
            "vat_percentage": obj.get("vat_percentage"),
            "early_payout_fee": obj.get("early_payout_fee"),
            "payment_currency": obj.get("payment_currency"),
            "money_received_at": obj.get("money_received_at"),
            "payment_processed_at": obj.get("payment_processed_at"),
            "is_paid_to_contractor": obj.get("is_paid_to_contractor")
        })
        return _obj


