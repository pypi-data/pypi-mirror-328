# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.get_benefit_employee200_response_addresses_inner import GetBenefitEmployee200ResponseAddressesInner
from dima_sdk.models.get_benefit_employee200_response_contracts_inner import GetBenefitEmployee200ResponseContractsInner
from dima_sdk.models.get_benefit_employee200_response_phones_inner import GetBenefitEmployee200ResponsePhonesInner
from typing import Optional, Set
from typing_extensions import Self

class GetBenefitEmployee200Response(BaseModel):
    """
    GetBenefitEmployee200Response
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the employee.")
    phones: Optional[List[GetBenefitEmployee200ResponsePhonesInner]] = Field(default=None, description="List of phone numbers associated with the employee.")
    status: Optional[StrictStr] = Field(default=None, description="The employee status given his contracts.")
    addresses: Optional[List[GetBenefitEmployee200ResponseAddressesInner]] = Field(default=None, description="List of addresses associated with the employee.")
    contracts: Optional[List[GetBenefitEmployee200ResponseContractsInner]] = Field(default=None, description="List of contracts associated with the employee.")
    hire_date: Optional[StrictStr] = Field(default=None, description="Employee date of first contract.")
    work_email: Optional[StrictStr] = Field(default=None, description="Employee work email address.")
    date_of_birth: Optional[StrictStr] = Field(default=None, description="Employee date of birth.")
    marital_status: Optional[StrictStr] = Field(default=None, description="The marital status of the employee.")
    personal_email: Optional[StrictStr] = Field(default=None, description="Employee personal email address.")
    document_number: Optional[StrictStr] = Field(default=None, description="Document number of employee identification document.")
    legal_last_name: Optional[StrictStr] = Field(default=None, description="Employee legal last name.")
    legal_first_name: Optional[StrictStr] = Field(default=None, description="Employee legal first name.")
    legal_middle_name: Optional[StrictStr] = Field(default=None, description="Employee legal middle name.")
    takes_owners_draw: Optional[StrictBool] = Field(default=None, description="Indicates if the employee takes an owner draw.")
    ownership_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of business ownership by the employee.")
    __properties: ClassVar[List[str]] = ["id", "phones", "status", "addresses", "contracts", "hire_date", "work_email", "date_of_birth", "marital_status", "personal_email", "document_number", "legal_last_name", "legal_first_name", "legal_middle_name", "takes_owners_draw", "ownership_percentage"]

    @field_validator('marital_status')
    def marital_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Common Law', 'Divorced', 'Married', 'Registered Partnership', 'Separated', 'Single', 'Widowed']):
            raise ValueError("must be one of enum values ('Common Law', 'Divorced', 'Married', 'Registered Partnership', 'Separated', 'Single', 'Widowed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBenefitEmployee200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in phones (list)
        _items = []
        if self.phones:
            for _item_phones in self.phones:
                if _item_phones:
                    _items.append(_item_phones.to_dict())
            _dict['phones'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contracts (list)
        _items = []
        if self.contracts:
            for _item_contracts in self.contracts:
                if _item_contracts:
                    _items.append(_item_contracts.to_dict())
            _dict['contracts'] = _items
        # set to None if hire_date (nullable) is None
        # and model_fields_set contains the field
        if self.hire_date is None and "hire_date" in self.model_fields_set:
            _dict['hire_date'] = None

        # set to None if work_email (nullable) is None
        # and model_fields_set contains the field
        if self.work_email is None and "work_email" in self.model_fields_set:
            _dict['work_email'] = None

        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['date_of_birth'] = None

        # set to None if personal_email (nullable) is None
        # and model_fields_set contains the field
        if self.personal_email is None and "personal_email" in self.model_fields_set:
            _dict['personal_email'] = None

        # set to None if legal_middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.legal_middle_name is None and "legal_middle_name" in self.model_fields_set:
            _dict['legal_middle_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBenefitEmployee200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "phones": [GetBenefitEmployee200ResponsePhonesInner.from_dict(_item) for _item in obj["phones"]] if obj.get("phones") is not None else None,
            "status": obj.get("status"),
            "addresses": [GetBenefitEmployee200ResponseAddressesInner.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "contracts": [GetBenefitEmployee200ResponseContractsInner.from_dict(_item) for _item in obj["contracts"]] if obj.get("contracts") is not None else None,
            "hire_date": obj.get("hire_date"),
            "work_email": obj.get("work_email"),
            "date_of_birth": obj.get("date_of_birth"),
            "marital_status": obj.get("marital_status"),
            "personal_email": obj.get("personal_email"),
            "document_number": obj.get("document_number"),
            "legal_last_name": obj.get("legal_last_name"),
            "legal_first_name": obj.get("legal_first_name"),
            "legal_middle_name": obj.get("legal_middle_name"),
            "takes_owners_draw": obj.get("takes_owners_draw"),
            "ownership_percentage": obj.get("ownership_percentage")
        })
        return _obj


