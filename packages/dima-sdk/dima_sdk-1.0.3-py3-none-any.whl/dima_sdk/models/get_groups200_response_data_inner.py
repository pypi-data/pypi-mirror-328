# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetGroups200ResponseDataInner(BaseModel):
    """
    GetGroups200ResponseDataInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the group.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the group.")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the group (active or archived).")
    managers: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of managers associated with the group.")
    created_at: Optional[datetime] = Field(default=None, description="The timestamp when the group was created.")
    updated_at: Optional[datetime] = Field(default=None, description="The timestamp when the group was last updated.")
    archived_at: Optional[datetime] = Field(default=None, description="The timestamp when the group was archived (if applicable).")
    external_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Extra information about the group.")
    __properties: ClassVar[List[str]] = ["id", "name", "status", "managers", "created_at", "updated_at", "archived_at", "external_metadata"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'archived']):
            raise ValueError("must be one of enum values ('active', 'archived')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGroups200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if archived_at (nullable) is None
        # and model_fields_set contains the field
        if self.archived_at is None and "archived_at" in self.model_fields_set:
            _dict['archived_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGroups200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "managers": obj.get("managers"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "archived_at": obj.get("archived_at"),
            "external_metadata": obj.get("external_metadata")
        })
        return _obj


