# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.get_payout_methods200_response_data_address import GetPayoutMethods200ResponseDataAddress
from typing import Optional, Set
from typing_extensions import Self

class CreateBankTransferMethodRequestData(BaseModel):
    """
    CreateBankTransferMethodRequestData
    """ # noqa: E501
    address: GetPayoutMethods200ResponseDataAddress
    payload: Dict[str, Any] = Field(description="Dynamic properties based on selected option. For example, if `selectedOption` is `swift_code`, payload may include `swiftCode`, `accountHolderName`, and `accountNumber`.")
    is_default: Optional[StrictBool] = Field(default=None, description="Specifies if the method is the default payout method - if true, autowithdrawal will be enabled for the contractor using this method")
    method_name: Optional[StrictStr] = Field(default=None, description="Name for method")
    payment_method: StrictStr = Field(description="Specifies the type of payment method")
    selected_option: Optional[StrictStr] = Field(default=None, description="Specifies the type of bank transfer method. Maps from requirements type field", alias="selectedOption")
    __properties: ClassVar[List[str]] = ["address", "payload", "is_default", "method_name", "payment_method", "selectedOption"]

    @field_validator('payment_method')
    def payment_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['bank_transfer']):
            raise ValueError("must be one of enum values ('bank_transfer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateBankTransferMethodRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateBankTransferMethodRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": GetPayoutMethods200ResponseDataAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "payload": obj.get("payload"),
            "is_default": obj.get("is_default"),
            "method_name": obj.get("method_name"),
            "payment_method": obj.get("payment_method"),
            "selectedOption": obj.get("selectedOption")
        })
        return _obj


