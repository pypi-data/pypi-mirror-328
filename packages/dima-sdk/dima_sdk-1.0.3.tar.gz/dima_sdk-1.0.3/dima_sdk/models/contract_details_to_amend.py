# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_sdk.models.work_statement_cycle_end_type_enum import WorkStatementCycleEndTypeEnum
from dima_sdk.models.work_statement_cycle_scale_enum import WorkStatementCycleScaleEnum
from dima_sdk.models.work_statement_payment_due_type_enum import WorkStatementPaymentDueTypeEnum
from dima_sdk.models.work_statement_scale_enum import WorkStatementScaleEnum
from typing import Optional, Set
from typing_extensions import Self

class ContractDetailsToAmend(BaseModel):
    """
    You can specify any combination of data points that need changing.
    """ # noqa: E501
    amount: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = None
    currency_code: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = None
    scale: Optional[WorkStatementScaleEnum] = None
    effective_date: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")
    first_payment_date: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")
    first_payment: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    frequency: Optional[WorkStatementCycleScaleEnum] = None
    cycle_end: Optional[Union[Annotated[float, Field(le=31, strict=True, ge=1)], Annotated[int, Field(le=31, strict=True, ge=1)]]] = None
    cycle_end_type: Optional[WorkStatementCycleEndTypeEnum] = None
    payment_due_type: Optional[WorkStatementPaymentDueTypeEnum] = WorkStatementPaymentDueTypeEnum.REGULAR
    payment_due_days: Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]] = None
    pay_before_weekends: Optional[StrictBool] = Field(default=None, description="If the payment due is on a weekend, pay on Friday.")
    job_title_name: Optional[StrictStr] = Field(default=None, description="You can enter new job title.")
    job_title_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this resource.")
    seniority_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this resource.")
    special_clause: Optional[StrictStr] = Field(default=None, description="Text to describe any special clause in contract.")
    scope_of_work: Optional[StrictStr] = Field(default=None, description="Text to describe the scope of work of the contract.")
    __properties: ClassVar[List[str]] = ["amount", "currency_code", "scale", "effective_date", "first_payment_date", "first_payment", "frequency", "cycle_end", "cycle_end_type", "payment_due_type", "payment_due_days", "pay_before_weekends", "job_title_name", "job_title_id", "seniority_id", "special_clause", "scope_of_work"]

    @field_validator('currency_code')
    def currency_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractDetailsToAmend from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractDetailsToAmend from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "currency_code": obj.get("currency_code"),
            "scale": obj.get("scale"),
            "effective_date": obj.get("effective_date"),
            "first_payment_date": obj.get("first_payment_date"),
            "first_payment": obj.get("first_payment"),
            "frequency": obj.get("frequency"),
            "cycle_end": obj.get("cycle_end"),
            "cycle_end_type": obj.get("cycle_end_type"),
            "payment_due_type": obj.get("payment_due_type") if obj.get("payment_due_type") is not None else WorkStatementPaymentDueTypeEnum.REGULAR,
            "payment_due_days": obj.get("payment_due_days"),
            "pay_before_weekends": obj.get("pay_before_weekends"),
            "job_title_name": obj.get("job_title_name"),
            "job_title_id": obj.get("job_title_id"),
            "seniority_id": obj.get("seniority_id"),
            "special_clause": obj.get("special_clause"),
            "scope_of_work": obj.get("scope_of_work")
        })
        return _obj


