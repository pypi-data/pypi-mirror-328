# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.create_eor_contract_request_data_benefits_inner import CreateEorContractRequestDataBenefitsInner
from dima_sdk.models.create_eor_contract_request_data_client import CreateEorContractRequestDataClient
from dima_sdk.models.create_eor_contract_request_data_compensation_details import CreateEorContractRequestDataCompensationDetails
from dima_sdk.models.create_eor_contract_request_data_employee import CreateEorContractRequestDataEmployee
from dima_sdk.models.create_eor_contract_request_data_employment import CreateEorContractRequestDataEmployment
from dima_sdk.models.create_eor_contract_request_data_pension import CreateEorContractRequestDataPension
from dima_sdk.models.create_eor_contract_request_data_quote_additional_fields import CreateEorContractRequestDataQuoteAdditionalFields
from dima_sdk.models.create_eor_contract_request_data_seniority import CreateEorContractRequestDataSeniority
from typing import Optional, Set
from typing_extensions import Self

class CreateEorContractRequestData(BaseModel):
    """
    CreateEorContractRequestData
    """ # noqa: E501
    client: CreateEorContractRequestDataClient
    pension: Optional[CreateEorContractRequestDataPension] = None
    benefits: Optional[List[CreateEorContractRequestDataBenefitsInner]] = None
    employee: CreateEorContractRequestDataEmployee
    job_title: StrictStr = Field(description="Employee's job title.")
    seniority: CreateEorContractRequestDataSeniority
    employment: CreateEorContractRequestDataEmployment
    health_plan_id: Optional[StrictStr] = Field(default=None, description="Healthcare plan id. You can see available healthcare plans in the country guide endpoint.")
    compensation_details: CreateEorContractRequestDataCompensationDetails
    quote_additional_fields: Optional[CreateEorContractRequestDataQuoteAdditionalFields] = None
    __properties: ClassVar[List[str]] = ["client", "pension", "benefits", "employee", "job_title", "seniority", "employment", "health_plan_id", "compensation_details", "quote_additional_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateEorContractRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pension
        if self.pension:
            _dict['pension'] = self.pension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in benefits (list)
        _items = []
        if self.benefits:
            for _item_benefits in self.benefits:
                if _item_benefits:
                    _items.append(_item_benefits.to_dict())
            _dict['benefits'] = _items
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seniority
        if self.seniority:
            _dict['seniority'] = self.seniority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employment
        if self.employment:
            _dict['employment'] = self.employment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensation_details
        if self.compensation_details:
            _dict['compensation_details'] = self.compensation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_additional_fields
        if self.quote_additional_fields:
            _dict['quote_additional_fields'] = self.quote_additional_fields.to_dict()
        # set to None if quote_additional_fields (nullable) is None
        # and model_fields_set contains the field
        if self.quote_additional_fields is None and "quote_additional_fields" in self.model_fields_set:
            _dict['quote_additional_fields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateEorContractRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client": CreateEorContractRequestDataClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "pension": CreateEorContractRequestDataPension.from_dict(obj["pension"]) if obj.get("pension") is not None else None,
            "benefits": [CreateEorContractRequestDataBenefitsInner.from_dict(_item) for _item in obj["benefits"]] if obj.get("benefits") is not None else None,
            "employee": CreateEorContractRequestDataEmployee.from_dict(obj["employee"]) if obj.get("employee") is not None else None,
            "job_title": obj.get("job_title"),
            "seniority": CreateEorContractRequestDataSeniority.from_dict(obj["seniority"]) if obj.get("seniority") is not None else None,
            "employment": CreateEorContractRequestDataEmployment.from_dict(obj["employment"]) if obj.get("employment") is not None else None,
            "health_plan_id": obj.get("health_plan_id"),
            "compensation_details": CreateEorContractRequestDataCompensationDetails.from_dict(obj["compensation_details"]) if obj.get("compensation_details") is not None else None,
            "quote_additional_fields": CreateEorContractRequestDataQuoteAdditionalFields.from_dict(obj["quote_additional_fields"]) if obj.get("quote_additional_fields") is not None else None
        })
        return _obj


