# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetConsent200ResponseData(BaseModel):
    """
    GetConsent200ResponseData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the consent.")
    scope: Optional[StrictStr] = Field(default=None, description="Scope of the consent.")
    state: Optional[StrictStr] = Field(default=None, description="State of the consent.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the consent.")
    user_id: Optional[StrictStr] = Field(default=None, description="User ID associated with the consent.")
    client_id: Optional[StrictStr] = Field(default=None, description="Client ID associated with the consent.")
    user_name: Optional[StrictStr] = Field(default=None, description="User name associated with the consent.")
    created_at: Optional[StrictStr] = Field(default=None, description="Creation date for the consent.")
    expires_at: Optional[StrictStr] = Field(default=None, description="Expiration date for the consent.")
    profile_id: Optional[StrictStr] = Field(default=None, description="Profile ID associated with the consent.")
    updated_at: Optional[StrictStr] = Field(default=None, description="Update date for the consent.")
    user_email: Optional[StrictStr] = Field(default=None, description="User email associated with the consent.")
    redirect_uri: Optional[StrictStr] = Field(default=None, description="Redirect URI for the consent.")
    organization_id: Optional[StrictStr] = Field(default=None, description="Organization ID associated with the consent.")
    __properties: ClassVar[List[str]] = ["id", "scope", "state", "status", "user_id", "client_id", "user_name", "created_at", "expires_at", "profile_id", "updated_at", "user_email", "redirect_uri", "organization_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetConsent200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if user_name (nullable) is None
        # and model_fields_set contains the field
        if self.user_name is None and "user_name" in self.model_fields_set:
            _dict['user_name'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profile_id'] = None

        # set to None if user_email (nullable) is None
        # and model_fields_set contains the field
        if self.user_email is None and "user_email" in self.model_fields_set:
            _dict['user_email'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organization_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetConsent200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "scope": obj.get("scope"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "user_id": obj.get("user_id"),
            "client_id": obj.get("client_id"),
            "user_name": obj.get("user_name"),
            "created_at": obj.get("created_at"),
            "expires_at": obj.get("expires_at"),
            "profile_id": obj.get("profile_id"),
            "updated_at": obj.get("updated_at"),
            "user_email": obj.get("user_email"),
            "redirect_uri": obj.get("redirect_uri"),
            "organization_id": obj.get("organization_id")
        })
        return _obj


