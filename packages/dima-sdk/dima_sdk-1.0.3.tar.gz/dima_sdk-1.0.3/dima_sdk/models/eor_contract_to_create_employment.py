# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EorContractToCreateEmployment(BaseModel):
    """
    EorContractToCreateEmployment
    """ # noqa: E501
    country: Annotated[str, Field(min_length=2, strict=True, max_length=2)] = Field(description="Country code.")
    state: Optional[StrictStr] = Field(default=None, description="State code of the state/province where the this person will be employed.")
    type: Optional[StrictStr] = Field(default=None, description="Is it a full-time contract or a part-time contract?")
    work_visa_required: StrictBool = Field(description="Do you require Deel to apply for work visa for this person?")
    start_date: date = Field(description="Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")
    end_date: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example 2022-12-31.")
    probation_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of probation days.")
    scope_of_work: Optional[StrictStr] = Field(default=None, description="Scope of work description.")
    time_off_type: Optional[StrictStr] = Field(default=None, description="If you want to use standard number of holidays for this employee, choose \"STANDARD\". If you want to enter a specific number of holidays, choose \"SPECIFIC\" and enter the number of days in the holidays field.")
    holidays: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the number of holidays. Leave this field blank if you are chooseing \"STANDARD\" time_off_type.")
    __properties: ClassVar[List[str]] = ["country", "state", "type", "work_visa_required", "start_date", "end_date", "probation_period", "scope_of_work", "time_off_type", "holidays"]

    @field_validator('country')
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Full-time', 'Part-time']):
            raise ValueError("must be one of enum values ('Full-time', 'Part-time')")
        return value

    @field_validator('time_off_type')
    def time_off_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'SPECIFIC']):
            raise ValueError("must be one of enum values ('STANDARD', 'SPECIFIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorContractToCreateEmployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        # set to None if probation_period (nullable) is None
        # and model_fields_set contains the field
        if self.probation_period is None and "probation_period" in self.model_fields_set:
            _dict['probation_period'] = None

        # set to None if holidays (nullable) is None
        # and model_fields_set contains the field
        if self.holidays is None and "holidays" in self.model_fields_set:
            _dict['holidays'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorContractToCreateEmployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "work_visa_required": obj.get("work_visa_required") if obj.get("work_visa_required") is not None else False,
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "probation_period": obj.get("probation_period"),
            "scope_of_work": obj.get("scope_of_work"),
            "time_off_type": obj.get("time_off_type"),
            "holidays": obj.get("holidays")
        })
        return _obj


