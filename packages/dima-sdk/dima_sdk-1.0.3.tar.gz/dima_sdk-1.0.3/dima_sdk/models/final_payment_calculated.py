# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from dima_sdk.models.final_payment_calculated_last_cycle import FinalPaymentCalculatedLastCycle
from typing import Optional, Set
from typing_extensions import Self

class FinalPaymentCalculated(BaseModel):
    """
    FinalPaymentCalculated
    """ # noqa: E501
    daily_rate: StrictStr = Field(description="The daily rate paid.")
    total: StrictStr = Field(description="Total amount to pay.")
    remaining_days: StrictStr = Field(description="Dais remaining to end the contract.")
    last_cycle: FinalPaymentCalculatedLastCycle
    calculation_type: StrictStr = Field(description="Either works days or calendar days")
    workweek_start: Union[StrictFloat, StrictInt] = Field(description="The day the work week starts, 0 to 6")
    workweek_end: Union[StrictFloat, StrictInt] = Field(description="The day the work week starts, 0 to 6")
    __properties: ClassVar[List[str]] = ["daily_rate", "total", "remaining_days", "last_cycle", "calculation_type", "workweek_start", "workweek_end"]

    @field_validator('calculation_type')
    def calculation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CUSTOM_AMOUNT', 'WORK_DAYS', 'CALENDAR_DAYS', 'FULL_AMOUNT']):
            raise ValueError("must be one of enum values ('CUSTOM_AMOUNT', 'WORK_DAYS', 'CALENDAR_DAYS', 'FULL_AMOUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinalPaymentCalculated from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_cycle
        if self.last_cycle:
            _dict['last_cycle'] = self.last_cycle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinalPaymentCalculated from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "daily_rate": obj.get("daily_rate"),
            "total": obj.get("total"),
            "remaining_days": obj.get("remaining_days"),
            "last_cycle": FinalPaymentCalculatedLastCycle.from_dict(obj["last_cycle"]) if obj.get("last_cycle") is not None else None,
            "calculation_type": obj.get("calculation_type"),
            "workweek_start": obj.get("workweek_start") if obj.get("workweek_start") is not None else 1,
            "workweek_end": obj.get("workweek_end") if obj.get("workweek_end") is not None else 5
        })
        return _obj


