# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.get_background_checks_by_contract_id200_response_data_package import GetBackgroundChecksByContractId200ResponseDataPackage
from typing import Optional, Set
from typing_extensions import Self

class GetBackgroundChecksByContractId200ResponseData(BaseModel):
    """
    GetBackgroundChecksByContractId200ResponseData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the background check.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the background check.")
    result: Optional[StrictStr] = Field(default=None, description="The result of the background check.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the background check.")
    package: Optional[GetBackgroundChecksByContractId200ResponseDataPackage] = None
    created_at: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    contract_id: Optional[StrictStr] = Field(default=None, description="ID of the contract")
    is_complete: Optional[StrictBool] = Field(default=None, description="Whether the background check is complete.")
    completed_at: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    candidate_email: Optional[StrictStr] = Field(default=None, description="Email of worker")
    third_party_name: Optional[StrictStr] = Field(default=None, description="Third-party name of the background check.")
    __properties: ClassVar[List[str]] = ["id", "name", "result", "status", "package", "created_at", "contract_id", "is_complete", "completed_at", "candidate_email", "third_party_name"]

    @field_validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLEARED', 'REVIEW']):
            raise ValueError("must be one of enum values ('CLEARED', 'REVIEW')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WAITING_CONTRACTOR_SIGNATURE', 'READY_TO_BE_REQUESTED', 'REQUESTED', 'IN_PROGRESS', 'DRAFT', 'COMPLETE', 'CANCELLED']):
            raise ValueError("must be one of enum values ('WAITING_CONTRACTOR_SIGNATURE', 'READY_TO_BE_REQUESTED', 'REQUESTED', 'IN_PROGRESS', 'DRAFT', 'COMPLETE', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBackgroundChecksByContractId200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of package
        if self.package:
            _dict['package'] = self.package.to_dict()
        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict['result'] = None

        # set to None if package (nullable) is None
        # and model_fields_set contains the field
        if self.package is None and "package" in self.model_fields_set:
            _dict['package'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBackgroundChecksByContractId200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "result": obj.get("result"),
            "status": obj.get("status"),
            "package": GetBackgroundChecksByContractId200ResponseDataPackage.from_dict(obj["package"]) if obj.get("package") is not None else None,
            "created_at": obj.get("created_at"),
            "contract_id": obj.get("contract_id"),
            "is_complete": obj.get("is_complete"),
            "completed_at": obj.get("completed_at"),
            "candidate_email": obj.get("candidate_email"),
            "third_party_name": obj.get("third_party_name")
        })
        return _obj


