# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_sdk.models.eor_resignation_request_request_used_time_off import EorResignationRequestRequestUsedTimeOff
from dima_sdk.models.eor_termination_request_request_attachments_inner import EorTerminationRequestRequestAttachmentsInner
from typing import Optional, Set
from typing_extensions import Self

class EorResignationRequestRequest(BaseModel):
    """
    EorResignationRequestRequest
    """ # noqa: E501
    reason: StrictStr = Field(description="Reason why the contract is being terminated")
    attachments: Optional[List[EorTerminationRequestRequestAttachmentsInner]] = Field(default=None, description="Any document that is important for the request to terminate the contract")
    is_sensitive: Optional[StrictBool] = Field(default=None, description="Defines whether the termination is sensitive. In this case, only the person requesting the termination will be able to view the termination, receive emails or notifications.")
    reason_detail: Optional[Annotated[str, Field(strict=True, max_length=5000)]] = Field(default=None, description="Optional field to describe the reason behind the resignation request")
    used_time_off: EorResignationRequestRequestUsedTimeOff
    severance_type: Optional[StrictStr] = Field(default=None, description="The type of severance selected by the client. It's an optional field")
    desired_end_date: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The desired end date. If the date is not provided, it will be selected by HRX the closest date possible")
    severance_amount: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The amount of severance needed")
    additional_reason: Optional[StrictStr] = Field(default=None, description="An additional reason can be provided in case the reason selected is MOVING_EMPLOYEE_TO_INTERNAL_ENTITY")
    termination_notes: Optional[List[Annotated[str, Field(strict=True, max_length=5000)]]] = Field(default=None, description="Additional notes can be provided regarding the termination for Deel, like questions and doubts")
    eligible_for_rehire: Optional[StrictStr] = Field(default=None, description="Parameter to inform whether it would be possible for the client to hire the employee again")
    termination_impact_id: Optional[StrictStr] = Field(default=None, description="Termination impact data if there is some configured on HR module")
    eligible_for_rehire_reason: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Describe if the option DONT_KNOW was selected on eligibleForRehire")
    custom_termination_reason_id: Optional[StrictStr] = Field(default=None, description="Custom termination reason ID. A custom termination reason can be added on Client HR module")
    is_employee_staying_with_deel: Optional[StrictBool] = Field(description="Defines if employee will keep using Deel as provider")
    __properties: ClassVar[List[str]] = ["reason", "attachments", "is_sensitive", "reason_detail", "used_time_off", "severance_type", "desired_end_date", "severance_amount", "additional_reason", "termination_notes", "eligible_for_rehire", "termination_impact_id", "eligible_for_rehire_reason", "custom_termination_reason_id", "is_employee_staying_with_deel"]

    @field_validator('reason')
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EMPLOYEE_IS_MOVING_TO_ANOTHER_COUNTRY', 'MOVING_EMPLOYEE_TO_INTERNAL_ENTITY', 'MOVING_EMPLOYEE_TO_DEEL_PEO', 'EMPLOYEE_FOUND_ANOTHER_JOB', 'EMPLOYEE_NOT_HAPPY_WITH_BENEFITS', 'EMPLOYEE_NOT_HAPPY_WITH_SALARY', 'EMPLOYEE_NOT_HAPPY_WITH_THE_ROLE', 'EMPLOYEE_NOT_HAPPY_WITH_COMPANY_CULTURE', 'EMPLOYEE_NOT_HAPPY_WITH_DEEL', 'EMPLOYEE_PROJECT_ENDED', 'EMPLOYEE_SWITCHING_TO_OTHER_EOR_PROVIDER', 'EMPLOYEE_LEFT_ROLE_FOR_PERSONAL_MATTERS', 'EMPLOYEE_MOVING_FROM_EOR_TO_CONTRACTOR_OR_FREELANCE', 'WORKER_TYPE_CHANGE', 'DEEL_COLLECTIONS', 'EMPLOYEE_DID_NOT_TAKE_THE_OFFER', 'EMPLOYEE_PROVIDED_NO_REASON', 'OTHER_BUSINESS_REASONS']):
            raise ValueError("must be one of enum values ('EMPLOYEE_IS_MOVING_TO_ANOTHER_COUNTRY', 'MOVING_EMPLOYEE_TO_INTERNAL_ENTITY', 'MOVING_EMPLOYEE_TO_DEEL_PEO', 'EMPLOYEE_FOUND_ANOTHER_JOB', 'EMPLOYEE_NOT_HAPPY_WITH_BENEFITS', 'EMPLOYEE_NOT_HAPPY_WITH_SALARY', 'EMPLOYEE_NOT_HAPPY_WITH_THE_ROLE', 'EMPLOYEE_NOT_HAPPY_WITH_COMPANY_CULTURE', 'EMPLOYEE_NOT_HAPPY_WITH_DEEL', 'EMPLOYEE_PROJECT_ENDED', 'EMPLOYEE_SWITCHING_TO_OTHER_EOR_PROVIDER', 'EMPLOYEE_LEFT_ROLE_FOR_PERSONAL_MATTERS', 'EMPLOYEE_MOVING_FROM_EOR_TO_CONTRACTOR_OR_FREELANCE', 'WORKER_TYPE_CHANGE', 'DEEL_COLLECTIONS', 'EMPLOYEE_DID_NOT_TAKE_THE_OFFER', 'EMPLOYEE_PROVIDED_NO_REASON', 'OTHER_BUSINESS_REASONS')")
        return value

    @field_validator('severance_type')
    def severance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DAYS', 'WEEKS', 'MONTHS', 'CASH']):
            raise ValueError("must be one of enum values ('DAYS', 'WEEKS', 'MONTHS', 'CASH')")
        return value

    @field_validator('desired_end_date')
    def desired_end_date_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}$/")
        return value

    @field_validator('additional_reason')
    def additional_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MOVING_TO_INTERNAL_ENTITY_WITH_DEEL_GLOBAL_PAYROLL', 'MOVING_TO_INTERNAL_ENTITY_WITH_OTHER_PROVIDER']):
            raise ValueError("must be one of enum values ('MOVING_TO_INTERNAL_ENTITY_WITH_DEEL_GLOBAL_PAYROLL', 'MOVING_TO_INTERNAL_ENTITY_WITH_OTHER_PROVIDER')")
        return value

    @field_validator('eligible_for_rehire')
    def eligible_for_rehire_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['YES', 'NO', 'DONT_KNOW']):
            raise ValueError("must be one of enum values ('YES', 'NO', 'DONT_KNOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorResignationRequestRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of used_time_off
        if self.used_time_off:
            _dict['used_time_off'] = self.used_time_off.to_dict()
        # set to None if additional_reason (nullable) is None
        # and model_fields_set contains the field
        if self.additional_reason is None and "additional_reason" in self.model_fields_set:
            _dict['additional_reason'] = None

        # set to None if eligible_for_rehire (nullable) is None
        # and model_fields_set contains the field
        if self.eligible_for_rehire is None and "eligible_for_rehire" in self.model_fields_set:
            _dict['eligible_for_rehire'] = None

        # set to None if eligible_for_rehire_reason (nullable) is None
        # and model_fields_set contains the field
        if self.eligible_for_rehire_reason is None and "eligible_for_rehire_reason" in self.model_fields_set:
            _dict['eligible_for_rehire_reason'] = None

        # set to None if custom_termination_reason_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_termination_reason_id is None and "custom_termination_reason_id" in self.model_fields_set:
            _dict['custom_termination_reason_id'] = None

        # set to None if is_employee_staying_with_deel (nullable) is None
        # and model_fields_set contains the field
        if self.is_employee_staying_with_deel is None and "is_employee_staying_with_deel" in self.model_fields_set:
            _dict['is_employee_staying_with_deel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorResignationRequestRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reason": obj.get("reason"),
            "attachments": [EorTerminationRequestRequestAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "is_sensitive": obj.get("is_sensitive"),
            "reason_detail": obj.get("reason_detail"),
            "used_time_off": EorResignationRequestRequestUsedTimeOff.from_dict(obj["used_time_off"]) if obj.get("used_time_off") is not None else None,
            "severance_type": obj.get("severance_type"),
            "desired_end_date": obj.get("desired_end_date"),
            "severance_amount": obj.get("severance_amount"),
            "additional_reason": obj.get("additional_reason"),
            "termination_notes": obj.get("termination_notes"),
            "eligible_for_rehire": obj.get("eligible_for_rehire"),
            "termination_impact_id": obj.get("termination_impact_id"),
            "eligible_for_rehire_reason": obj.get("eligible_for_rehire_reason"),
            "custom_termination_reason_id": obj.get("custom_termination_reason_id"),
            "is_employee_staying_with_deel": obj.get("is_employee_staying_with_deel")
        })
        return _obj


