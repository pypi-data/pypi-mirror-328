# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateTimeoff(BaseModel):
    """
    CreateTimeoff
    """ # noqa: E501
    type: StrictStr = Field(description="Time off type.")
    start_date: Optional[StrictStr] = Field(default=None, description="Start date of employee's time off.")
    end_date: Optional[StrictStr] = Field(default=None, description="End date of employee's time off.")
    with_multiple_dates: StrictBool = Field(description="If true, then multiple time off days were requested. You must supply a start and end date. If false, end date is ignored")
    reason: Optional[StrictStr] = Field(default=None, description="Description for employee's time off.")
    is_start_date_half_day: Optional[StrictBool] = Field(default=None, description="Is the start day a half day?")
    is_end_date_half_day: Optional[StrictBool] = Field(default=None, description="Is the start day a half day?")
    other_timeoff_name: Optional[StrictStr] = Field(default=None, description="Custom name for this time off.")
    __properties: ClassVar[List[str]] = ["type", "start_date", "end_date", "with_multiple_dates", "reason", "is_start_date_half_day", "is_end_date_half_day", "other_timeoff_name"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['VACATION', 'SICK_LEAVE', 'OTHER']):
            raise ValueError("must be one of enum values ('VACATION', 'SICK_LEAVE', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTimeoff from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTimeoff from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "with_multiple_dates": obj.get("with_multiple_dates"),
            "reason": obj.get("reason"),
            "is_start_date_half_day": obj.get("is_start_date_half_day"),
            "is_end_date_half_day": obj.get("is_end_date_half_day"),
            "other_timeoff_name": obj.get("other_timeoff_name")
        })
        return _obj


