# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetProfileEntitlements200ResponseEntitlementsInnerEventsInner(BaseModel):
    """
    GetProfileEntitlements200ResponseEntitlementsInnerEventsInner
    """ # noqa: E501
    id: StrictStr = Field(description="Event ID")
    type: StrictStr = Field(description="Event type")
    amount: Union[StrictFloat, StrictInt] = Field(description="Event amount")
    policy_id: StrictStr = Field(description="Policy ID")
    created_at: datetime = Field(description="Event creation date")
    event_date: Optional[datetime] = Field(default=None, description="Event date")
    profile_id: StrictStr = Field(description="Profile ID")
    updated_at: datetime = Field(description="Event update date")
    description: Optional[StrictStr] = Field(default=None, description="Event description")
    time_off_id: Optional[StrictStr] = Field(default=None, description="Time off ID")
    accrual_date: Optional[datetime] = Field(default=None, description="Accrual date")
    expiration_date: Optional[datetime] = Field(default=None, description="Expiration date")
    tracking_period: datetime = Field(description="Tracking period")
    rollover_tracking_period: Optional[datetime] = Field(default=None, description="Rollover tracking period")
    __properties: ClassVar[List[str]] = ["id", "type", "amount", "policy_id", "created_at", "event_date", "profile_id", "updated_at", "description", "time_off_id", "accrual_date", "expiration_date", "tracking_period", "rollover_tracking_period"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACCRUAL', 'ACCRUAL_DEDUCTION', 'ACCRUAL_PRORATE', 'ACCRUAL_TERMINATION', 'MANUAL_ADJUSTMENT', 'NO_ROLLOVER', 'ROLLOVER_ADJUSTMENT', 'ROLLOVER_CARRY_OVER', 'ROLLOVER_EXPIRATION', 'ROLLOVER_PAYOUT', 'ROLLOVER_PROJECTED', 'TIME_OFF']):
            raise ValueError("must be one of enum values ('ACCRUAL', 'ACCRUAL_DEDUCTION', 'ACCRUAL_PRORATE', 'ACCRUAL_TERMINATION', 'MANUAL_ADJUSTMENT', 'NO_ROLLOVER', 'ROLLOVER_ADJUSTMENT', 'ROLLOVER_CARRY_OVER', 'ROLLOVER_EXPIRATION', 'ROLLOVER_PAYOUT', 'ROLLOVER_PROJECTED', 'TIME_OFF')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetProfileEntitlements200ResponseEntitlementsInnerEventsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetProfileEntitlements200ResponseEntitlementsInnerEventsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "amount": obj.get("amount"),
            "policy_id": obj.get("policy_id"),
            "created_at": obj.get("created_at"),
            "event_date": obj.get("event_date"),
            "profile_id": obj.get("profile_id"),
            "updated_at": obj.get("updated_at"),
            "description": obj.get("description"),
            "time_off_id": obj.get("time_off_id"),
            "accrual_date": obj.get("accrual_date"),
            "expiration_date": obj.get("expiration_date"),
            "tracking_period": obj.get("tracking_period"),
            "rollover_tracking_period": obj.get("rollover_tracking_period")
        })
        return _obj


