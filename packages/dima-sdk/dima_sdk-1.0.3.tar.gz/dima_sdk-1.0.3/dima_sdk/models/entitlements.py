# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_sdk.models.entitlements_future_events_inner import EntitlementsFutureEventsInner
from dima_sdk.models.entitlements_policy import EntitlementsPolicy
from dima_sdk.models.entitlements_rollovers_inner import EntitlementsRolloversInner
from typing import Optional, Set
from typing_extensions import Self

class Entitlements(BaseModel):
    """
    Entitlements
    """ # noqa: E501
    id: Optional[StrictStr] = None
    tracking_period: Optional[StrictStr] = None
    tracking_period_end_date: Optional[StrictStr] = None
    accrued: Optional[StrictStr] = None
    balance_adjusted: Optional[StrictStr] = None
    allowance: Optional[StrictStr] = None
    available: Optional[StrictStr] = None
    approved: Optional[StrictStr] = None
    expired: Optional[StrictStr] = None
    requested: Optional[StrictStr] = None
    rollovers: Optional[List[EntitlementsRolloversInner]] = None
    used: Optional[StrictStr] = None
    total_entitlements: Optional[StrictStr] = None
    upcoming_accruals: Optional[StrictStr] = None
    accrual_amount: Optional[StrictStr] = None
    accrual_unit: Optional[StrictStr] = None
    past_tracking_periods: Optional[List[StrictStr]] = None
    time_off_event_id: Optional[StrictStr] = None
    policy: Optional[EntitlementsPolicy] = None
    future_events: Optional[List[EntitlementsFutureEventsInner]] = None
    __properties: ClassVar[List[str]] = ["id", "tracking_period", "tracking_period_end_date", "accrued", "balance_adjusted", "allowance", "available", "approved", "expired", "requested", "rollovers", "used", "total_entitlements", "upcoming_accruals", "accrual_amount", "accrual_unit", "past_tracking_periods", "time_off_event_id", "policy", "future_events"]

    @field_validator('accrual_unit')
    def accrual_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HOUR', 'BUSINESS_DAY', 'CALENDAR_DAY', 'WEEK', 'MONTH', 'YEAR']):
            raise ValueError("must be one of enum values ('HOUR', 'BUSINESS_DAY', 'CALENDAR_DAY', 'WEEK', 'MONTH', 'YEAR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Entitlements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rollovers (list)
        _items = []
        if self.rollovers:
            for _item_rollovers in self.rollovers:
                if _item_rollovers:
                    _items.append(_item_rollovers.to_dict())
            _dict['rollovers'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in future_events (list)
        _items = []
        if self.future_events:
            for _item_future_events in self.future_events:
                if _item_future_events:
                    _items.append(_item_future_events.to_dict())
            _dict['future_events'] = _items
        # set to None if accrued (nullable) is None
        # and model_fields_set contains the field
        if self.accrued is None and "accrued" in self.model_fields_set:
            _dict['accrued'] = None

        # set to None if balance_adjusted (nullable) is None
        # and model_fields_set contains the field
        if self.balance_adjusted is None and "balance_adjusted" in self.model_fields_set:
            _dict['balance_adjusted'] = None

        # set to None if allowance (nullable) is None
        # and model_fields_set contains the field
        if self.allowance is None and "allowance" in self.model_fields_set:
            _dict['allowance'] = None

        # set to None if available (nullable) is None
        # and model_fields_set contains the field
        if self.available is None and "available" in self.model_fields_set:
            _dict['available'] = None

        # set to None if rollovers (nullable) is None
        # and model_fields_set contains the field
        if self.rollovers is None and "rollovers" in self.model_fields_set:
            _dict['rollovers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Entitlements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "tracking_period": obj.get("tracking_period"),
            "tracking_period_end_date": obj.get("tracking_period_end_date"),
            "accrued": obj.get("accrued"),
            "balance_adjusted": obj.get("balance_adjusted"),
            "allowance": obj.get("allowance"),
            "available": obj.get("available"),
            "approved": obj.get("approved"),
            "expired": obj.get("expired"),
            "requested": obj.get("requested"),
            "rollovers": [EntitlementsRolloversInner.from_dict(_item) for _item in obj["rollovers"]] if obj.get("rollovers") is not None else None,
            "used": obj.get("used"),
            "total_entitlements": obj.get("total_entitlements"),
            "upcoming_accruals": obj.get("upcoming_accruals"),
            "accrual_amount": obj.get("accrual_amount"),
            "accrual_unit": obj.get("accrual_unit"),
            "past_tracking_periods": obj.get("past_tracking_periods"),
            "time_off_event_id": obj.get("time_off_event_id"),
            "policy": EntitlementsPolicy.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "future_events": [EntitlementsFutureEventsInner.from_dict(_item) for _item in obj["future_events"]] if obj.get("future_events") is not None else None
        })
        return _obj


