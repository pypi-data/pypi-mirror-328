# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateInvoiceAdjustmentRequest(BaseModel):
    """
    Details of invoice adjustment to create.
    """ # noqa: E501
    type: StrictStr = Field(description="Type of invoice adjustment.")
    amount: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="Amount to be paid. Must be a positive number.")
    contract_id: StrictStr = Field(description="Id of a Deel contract.")
    description: Annotated[str, Field(strict=True, max_length=30000)] = Field(description="Description of the adjustment.")
    date_submitted: date = Field(description="Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")
    payment_cycle_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ID of an existing active payment cycle - required if type is \"vat\"", alias="paymentCycleId")
    __properties: ClassVar[List[str]] = ["type", "amount", "contract_id", "description", "date_submitted", "paymentCycleId"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['bonus', 'commission', 'deduction', 'expense', 'other', 'overtime', 'time_off', 'vat']):
            raise ValueError("must be one of enum values ('bonus', 'commission', 'deduction', 'expense', 'other', 'overtime', 'time_off', 'vat')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInvoiceAdjustmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if payment_cycle_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_cycle_id is None and "payment_cycle_id" in self.model_fields_set:
            _dict['paymentCycleId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInvoiceAdjustmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "amount": obj.get("amount"),
            "contract_id": obj.get("contract_id"),
            "description": obj.get("description"),
            "date_submitted": obj.get("date_submitted"),
            "paymentCycleId": obj.get("paymentCycleId")
        })
        return _obj


