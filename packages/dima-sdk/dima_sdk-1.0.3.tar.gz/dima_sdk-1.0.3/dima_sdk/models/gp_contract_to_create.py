# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from dima_sdk.models.gp_client import GPClient
from dima_sdk.models.gp_contract_to_create_compensation_details import GPContractToCreateCompensationDetails
from dima_sdk.models.gp_contract_to_create_employee import GPContractToCreateEmployee
from dima_sdk.models.gp_contract_to_create_employment import GPContractToCreateEmployment
from typing import Optional, Set
from typing_extensions import Self

class GPContractToCreate(BaseModel):
    """
    GPContractToCreate
    """ # noqa: E501
    employee: GPContractToCreateEmployee
    employment: GPContractToCreateEmployment
    job_title: StrictStr = Field(description="Employee's job title.")
    client: GPClient
    compensation_details: GPContractToCreateCompensationDetails
    __properties: ClassVar[List[str]] = ["employee", "employment", "job_title", "client", "compensation_details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GPContractToCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employment
        if self.employment:
            _dict['employment'] = self.employment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensation_details
        if self.compensation_details:
            _dict['compensation_details'] = self.compensation_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GPContractToCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "employee": GPContractToCreateEmployee.from_dict(obj["employee"]) if obj.get("employee") is not None else None,
            "employment": GPContractToCreateEmployment.from_dict(obj["employment"]) if obj.get("employment") is not None else None,
            "job_title": obj.get("job_title"),
            "client": GPClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "compensation_details": GPContractToCreateCompensationDetails.from_dict(obj["compensation_details"]) if obj.get("compensation_details") is not None else None
        })
        return _obj


