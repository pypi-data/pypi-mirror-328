# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_sdk.models.put401k_plans_definition_request_contribution_value_for_match_rate_inner import Put401kPlansDefinitionRequestContributionValueForMatchRateInner
from dima_sdk.models.put401k_plans_definition_request_details import Put401kPlansDefinitionRequestDetails
from typing import Optional, Set
from typing_extensions import Self

class Put401kPlansDefinitionRequest(BaseModel):
    """
    Schema for the 401K Guideline Plan request body.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the 401K plan.")
    details: Optional[Put401kPlansDefinitionRequestDetails] = None
    start_date: Optional[date] = Field(default=None, description="Start date of the plan.")
    contribution_type: Optional[StrictStr] = Field(default=None, description="Type of contribution for the 401K plan.")
    contribution_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value of the contribution if type is percent or amount.")
    contribution_value_for_match_rate: Optional[List[Put401kPlansDefinitionRequestContributionValueForMatchRateInner]] = Field(default=None, description="Array of objects containing limits and rates for match rate contribution type.")
    __properties: ClassVar[List[str]] = ["name", "details", "start_date", "contribution_type", "contribution_value", "contribution_value_for_match_rate"]

    @field_validator('contribution_type')
    def contribution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEC_PERCENTAGE', 'NEC_FIXED_AMOUNT', 'PERCENTAGE', 'FIXED_AMOUNT', 'MATCH']):
            raise ValueError("must be one of enum values ('NEC_PERCENTAGE', 'NEC_FIXED_AMOUNT', 'PERCENTAGE', 'FIXED_AMOUNT', 'MATCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Put401kPlansDefinitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in contribution_value_for_match_rate (list)
        _items = []
        if self.contribution_value_for_match_rate:
            for _item_contribution_value_for_match_rate in self.contribution_value_for_match_rate:
                if _item_contribution_value_for_match_rate:
                    _items.append(_item_contribution_value_for_match_rate.to_dict())
            _dict['contribution_value_for_match_rate'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Put401kPlansDefinitionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "details": Put401kPlansDefinitionRequestDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "start_date": obj.get("start_date"),
            "contribution_type": obj.get("contribution_type"),
            "contribution_value": obj.get("contribution_value"),
            "contribution_value_for_match_rate": [Put401kPlansDefinitionRequestContributionValueForMatchRateInner.from_dict(_item) for _item in obj["contribution_value_for_match_rate"]] if obj.get("contribution_value_for_match_rate") is not None else None
        })
        return _obj


