# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_sdk.models.create_contract201_response_data_quote_benefits_inner import CreateContract201ResponseDataQuoteBenefitsInner
from dima_sdk.models.create_contract201_response_data_quote_breakdown_costs import CreateContract201ResponseDataQuoteBreakdownCosts
from typing import Optional, Set
from typing_extensions import Self

class CreateContract201ResponseDataQuote(BaseModel):
    """
    EOR quote approved by Deel
    """ # noqa: E501
    benefits: Optional[List[CreateContract201ResponseDataQuoteBenefitsInner]] = Field(default=None, description="Array of benefits")
    currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="Currency code.")
    cba_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total CBA in local currency")
    created_at: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")
    updated_at: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.")
    salary_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total salary in local currency")
    annual_salary: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Annual Salary in local currency")
    cba_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total CBA in USD")
    breakdown_costs: Optional[CreateContract201ResponseDataQuoteBreakdownCosts] = None
    salary_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total salary in USD")
    gross_salary_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total gross salary in local currency")
    mobility_fee_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total mobility fee in local currency")
    monthly_cost_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total monthly cost in local currency")
    platform_fee_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total platform fee in local currency")
    employer_cost_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total employer cost in local currency")
    gross_salary_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total gross salary in USD")
    mobility_fee_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total mobility fee in USD")
    monthly_cost_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total monthly cost in USD")
    platform_fee_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total platform fee in USD")
    employer_cost_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total employer cost in USD")
    severance_accrual_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total severance accrual in local currency")
    recurring_allowance_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total recurring allowance in local currency")
    severance_accrual_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total severance accrual in USD")
    recurring_allowance_total_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total recurring allowance in USD")
    __properties: ClassVar[List[str]] = ["benefits", "currency", "cba_total", "created_at", "updated_at", "salary_total", "annual_salary", "cba_total_usd", "breakdown_costs", "salary_total_usd", "gross_salary_total", "mobility_fee_total", "monthly_cost_total", "platform_fee_total", "employer_cost_total", "gross_salary_total_usd", "mobility_fee_total_usd", "monthly_cost_total_usd", "platform_fee_total_usd", "employer_cost_total_usd", "severance_accrual_total", "recurring_allowance_total", "severance_accrual_total_usd", "recurring_allowance_total_usd"]

    @field_validator('currency')
    def currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    @field_validator('created_at')
    def created_at_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}$/")
        return value

    @field_validator('updated_at')
    def updated_at_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-\d{2}-\d{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-\d{2}-\d{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateContract201ResponseDataQuote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in benefits (list)
        _items = []
        if self.benefits:
            for _item_benefits in self.benefits:
                if _item_benefits:
                    _items.append(_item_benefits.to_dict())
            _dict['benefits'] = _items
        # override the default output from pydantic by calling `to_dict()` of breakdown_costs
        if self.breakdown_costs:
            _dict['breakdown_costs'] = self.breakdown_costs.to_dict()
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateContract201ResponseDataQuote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "benefits": [CreateContract201ResponseDataQuoteBenefitsInner.from_dict(_item) for _item in obj["benefits"]] if obj.get("benefits") is not None else None,
            "currency": obj.get("currency"),
            "cba_total": obj.get("cba_total"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "salary_total": obj.get("salary_total"),
            "annual_salary": obj.get("annual_salary"),
            "cba_total_usd": obj.get("cba_total_usd"),
            "breakdown_costs": CreateContract201ResponseDataQuoteBreakdownCosts.from_dict(obj["breakdown_costs"]) if obj.get("breakdown_costs") is not None else None,
            "salary_total_usd": obj.get("salary_total_usd"),
            "gross_salary_total": obj.get("gross_salary_total"),
            "mobility_fee_total": obj.get("mobility_fee_total"),
            "monthly_cost_total": obj.get("monthly_cost_total"),
            "platform_fee_total": obj.get("platform_fee_total"),
            "employer_cost_total": obj.get("employer_cost_total"),
            "gross_salary_total_usd": obj.get("gross_salary_total_usd"),
            "mobility_fee_total_usd": obj.get("mobility_fee_total_usd"),
            "monthly_cost_total_usd": obj.get("monthly_cost_total_usd"),
            "platform_fee_total_usd": obj.get("platform_fee_total_usd"),
            "employer_cost_total_usd": obj.get("employer_cost_total_usd"),
            "severance_accrual_total": obj.get("severance_accrual_total"),
            "recurring_allowance_total": obj.get("recurring_allowance_total"),
            "severance_accrual_total_usd": obj.get("severance_accrual_total_usd"),
            "recurring_allowance_total_usd": obj.get("recurring_allowance_total_usd")
        })
        return _obj


