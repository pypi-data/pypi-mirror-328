# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_sdk.models.create_contract201_response_data_client import CreateContract201ResponseDataClient
from dima_sdk.models.create_contract201_response_data_compensation_details import CreateContract201ResponseDataCompensationDetails
from dima_sdk.models.create_contract201_response_data_custom_fields_inner import CreateContract201ResponseDataCustomFieldsInner
from dima_sdk.models.create_contract201_response_data_employment_details import CreateContract201ResponseDataEmploymentDetails
from dima_sdk.models.create_contract201_response_data_invitations import CreateContract201ResponseDataInvitations
from dima_sdk.models.create_contract201_response_data_quote import CreateContract201ResponseDataQuote
from dima_sdk.models.create_contract201_response_data_seniority import CreateContract201ResponseDataSeniority
from dima_sdk.models.create_contract201_response_data_signatures import CreateContract201ResponseDataSignatures
from dima_sdk.models.create_contract201_response_data_worker import CreateContract201ResponseDataWorker
from typing import Optional, Set
from typing_extensions import Self

class CreateContract201ResponseData(BaseModel):
    """
    CreateContract201ResponseData
    """ # noqa: E501
    id: StrictStr = Field(description="The public UUID of the object")
    type: StrictStr = Field(description="Type of a contract")
    quote: Optional[CreateContract201ResponseDataQuote] = None
    title: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Title of a contract")
    client: Optional[CreateContract201ResponseDataClient]
    status: StrictStr = Field(description="Status of a contract in Deel workflow")
    worker: Optional[CreateContract201ResponseDataWorker]
    job_title: StrictStr
    seniority: Optional[CreateContract201ResponseDataSeniority] = None
    created_at: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    signatures: CreateContract201ResponseDataSignatures
    start_date: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    external_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for the object provided by an external system.")
    invitations: CreateContract201ResponseDataInvitations
    is_archived: StrictBool = Field(description="Flag to indicate if the contract is archived")
    who_reports: Optional[StrictStr] = Field(default=None, description="Flag to indicate who is supposed to provide regular reports")
    custom_fields: Optional[List[CreateContract201ResponseDataCustomFieldsInner]] = None
    notice_period: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=0, description="Days before to notice the termination of contract for eather party.")
    scope_of_work: Optional[StrictStr] = Field(default=None, description="Scope of work for the contract")
    special_clause: StrictStr = Field(description="Special clause for the contract")
    termination_date: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    employment_details: CreateContract201ResponseDataEmploymentDetails
    compensation_details: CreateContract201ResponseDataCompensationDetails
    __properties: ClassVar[List[str]] = ["id", "type", "quote", "title", "client", "status", "worker", "job_title", "seniority", "created_at", "signatures", "start_date", "external_id", "invitations", "is_archived", "who_reports", "custom_fields", "notice_period", "scope_of_work", "special_clause", "termination_date", "employment_details", "compensation_details"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ongoing_time_based', 'milestones', 'time_based', 'pay_as_you_go_time_based', 'commission', 'payg_milestones', 'payg_tasks', 'eor', 'unknown', 'employee', 'global_payroll', 'shield_msa', 'hris_direct_employee']):
            raise ValueError("must be one of enum values ('ongoing_time_based', 'milestones', 'time_based', 'pay_as_you_go_time_based', 'commission', 'payg_milestones', 'payg_tasks', 'eor', 'unknown', 'employee', 'global_payroll', 'shield_msa', 'hris_direct_employee')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['new', 'under_review', 'waiting_for_employee_contract', 'waiting_for_client_sign', 'processing_payment', 'waiting_for_contractor_sign', 'waiting_for_eor_sign', 'waiting_for_employee_sign', 'awaiting_deposit_payment', 'in_progress', 'completed', 'cancelled', 'user_cancelled', 'rejected', 'waiting_for_client_payment']):
            raise ValueError("must be one of enum values ('new', 'under_review', 'waiting_for_employee_contract', 'waiting_for_client_sign', 'processing_payment', 'waiting_for_contractor_sign', 'waiting_for_eor_sign', 'waiting_for_employee_sign', 'awaiting_deposit_payment', 'in_progress', 'completed', 'cancelled', 'user_cancelled', 'rejected', 'waiting_for_client_payment')")
        return value

    @field_validator('who_reports')
    def who_reports_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['both', 'client', 'contractor']):
            raise ValueError("must be one of enum values ('both', 'client', 'contractor')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateContract201ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quote
        if self.quote:
            _dict['quote'] = self.quote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict['worker'] = self.worker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seniority
        if self.seniority:
            _dict['seniority'] = self.seniority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signatures
        if self.signatures:
            _dict['signatures'] = self.signatures.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invitations
        if self.invitations:
            _dict['invitations'] = self.invitations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of employment_details
        if self.employment_details:
            _dict['employment_details'] = self.employment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensation_details
        if self.compensation_details:
            _dict['compensation_details'] = self.compensation_details.to_dict()
        # set to None if client (nullable) is None
        # and model_fields_set contains the field
        if self.client is None and "client" in self.model_fields_set:
            _dict['client'] = None

        # set to None if worker (nullable) is None
        # and model_fields_set contains the field
        if self.worker is None and "worker" in self.model_fields_set:
            _dict['worker'] = None

        # set to None if seniority (nullable) is None
        # and model_fields_set contains the field
        if self.seniority is None and "seniority" in self.model_fields_set:
            _dict['seniority'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if scope_of_work (nullable) is None
        # and model_fields_set contains the field
        if self.scope_of_work is None and "scope_of_work" in self.model_fields_set:
            _dict['scope_of_work'] = None

        # set to None if termination_date (nullable) is None
        # and model_fields_set contains the field
        if self.termination_date is None and "termination_date" in self.model_fields_set:
            _dict['termination_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateContract201ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "quote": CreateContract201ResponseDataQuote.from_dict(obj["quote"]) if obj.get("quote") is not None else None,
            "title": obj.get("title"),
            "client": CreateContract201ResponseDataClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "status": obj.get("status"),
            "worker": CreateContract201ResponseDataWorker.from_dict(obj["worker"]) if obj.get("worker") is not None else None,
            "job_title": obj.get("job_title"),
            "seniority": CreateContract201ResponseDataSeniority.from_dict(obj["seniority"]) if obj.get("seniority") is not None else None,
            "created_at": obj.get("created_at"),
            "signatures": CreateContract201ResponseDataSignatures.from_dict(obj["signatures"]) if obj.get("signatures") is not None else None,
            "start_date": obj.get("start_date"),
            "external_id": obj.get("external_id"),
            "invitations": CreateContract201ResponseDataInvitations.from_dict(obj["invitations"]) if obj.get("invitations") is not None else None,
            "is_archived": obj.get("is_archived"),
            "who_reports": obj.get("who_reports"),
            "custom_fields": [CreateContract201ResponseDataCustomFieldsInner.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "notice_period": obj.get("notice_period") if obj.get("notice_period") is not None else 0,
            "scope_of_work": obj.get("scope_of_work"),
            "special_clause": obj.get("special_clause"),
            "termination_date": obj.get("termination_date"),
            "employment_details": CreateContract201ResponseDataEmploymentDetails.from_dict(obj["employment_details"]) if obj.get("employment_details") is not None else None,
            "compensation_details": CreateContract201ResponseDataCompensationDetails.from_dict(obj["compensation_details"]) if obj.get("compensation_details") is not None else None
        })
        return _obj


