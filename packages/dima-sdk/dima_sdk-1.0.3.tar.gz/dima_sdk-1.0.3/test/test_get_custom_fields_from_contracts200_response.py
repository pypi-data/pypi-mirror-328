# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dima_sdk.models.get_custom_fields_from_contracts200_response import GetCustomFieldsFromContracts200Response

class TestGetCustomFieldsFromContracts200Response(unittest.TestCase):
    """GetCustomFieldsFromContracts200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetCustomFieldsFromContracts200Response:
        """Test GetCustomFieldsFromContracts200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetCustomFieldsFromContracts200Response`
        """
        model = GetCustomFieldsFromContracts200Response()
        if include_optional:
            return GetCustomFieldsFromContracts200Response(
                data = dima_sdk.models.get_custom_fields_from_contracts_200_response_data.getCustomFieldsFromContracts_200_response_data(
                    id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                    name = 'Custom Field Name', 
                    type = null, 
                    settings = dima_sdk.models.get_custom_fields_from_contracts_200_response_data_settings.getCustomFieldsFromContracts_200_response_data_settings(
                        access = dima_sdk.models.get_custom_fields_from_contracts_200_response_data_settings_access.getCustomFieldsFromContracts_200_response_data_settings_access(
                            provided_by = [
                                'organization'
                                ], 
                            is_sensitive = False, ), 
                        required = True, 
                        countries = ["CA","GB","US"], 
                        is_enabled = True, 
                        worker_types = [
                            'eor'
                            ], ), 
                    placement = 'profile', 
                    created_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    description = 'Custom Field Description', )
            )
        else:
            return GetCustomFieldsFromContracts200Response(
                data = dima_sdk.models.get_custom_fields_from_contracts_200_response_data.getCustomFieldsFromContracts_200_response_data(
                    id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                    name = 'Custom Field Name', 
                    type = null, 
                    settings = dima_sdk.models.get_custom_fields_from_contracts_200_response_data_settings.getCustomFieldsFromContracts_200_response_data_settings(
                        access = dima_sdk.models.get_custom_fields_from_contracts_200_response_data_settings_access.getCustomFieldsFromContracts_200_response_data_settings_access(
                            provided_by = [
                                'organization'
                                ], 
                            is_sensitive = False, ), 
                        required = True, 
                        countries = ["CA","GB","US"], 
                        is_enabled = True, 
                        worker_types = [
                            'eor'
                            ], ), 
                    placement = 'profile', 
                    created_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    description = 'Custom Field Description', ),
        )
        """

    def testGetCustomFieldsFromContracts200Response(self):
        """Test GetCustomFieldsFromContracts200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
