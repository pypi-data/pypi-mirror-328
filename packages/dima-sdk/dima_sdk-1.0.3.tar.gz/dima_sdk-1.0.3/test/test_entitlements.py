# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dima_sdk.models.entitlements import Entitlements

class TestEntitlements(unittest.TestCase):
    """Entitlements unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Entitlements:
        """Test Entitlements
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Entitlements`
        """
        model = Entitlements()
        if include_optional:
            return Entitlements(
                id = '',
                tracking_period = '',
                tracking_period_end_date = '',
                accrued = '',
                balance_adjusted = '',
                allowance = '',
                available = '',
                approved = '',
                expired = '',
                requested = '',
                rollovers = [
                    dima_sdk.models.entitlements_rollovers_inner.Entitlements_rollovers_inner(
                        expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        rollover_tracking_period = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        amount = null, )
                    ],
                used = '',
                total_entitlements = '',
                upcoming_accruals = '',
                accrual_amount = '',
                accrual_unit = 'HOUR',
                past_tracking_periods = [
                    ''
                    ],
                time_off_event_id = '',
                policy = dima_sdk.models.entitlements_policy.Entitlements_policy(
                    id = '', 
                    name = '', 
                    description = '', 
                    policy_type_id = '', 
                    tracking_unit = 'HOUR', 
                    tracking_unit_amount = 1.337, 
                    tracking_cadence = 'FIXED_DAY', 
                    tracking_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    leave_type = 'SHORT_TERM_LEAVE', 
                    time_off_types = [
                        dima_sdk.models.entitlements_policy_time_off_types_inner.Entitlements_policy_time_off_types_inner(
                            id = '', 
                            name = '', )
                        ], 
                    policy_type = dima_sdk.models.get_policies_for_profile_200_response_policies_inner_policy_type.getPoliciesForProfile_200_response_policies_inner_policy_type(
                        id = 1.337, 
                        name = '', ), ),
                future_events = [
                    dima_sdk.models.entitlements_future_events_inner.Entitlements_future_events_inner(
                        id = '', 
                        profile_id = '', 
                        policy_id = '', 
                        time_off_id = '', 
                        tracking_period = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        type = 'ACCRUAL', 
                        description = '', 
                        amount = 1.337, )
                    ]
            )
        else:
            return Entitlements(
        )
        """

    def testEntitlements(self):
        """Test Entitlements"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
