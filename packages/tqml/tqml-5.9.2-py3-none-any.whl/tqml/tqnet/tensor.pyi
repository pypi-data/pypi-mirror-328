import torch.nn as nn
from _typeshed import Incomplete

K: Incomplete

def get_qiskit_MPS_circuit(N_qubits_in, inds_qubits_out, box_size, N_layers): ...
def encode_next_features(circuit, i_q, features): ...
def variational_box(circuit, inds, N_layers, weights): ...
def QK_2_TC_circuit(circ_QK, ad: int = 0, pd: int = 0, dp: int = 0, use_MPS: bool = False): ...
def apply_noise(circ, inds, ad, pd, dp) -> None: ...
def magnetisation_output(circ, N_qubits_out): ...
def probabilities_output(circ, N_qubits_out): ...
def probabilities_output_from_dence(circ, N_qubits_out): ...
def probabilities_output_from_MPS(circ, N_qubits_out): ...

class CircuitLayer(nn.Module):
    N_weights: Incomplete
    q_layer: Incomplete
    weights: Incomplete
    bias: Incomplete
    def __init__(self, circuit_function, N_features_in, N_features_out, N_weights) -> None: ...
    def forward(self, x): ...

class MPOCircuitLayer(CircuitLayer):
    def __init__(self, N_qubits_in, N_qubits_out, box_size, N_layers) -> None: ...
