# (generated with --quick)

import asyncio
import click
import json
import logging
import ssl
import urllib
import websockets
from typing import Any, Coroutine, Literal, Optional, Union, overload

class TunnelClient:
    destination_url: Any
    logger: logging.Logger
    loop: asyncio.events.AbstractEventLoop
    pending_requests: dict[Any, dict[str, Any]]
    stop_event: asyncio.locks.Event
    subdomain: Any
    tunnel_host: Any
    tunnel_http_url: str
    tunnel_websocket_url: str
    def __init__(self, *, destination_url, subdomain, tunnel_host, log_level) -> None: ...
    def check_and_process_request(self, websocket, request_id) -> Coroutine[Any, Any, None]: ...
    def connect(self) -> Coroutine[Any, Any, None]: ...
    def forward_request(self, websocket) -> Coroutine[Any, Any, None]: ...
    def handle_request_body_chunk(self, websocket, chunk_data) -> Coroutine[Any, Any, None]: ...
    def handle_request_metadata(self, websocket, data) -> Coroutine[Any, Any, None]: ...
    def process_request(self, websocket, request_metadata, body_chunks, request_id) -> Coroutine[Any, Any, None]: ...
    def run(self) -> None: ...
    def shutdown(self) -> Coroutine[Any, Any, None]: ...

@overload
def urlparse(url: str, scheme: str = ..., allow_fragments: bool = ...) -> urllib.parse.ParseResult: ...
@overload
def urlparse(url: Optional[bytes], scheme: Optional[Union[bytes, Literal['']]] = ..., allow_fragments: bool = ...) -> urllib.parse.ParseResultBytes: ...
