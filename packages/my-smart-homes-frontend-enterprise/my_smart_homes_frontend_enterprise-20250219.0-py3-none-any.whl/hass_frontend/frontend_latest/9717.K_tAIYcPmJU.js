export const id=9717;export const ids=[9717];export const modules={9717:(e,s,i)=>{i.r(s),i.d(s,{DialogPersonBuildingManager:()=>y});var a=i(36312),t=(i(253),i(94438),i(16891),i(4525),i(15112)),n=i(77706),r=i(94100),l=(i(56864),i(77372),i(3276)),o=(i(24284),i(28066),i(98645),i(24640),i(90431),i(32084),i(94526)),d=i(71443),h=i(6121),c=i(55321),u=i(84976),_=i(50070),p=i(96477);const m="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z",g=["device_tracker"],k={round:!0,quality:.75,aspectRatio:1};let y=(0,a.A)([(0,n.EM)("dialog-person-building-manager")],(function(e,s){return{F:class extends s{constructor(...s){super(...s),e(this)}},d:[{kind:"field",decorators:[(0,n.MZ)({attribute:!1})],key:"hass",value:void 0},{kind:"field",decorators:[(0,n.wk)()],key:"_name",value:()=>""},{kind:"field",decorators:[(0,n.wk)()],key:"_userId",value:void 0},{kind:"field",decorators:[(0,n.wk)()],key:"_user",value:void 0},{kind:"field",decorators:[(0,n.wk)()],key:"_isAdmin",value:void 0},{kind:"field",decorators:[(0,n.wk)()],key:"_localOnly",value:void 0},{kind:"field",decorators:[(0,n.wk)()],key:"_deviceTrackers",value:()=>[]},{kind:"field",decorators:[(0,n.wk)()],key:"_picture",value:()=>null},{kind:"field",decorators:[(0,n.wk)()],key:"_error",value:void 0},{kind:"field",decorators:[(0,n.wk)()],key:"_params",value:void 0},{kind:"field",decorators:[(0,n.wk)()],key:"_submitting",value:()=>!1},{kind:"field",decorators:[(0,n.wk)()],key:"_personExists",value:()=>!1},{kind:"field",decorators:[(0,n.wk)()],key:"_displayName",value:()=>""},{kind:"field",decorators:[(0,n.wk)()],key:"_username",value:()=>""},{kind:"field",decorators:[(0,n.wk)()],key:"_password",value:()=>""},{kind:"field",decorators:[(0,n.wk)()],key:"_confirmPassword",value:()=>""},{kind:"field",decorators:[(0,n.wk)()],key:"_localAccessOnly",value:()=>!1},{kind:"field",decorators:[(0,n.wk)()],key:"_administrator",value:()=>!1},{kind:"field",decorators:[(0,n.wk)()],key:"_buildingsList",value:()=>[]},{kind:"field",decorators:[(0,n.wk)()],key:"_selectedBuildingId",value:()=>null},{kind:"field",key:"_deviceTrackersAvailable",value:()=>(0,r.A)((e=>Object.keys(e.states).some((e=>"device_tracker"===e.substr(0,e.indexOf("."))))))},{kind:"method",key:"showDialog",value:async function(e){this._params=e,this._error=void 0,this._params.entry?(this._personExists=!0,this._name=this._params.entry.name||"",this._userId=this._params.entry.user_id||void 0,this._deviceTrackers=this._params.entry.device_trackers||[],this._picture=this._params.entry.picture||null,this._user=this._userId?this._params.users.find((e=>e.id===this._userId)):void 0,this._isAdmin=this._user?.group_ids.includes(d.wj),this._localOnly=this._user?.local_only):(this._personExists=!1,this._name="",this._userId=void 0,this._user=void 0,this._isAdmin=void 0,this._localOnly=void 0,this._deviceTrackers=[],this._picture=null),this._displayName="",this._username="",this._password="",this._confirmPassword="",this._localAccessOnly=!1,this._administrator=!1,await this._fetchBuildings(),await this.updateComplete}},{kind:"method",key:"render",value:function(){if(!this._params)return t.s6;const e=""===this._name.trim();return t.qy` <ha-dialog open @closed="${this._close}" scrimClickAction escapeKeyAction .heading="${(0,l.l)(this.hass,this._params.entry?this._params.entry.name:this.hass.localize("ui.panel.config.person.detail.new_building_manager"))}"> <div> ${this._error?t.qy`<div class="error">${this._error}</div>`:""} <div class="building-selection"> <label for="building-select">Select Building</label> <select id="building-select" name="selectedBuilding" @change="${this._handleBuildingChange}"> ${this._buildingsList.map((e=>t.qy` <option value="${e.id}" ?selected="${this._selectedBuildingId===e.id}"> ${e.name} </option> `))} </select> </div> <div class="form"> <ha-textfield class="name" name="name" .value="${this._name}" @input="${this._handleValueChanged}" label="${this.hass.localize("ui.panel.config.person.detail.name")}" required .validationMessage="${this.hass.localize("ui.common.error_required")}" dialogInitialFocus></ha-textfield> <ha-picture-upload .hass="${this.hass}" .value="${this._picture}" crop .cropOptions="${k}" @change="${this._pictureChanged}"></ha-picture-upload> <ha-textfield class="display-name" name="displayName" .value="${this._displayName}" @input="${this._handleValueChanged}" label="Display Name" required .validationMessage="${this.hass.localize("ui.common.error_required")}"></ha-textfield> <ha-textfield class="username" name="username" .value="${this._username}" @input="${this._handleValueChanged}" label="Username" required .validationMessage="${this.hass.localize("ui.common.error_required")}"></ha-textfield> <ha-password-field class="password" name="password" .value="${this._password}" @input="${this._handleValueChanged}" label="Password" required .validationMessage="${this.hass.localize("ui.common.error_required")}"></ha-password-field> <ha-password-field class="confirm-password" name="confirmPassword" .value="${this._confirmPassword}" @input="${this._handleValueChanged}" label="Confirm Password" required .invalid="${""!==this._password&&""!==this._confirmPassword&&this._confirmPassword!==this._password}" .errorMessage="${this.hass.localize("ui.panel.config.users.add_user.password_not_match")}"></ha-password-field> <ha-settings-row> <span slot="heading"> ${this.hass.localize("ui.panel.config.person.detail.local_access_only")} </span> <span slot="description"> ${this.hass.localize("ui.panel.config.person.detail.local_access_only_description")} </span> <ha-switch .checked="${this._localAccessOnly}" @change="${this._localAccessOnlyChanged}"></ha-switch> </ha-settings-row> <ha-settings-row> <span slot="heading"> ${this.hass.localize("ui.panel.config.person.detail.admin")} </span> <span slot="description"> ${this.hass.localize("ui.panel.config.person.detail.admin_description")} </span> <ha-switch .checked="${this._administrator}" @change="${this._administratorChanged}"></ha-switch> </ha-settings-row> ${this._renderUserFields()} ${this._deviceTrackersAvailable(this.hass)?t.qy` <p> ${this.hass.localize("ui.panel.config.person.detail.device_tracker_intro")} </p> <ha-entities-picker .hass="${this.hass}" .value="${this._deviceTrackers}" .includeDomains="${g}" .pickedEntityLabel="${this.hass.localize("ui.panel.config.person.detail.device_tracker_picked")}" .pickEntityLabel="${this.hass.localize("ui.panel.config.person.detail.device_tracker_pick")}" @value-changed="${this._deviceTrackersChanged}"></ha-entities-picker> `:t.qy` <p> ${this.hass.localize("ui.panel.config.person.detail.no_device_tracker_available_intro")} </p> <ul> <li> <a href="${(0,u.o)(this.hass,"/integrations/#presence-detection")}" target="_blank" rel="noreferrer">${this.hass.localize("ui.panel.config.person.detail.link_presence_detection_integrations")}</a> </li> <li> <a @click="${this._close}" href="/config/integrations"> ${this.hass.localize("ui.panel.config.person.detail.link_integrations_page")} </a> </li> </ul> `} </div> </div> ${this._params.entry?t.qy` <ha-button slot="secondaryAction" class="warning" @click="${this._deleteEntry}" .disabled="${this._user&&this._user.is_owner||this._submitting}"> ${this.hass.localize("ui.panel.config.person.detail.delete")} </ha-button> `:t.s6} <ha-button slot="primaryAction" @click="${this._createOrUpdateEntry}" .disabled="${e||this._submitting}"> ${this._params.entry?this.hass.localize("ui.panel.config.person.detail.update"):this.hass.localize("ui.panel.config.person.detail.create")} </ha-button> </ha-dialog> `}},{kind:"method",key:"_handleValueChanged",value:function(e){this._error=void 0;const s=e.target;switch(s.name){case"name":this._name=s.value;break;case"displayName":this._displayName=s.value;break;case"username":this._username=s.value;break;case"password":this._password=s.value;break;case"confirmPassword":this._confirmPassword=s.value}}},{kind:"method",key:"_handleBuildingChange",value:function(e){const s=e.target;this._selectedBuildingId=Number(s.value)}},{kind:"method",key:"_localAccessOnlyChanged",value:function(e){const s=e.target;this._localAccessOnly=s.checked}},{kind:"method",key:"_administratorChanged",value:function(e){const s=e.target;this._administrator=s.checked}},{kind:"method",key:"_deviceTrackersChanged",value:function(e){this._error=void 0,this._deviceTrackers=e.detail.value}},{kind:"method",key:"_pictureChanged",value:function(e){this._error=void 0,this._picture=e.target.value}},{kind:"method",key:"_fetchBuildings",value:async function(){try{const e=await fetch(`${p.u}/building/list`),s=await e.json();s.success?(this._buildingsList=s.data,this._buildingsList.length>0&&!this._selectedBuildingId&&(this._selectedBuildingId=this._buildingsList[0].id)):this._error="Failed to load buildings"}catch(e){this._error=e.message||"Unknown error while loading buildings"}}},{kind:"method",key:"_createOrUpdateEntry",value:async function(){if(this._password!==this._confirmPassword)return void(this._error=this.hass.localize("ui.panel.config.users.add_user.password_not_match"));const e={display_name:this._displayName,username:this._username,password:this._password,confirm_password:this._confirmPassword,building_id:this._selectedBuildingId,local_access_only:this._localAccessOnly,administrator:this._administrator};try{const s=await fetch(`${p.u}/building/create-user/${this._selectedBuildingId}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(s.ok)this._params?.refreshUsers(),(0,h.showAlertDialog)(this,{title:"User created successfully"}),this._close();else{const e=await s.json(),i=e.errors?.[0]?.message||`Failed to create user. Status: ${s.status} - ${s.statusText}`;(0,h.showAlertDialog)(this,{title:i})}}catch(e){this._error=e.message||"Unknown error",(0,h.showAlertDialog)(this,{title:`Error Creating User ${e.message}`})}}},{kind:"method",key:"_renderUserFields",value:function(){const e=this._user;return e?t.qy` ${e.system_generated?t.s6:t.qy` <ha-settings-row> <span slot="heading"> ${this.hass.localize("ui.panel.config.person.detail.username")} </span> <span slot="description">${e.username}</span> ${this.hass.user?.is_owner?t.qy` <ha-icon-button .path="${m}" @click="${this._changeUsername}" .label="${this.hass.localize("ui.panel.config.person.detail.change_username")}"></ha-icon-button> `:t.s6} </ha-settings-row> `} ${!e.system_generated&&this.hass.user?.is_owner?t.qy` <ha-settings-row> <span slot="heading"> ${this.hass.localize("ui.panel.config.person.detail.password")} </span> <span slot="description">************</span> ${this.hass.user?.is_owner?t.qy` <ha-icon-button .path="${m}" @click="${this._changePassword}" .label="${this.hass.localize("ui.panel.config.person.detail.change_password")}"></ha-icon-button> `:t.s6} </ha-settings-row> `:t.s6} <ha-settings-row> <span slot="heading"> ${this.hass.localize("ui.panel.config.person.detail.local_access_only")} </span> <span slot="description"> ${this.hass.localize("ui.panel.config.person.detail.local_access_only_description")} </span> <ha-switch .disabled="${e.system_generated}" .checked="${this._localOnly}" @change="${this._localAccessOnlyChanged}"></ha-switch> </ha-settings-row> <ha-settings-row> <span slot="heading"> ${this.hass.localize("ui.panel.config.person.detail.admin")} </span> <span slot="description"> ${this.hass.localize("ui.panel.config.person.detail.admin_description")} </span> <ha-switch .disabled="${e.system_generated||e.is_owner}" .checked="${this._isAdmin}" @change="${this._adminChanged}"></ha-switch> </ha-settings-row> `:t.s6}},{kind:"method",key:"_changePassword",value:async function(){if(!this._user)return;this._user.credentials.find((e=>"homeassistant"===e.type))?(0,_.M)(this,{userId:this._user.id}):(0,h.showAlertDialog)(this,{title:"No Home Assistant credentials found."})}},{kind:"method",key:"_changeUsername",value:async function(){if(!this._user)return;if(!this._user.credentials.find((e=>"homeassistant"===e.type)))return void(0,h.showAlertDialog)(this,{title:"No Home Assistant credentials found."});const e=await(0,h.showPromptDialog)(this,{inputLabel:this.hass.localize("ui.panel.config.users.change_username.new_username"),confirmText:this.hass.localize("ui.panel.config.users.change_username.change"),title:this.hass.localize("ui.panel.config.users.change_username.caption"),defaultValue:this._user.username});if(e)try{await(0,o.Gk)(this.hass,this._user.id,e),this._params?.refreshUsers(),this._user={...this._user,username:e},(0,h.showAlertDialog)(this,{text:this.hass.localize("ui.panel.config.users.change_username.username_changed")})}catch(e){(0,h.showAlertDialog)(this,{title:this.hass.localize("ui.panel.config.users.change_username.failed"),text:e.message})}}},{kind:"method",key:"_updateEntry",value:async function(){this._submitting=!0;try{(this._userId&&this._name!==this._params.entry?.name||this._isAdmin!==this._user?.group_ids.includes(d.wj)||this._localOnly!==this._user?.local_only)&&(await(0,d.TK)(this.hass,this._userId,{name:this._name.trim(),group_ids:[this._isAdmin?d.wj:d.eR],local_only:this._localOnly}),this._params?.refreshUsers());const e={name:this._name.trim(),device_trackers:this._deviceTrackers,user_id:this._userId||null,picture:this._picture};this._params.entry?await this._params.updateEntry(e):(await this._params.createEntry(e),this._personExists=!0),this._params=void 0}catch(e){this._error=e?e.message:"Unknown error"}finally{this._submitting=!1}}},{kind:"method",key:"_deleteEntry",value:async function(){this._submitting=!0;try{await this._params.removeEntry()&&(this._params.entry.user_id&&(0,d.hG)(this.hass,this._params.entry.user_id),this._params=void 0)}finally{this._submitting=!1}}},{kind:"method",key:"_adminChanged",value:function(e){const s=e.target;this._isAdmin=s.checked}},{kind:"method",key:"_close",value:function(){!this._personExists&&this._userId&&((0,d.hG)(this.hass,this._userId),this._params?.refreshUsers(),this._userId=void 0),this._params=void 0}},{kind:"get",static:!0,key:"styles",value:function(){return[c.nA,t.AH`ha-password-field,ha-picture-upload,ha-textfield{display:block;margin-bottom:16px}ha-picture-upload{--file-upload-image-border-radius:50%}ha-settings-row{padding:0}a{color:var(--primary-color)}.error{color:var(--error-color);margin-bottom:16px}.building-selection{margin-bottom:16px}.building-selection label{display:block;margin-bottom:4px}.building-selection select{width:100%;padding:8px;font-size:14px}`]}}]}}),t.WF)},50070:(e,s,i)=>{i.d(s,{M:()=>n});var a=i(34897);const t=()=>Promise.all([i.e(36185),i.e(44238)]).then(i.bind(i,16442)),n=(e,s)=>{(0,a.r)(e,"show-dialog",{dialogTag:"dialog-admin-change-password",dialogImport:t,dialogParams:s})}}};
//# sourceMappingURL=9717.K_tAIYcPmJU.js.map