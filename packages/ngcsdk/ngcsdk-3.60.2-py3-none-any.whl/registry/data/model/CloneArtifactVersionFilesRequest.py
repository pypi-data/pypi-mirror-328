"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ArtifactTypeEnum import ArtifactTypeEnum
from .CloneableArtifact import CloneableArtifact

# Unused import over optimization prevention
str(repr(CloneableArtifact))
str(repr(ArtifactTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class CloneArtifactVersionFilesRequest(object):
    """Request to clone artifact version files"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.sourceArtifact = (
            None if not fromDict or propDict.get(
                "sourceArtifact"
            ) is None
            else propDict["sourceArtifact"])
        self.targetArtifact = (
            None if not fromDict or propDict.get(
                "targetArtifact"
            ) is None
            else propDict["targetArtifact"])

    @property
    def artifactType(self):
        """ArtifactTypeEnum: Artifact type"""
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<ArtifactTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def sourceArtifact(self):
        """CloneableArtifact: Cloneable Artifact Parameters object"""
        return self._sourceArtifact

    @sourceArtifact.setter
    def sourceArtifact(self, value):
        if value is not None and not isinstance(value, CloneableArtifact):
            value = CloneableArtifact(value)
        if (value is None) or isinstance(value, CloneableArtifact):
            self._sourceArtifact = value
        else:
            raise TypeError(
                'Property "sourceArtifact" of type "list<CloneableArtifact>" '
                'set to wrong type'
            )

    @property
    def targetArtifact(self):
        """CloneableArtifact: Cloneable Artifact Parameters object"""
        return self._targetArtifact

    @targetArtifact.setter
    def targetArtifact(self, value):
        if value is not None and not isinstance(value, CloneableArtifact):
            value = CloneableArtifact(value)
        if (value is None) or isinstance(value, CloneableArtifact):
            self._targetArtifact = value
        else:
            raise TypeError(
                'Property "targetArtifact" of type "list<CloneableArtifact>" '
                'set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._sourceArtifact:
            result["sourceArtifact"] = \
                self._sourceArtifact.toDict() if self._sourceArtifact is not None else None
        if self._targetArtifact:
            result["targetArtifact"] = \
                self._targetArtifact.toDict() if self._targetArtifact is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._sourceArtifact is not None): self._sourceArtifact.isValid()
        if (self._targetArtifact is not None): self._targetArtifact.isValid()
        return True
    

