name: Build and publish wheels

on:
  push:
    branches:
      - master
    tags:
      - "v*.*.*"  # Only run on version tags like v0.1.0



concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: py-rust-stemmers

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64
          - aarch64
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --sdist
          maturin-version: "v1.7.4"
      - name: Install built wheel
        run: |
          pip install --find-links dist/ --force-reinstall ${{ env.PACKAGE_NAME }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}-${{ matrix.python-version }}-macos
          path: dist


  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          maturin-version: "v1.7.4"
      - name: Install built wheel
        shell: bash
        run: |
          python -m pip install --find-links dist/ --force-reinstall ${{ env.PACKAGE_NAME }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python-version }}-windows
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64 ]
        manylinux: [ auto, 2_28, 2_17 ]
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist -i ${{ matrix.python-version }}
          maturin-version: "v1.7.4"
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install --find-links dist/ --force-reinstall ${{ env.PACKAGE_NAME }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}-${{ matrix.python-version }}-manylinux-${{ matrix.manylinux }}-linux
          path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ aarch64, armv7 ]
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -i ${{ matrix.python-version }}
          maturin-version: "v1.7.4"
      - uses: uraimo/run-on-arch-action@v2.8.1
        name: Install built wheel
        if: matrix.python-version == '3.10' # Only this version is available for ubuntu22.04 by default
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/dist:/dist"
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            pip3 install ${{ env.PACKAGE_NAME }} --no-index --find-links /dist/ --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}-${{ matrix.python-version }}-linux-cross
          path: dist

  musllinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist -i ${{ matrix.python-version }}
          maturin-version: "v1.7.4"
      - name: Install built wheel
        if: matrix.python-version == '3.12' # Only this version is available for alpine_latest by default
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            apk add py3-pip
            pip3 install ${{ env.PACKAGE_NAME }} --break-system-packages --no-index --find-links /io/dist/ --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}-${{ matrix.python-version }}-musllinux
          path: dist

  musllinux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-musleabihf
            arch: armv7
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_2
          args: --release --out dist -i ${{ matrix.python-version }}
          maturin-version: "v1.7.4"
      - uses: uraimo/run-on-arch-action@v2.8.1
        if: matrix.python-version == '3.12' # Only this version is available for alpine_latest by default
        name: Install built wheel
        with:
          arch: ${{ matrix.platform.arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            apk add py3-pip
          run: |
            pip3 install ${{ env.PACKAGE_NAME }} --break-system-packages --no-index --find-links dist/ --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.target }}-${{ matrix.python-version }}-musllinux-cross
          path: dist

  pypy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        target: [ x86_64, aarch64 ]
        python-version:
          - '3.10'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: pypy${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: "v1.7.4"
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -i pypy${{ matrix.python-version }}
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install --find-links dist/ --force-reinstall ${{ env.PACKAGE_NAME }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.target }}-${{ matrix.python-version }}-pypy
          path: dist

  merge-artifacts:
    runs-on: ubuntu-latest
    needs:
      - macos
      - windows
      - linux
      - linux-cross
      - musllinux
      - musllinux-cross
      - pypy
    steps:
      - uses: actions/upload-artifact/merge@v4
        with:
          name: wheels
          pattern: wheels-*
          delete-merged: false

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - merge-artifacts
    # Only run if triggered by a tag push
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - uses: actions/setup-python@v2
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
