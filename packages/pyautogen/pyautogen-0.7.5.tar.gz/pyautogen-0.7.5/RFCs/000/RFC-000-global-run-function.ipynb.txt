{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Any, Protocol, runtime_checkable\n",
    "\n",
    "from autogen import Agent\n",
    "\n",
    "\n",
    "class RunResponse:\n",
    "    pass\n",
    "\n",
    "\n",
    "class Cost:\n",
    "    def __init__(self, **kwargs: Any):\n",
    "        self._cost: dict[str, Any] = kwargs.copy()\n",
    "\n",
    "    @staticmethod\n",
    "    def _add_elements(key: str, x: dict[str, Any], y: dict[str, Any]) -> Any:\n",
    "        if key in x and key in y:\n",
    "            return x[key] + y[key]\n",
    "        elif key in x:\n",
    "            return x[key]\n",
    "        elif key in y:\n",
    "            return y[key]\n",
    "        else:\n",
    "            raise KeyError(f\"Key {key} not found in either dictionary\")\n",
    "\n",
    "    def __add__(self, other: \"Cost\") -> \"Cost\":\n",
    "        keys = set(self._cost.keys()) | set(other._cost.keys())\n",
    "        return Cost(**{key: self._add_elements(key, self._cost, other._cost) for key in keys})\n",
    "\n",
    "\n",
    "@runtime_checkable\n",
    "class EventProtocol(Protocol):\n",
    "    @property\n",
    "    def cost(self) -> Cost:\n",
    "        return Cost()\n",
    "\n",
    "\n",
    "class RunResponse:\n",
    "    @property\n",
    "    def events(self) -> list[EventProtocol]:\n",
    "        pass\n",
    "\n",
    "\n",
    "def run(\n",
    "    *agents: Agent,\n",
    ") -> RunResponse:\n",
    "    return RunResponse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "agents: list[Agent] = []\n",
    "\n",
    "response = run(*agents, message=\"What is the meaning of life?\")\n",
    "\n",
    "total_cost = Cost(0)\n",
    "for m in response.events:\n",
    "    total_cost += m.cost\n",
    "    if isinstance(m, InputRequest):\n",
    "        s = input(m.prompt)\n",
    "        m.respond(s)\n",
    "    elif isinstance(m, OutputMessage):\n",
    "        print(m.message)\n",
    "    elif isinstance(m, ToolRequest):\n",
    "        tool = m.tool"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv-3.10-core",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
