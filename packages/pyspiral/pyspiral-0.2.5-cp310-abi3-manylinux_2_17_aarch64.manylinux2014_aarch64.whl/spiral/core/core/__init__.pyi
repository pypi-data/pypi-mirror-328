from typing import Any

import pyarrow as pa
from spiral.core.manifests import FragmentManifest
from spiral.core.metastore import PyMetastore
from spiral.core.spec import ColumnGroup, ColumnGroupMetadata, KeyRange, Schema, WriteAheadLog
from spiral.expressions import Expr

class Table:
    def __init__(self, metastore: PyMetastore): ...

    id: str
    root_uri: str
    key_schema: Schema
    metastore: PyMetastore

    def get_wal(self, *, asof: int | None) -> WriteAheadLog: ...
    def get_column_group_metadata(self, column_group: ColumnGroup, *, asof: int | None) -> ColumnGroupMetadata: ...
    def list_column_groups(self, *, asof: int | None) -> list[ColumnGroup] | None: ...
    def get_schema(self, *, asof: int | None) -> Schema: ...

class TableScan:
    def __init__(
        self,
        projection: Expr,
        filter: Expr | None = None,
        asof: int | None = None,
        exclude_keys: bool = False,
        aux_schema: pa.Schema | None = None,
    ) -> TableScan: ...
    def key_schema(self) -> Schema: ...
    def schema(self) -> Schema: ...
    def is_empty(self) -> bool: ...
    def split(self) -> list[KeyRange]: ...
    def table_ids(self) -> list[str]: ...
    def column_groups(self) -> list[ColumnGroup]: ...
    def to_record_batches(self, aux_table: pa.Table | pa.RecordBatch | None = None) -> pa.RecordBatchReader: ...
    def column_group_scan(self, column_group: ColumnGroup) -> ColumnGroupScan: ...
    def key_space_scan(self, table_id: str) -> KeySpaceScan: ...
    def metrics(self) -> dict[str, Any]: ...

class KeySpaceScan:
    manifest: FragmentManifest

    def key_schema(self) -> Schema: ...

class ColumnGroupScan:
    manifest: FragmentManifest

    def schema(self) -> Schema: ...

def write(table: Table, expr: Expr, format: str = "parquet", *, partition_size: int | None = None): ...
def flush_wal(table: Table, manifest_format: str = "parquet"): ...
