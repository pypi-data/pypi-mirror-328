Metadata-Version: 2.4
Name: dynamixel-async
Version: 0.2.0
Summary: High-level Python library for Dynamixel servos with async support and comprehensive control table definitions
Author-email: Jae Won Yong <yongjaewon@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Jae Won Yong
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE. 
License-File: LICENSE
Keywords: async,control,dynamixel,motor,robotics,servo,xm430
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Hardware
Requires-Python: >=3.7
Requires-Dist: dynamixel-sdk>=3.7.0
Requires-Dist: pyserial>=3.5
Provides-Extra: dev
Requires-Dist: black>=22.0.0; extra == 'dev'
Requires-Dist: isort>=5.0.0; extra == 'dev'
Requires-Dist: mypy>=0.900; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.18.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Description-Content-Type: text/markdown

# Dynamixel Async

A high-level Python library for controlling Dynamixel servos with async support and comprehensive control table definitions.

## Features

- Asynchronous API for better performance and control
- Complete control table definitions for XM430 series servos
- High-level abstractions for common operations
- Type hints for better IDE support
- Comprehensive error handling
- Auto port detection

## Installation

```bash
pip install dynamixel-async
```

## Quick Start

```python
import asyncio
from dynamixel_async import DynamixelController

async def main():
    # Create controller instance (auto-detects port)
    controller = DynamixelController(baudrate=57600)
    
    try:
        # Connect and scan for servos
        await controller.connect()
        print(f"Connected servos: {controller.get_connected_ids()}")
        
        # Get first servo
        servo = controller.get_servo(1)
        if not servo:
            print("No servo found with ID 1")
            return
            
        # Enable torque
        servo.enable_torque()
        
        # Move to different positions
        positions = [0, 90, 180, 90, 0]
        for pos in positions:
            print(f"Moving to {pos} degrees...")
            servo.set_position(pos)
            await controller.wait_for_servos()
            
            # Read current position
            current_pos = servo.get_position()
            print(f"Current position: {current_pos:.1f} degrees")
            await asyncio.sleep(1.0)
            
    finally:
        # Clean up
        if controller:
            await controller.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
```

## Supported Models

Currently supports:
- XM430-W210
- XM430-W350

More models can be easily added by defining their control tables.

## Control Modes

Supports all XM430 control modes:
- Position Control
- Velocity Control
- Current Control
- Extended Position Control
- PWM Control

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details. 