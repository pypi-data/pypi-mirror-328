# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ApikeyTimeoutsArgs',
    'ApikeyTimeoutsArgsDict',
    'MetricsEndpointTimeoutsArgs',
    'MetricsEndpointTimeoutsArgsDict',
    'NamespaceCertificateFilterArgs',
    'NamespaceCertificateFilterArgsDict',
    'NamespaceCodecServerArgs',
    'NamespaceCodecServerArgsDict',
    'NamespaceEndpointsArgs',
    'NamespaceEndpointsArgsDict',
    'NamespaceTimeoutsArgs',
    'NamespaceTimeoutsArgsDict',
    'NexusEndpointTimeoutsArgs',
    'NexusEndpointTimeoutsArgsDict',
    'NexusEndpointWorkerTargetArgs',
    'NexusEndpointWorkerTargetArgsDict',
    'ServiceAccountNamespaceAccessArgs',
    'ServiceAccountNamespaceAccessArgsDict',
    'ServiceAccountTimeoutsArgs',
    'ServiceAccountTimeoutsArgsDict',
    'UserNamespaceAccessArgs',
    'UserNamespaceAccessArgsDict',
    'UserTimeoutsArgs',
    'UserTimeoutsArgsDict',
]

MYPY = False

if not MYPY:
    class ApikeyTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
elif False:
    ApikeyTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApikeyTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)


if not MYPY:
    class MetricsEndpointTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        update: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
elif False:
    MetricsEndpointTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MetricsEndpointTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param pulumi.Input[str] update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


if not MYPY:
    class NamespaceCertificateFilterArgsDict(TypedDict):
        common_name: NotRequired[pulumi.Input[str]]
        """
        The certificate's common name.
        """
        organization: NotRequired[pulumi.Input[str]]
        """
        The certificate's organization.
        """
        organizational_unit: NotRequired[pulumi.Input[str]]
        """
        The certificate's organizational unit.
        """
        subject_alternative_name: NotRequired[pulumi.Input[str]]
        """
        The certificate's subject alternative name (or SAN).
        """
elif False:
    NamespaceCertificateFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NamespaceCertificateFilterArgs:
    def __init__(__self__, *,
                 common_name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 organizational_unit: Optional[pulumi.Input[str]] = None,
                 subject_alternative_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] common_name: The certificate's common name.
        :param pulumi.Input[str] organization: The certificate's organization.
        :param pulumi.Input[str] organizational_unit: The certificate's organizational unit.
        :param pulumi.Input[str] subject_alternative_name: The certificate's subject alternative name (or SAN).
        """
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if subject_alternative_name is not None:
            pulumi.set(__self__, "subject_alternative_name", subject_alternative_name)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate's common name.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate's organization.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate's organizational unit.
        """
        return pulumi.get(self, "organizational_unit")

    @organizational_unit.setter
    def organizational_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organizational_unit", value)

    @property
    @pulumi.getter(name="subjectAlternativeName")
    def subject_alternative_name(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate's subject alternative name (or SAN).
        """
        return pulumi.get(self, "subject_alternative_name")

    @subject_alternative_name.setter
    def subject_alternative_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_alternative_name", value)


if not MYPY:
    class NamespaceCodecServerArgsDict(TypedDict):
        endpoint: pulumi.Input[str]
        """
        The endpoint of the codec server. Must begin with "https".
        """
        include_cross_origin_credentials: NotRequired[pulumi.Input[bool]]
        """
        If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
        """
        pass_access_token: NotRequired[pulumi.Input[bool]]
        """
        If true, Temporal Cloud will pass the access token to the codec server upon each request.
        """
elif False:
    NamespaceCodecServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NamespaceCodecServerArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 include_cross_origin_credentials: Optional[pulumi.Input[bool]] = None,
                 pass_access_token: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] endpoint: The endpoint of the codec server. Must begin with "https".
        :param pulumi.Input[bool] include_cross_origin_credentials: If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
        :param pulumi.Input[bool] pass_access_token: If true, Temporal Cloud will pass the access token to the codec server upon each request.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        if include_cross_origin_credentials is not None:
            pulumi.set(__self__, "include_cross_origin_credentials", include_cross_origin_credentials)
        if pass_access_token is not None:
            pulumi.set(__self__, "pass_access_token", pass_access_token)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint of the codec server. Must begin with "https".
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="includeCrossOriginCredentials")
    def include_cross_origin_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
        """
        return pulumi.get(self, "include_cross_origin_credentials")

    @include_cross_origin_credentials.setter
    def include_cross_origin_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_cross_origin_credentials", value)

    @property
    @pulumi.getter(name="passAccessToken")
    def pass_access_token(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, Temporal Cloud will pass the access token to the codec server upon each request.
        """
        return pulumi.get(self, "pass_access_token")

    @pass_access_token.setter
    def pass_access_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_access_token", value)


if not MYPY:
    class NamespaceEndpointsArgsDict(TypedDict):
        grpc_address: NotRequired[pulumi.Input[str]]
        """
        The gRPC address for API key client connections (may be empty if API keys are disabled).
        """
        mtls_grpc_address: NotRequired[pulumi.Input[str]]
        """
        The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
        """
        web_address: NotRequired[pulumi.Input[str]]
        """
        The address in the Temporal Cloud Web UI for the namespace
        """
elif False:
    NamespaceEndpointsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NamespaceEndpointsArgs:
    def __init__(__self__, *,
                 grpc_address: Optional[pulumi.Input[str]] = None,
                 mtls_grpc_address: Optional[pulumi.Input[str]] = None,
                 web_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] grpc_address: The gRPC address for API key client connections (may be empty if API keys are disabled).
        :param pulumi.Input[str] mtls_grpc_address: The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
        :param pulumi.Input[str] web_address: The address in the Temporal Cloud Web UI for the namespace
        """
        if grpc_address is not None:
            pulumi.set(__self__, "grpc_address", grpc_address)
        if mtls_grpc_address is not None:
            pulumi.set(__self__, "mtls_grpc_address", mtls_grpc_address)
        if web_address is not None:
            pulumi.set(__self__, "web_address", web_address)

    @property
    @pulumi.getter(name="grpcAddress")
    def grpc_address(self) -> Optional[pulumi.Input[str]]:
        """
        The gRPC address for API key client connections (may be empty if API keys are disabled).
        """
        return pulumi.get(self, "grpc_address")

    @grpc_address.setter
    def grpc_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grpc_address", value)

    @property
    @pulumi.getter(name="mtlsGrpcAddress")
    def mtls_grpc_address(self) -> Optional[pulumi.Input[str]]:
        """
        The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
        """
        return pulumi.get(self, "mtls_grpc_address")

    @mtls_grpc_address.setter
    def mtls_grpc_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtls_grpc_address", value)

    @property
    @pulumi.getter(name="webAddress")
    def web_address(self) -> Optional[pulumi.Input[str]]:
        """
        The address in the Temporal Cloud Web UI for the namespace
        """
        return pulumi.get(self, "web_address")

    @web_address.setter
    def web_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_address", value)


if not MYPY:
    class NamespaceTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
elif False:
    NamespaceTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NamespaceTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)


if not MYPY:
    class NexusEndpointTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
elif False:
    NexusEndpointTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NexusEndpointTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)


if not MYPY:
    class NexusEndpointWorkerTargetArgsDict(TypedDict):
        namespace_id: pulumi.Input[str]
        """
        The target cloud namespace to route requests to. Namespace must be in same account as the endpoint.
        """
        task_queue: pulumi.Input[str]
        """
        The task queue on the cloud namespace to route requests to.
        """
elif False:
    NexusEndpointWorkerTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NexusEndpointWorkerTargetArgs:
    def __init__(__self__, *,
                 namespace_id: pulumi.Input[str],
                 task_queue: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace_id: The target cloud namespace to route requests to. Namespace must be in same account as the endpoint.
        :param pulumi.Input[str] task_queue: The task queue on the cloud namespace to route requests to.
        """
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "task_queue", task_queue)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        """
        The target cloud namespace to route requests to. Namespace must be in same account as the endpoint.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="taskQueue")
    def task_queue(self) -> pulumi.Input[str]:
        """
        The task queue on the cloud namespace to route requests to.
        """
        return pulumi.get(self, "task_queue")

    @task_queue.setter
    def task_queue(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_queue", value)


if not MYPY:
    class ServiceAccountNamespaceAccessArgsDict(TypedDict):
        namespace_id: pulumi.Input[str]
        """
        The namespace to assign permissions to.
        """
        permission: pulumi.Input[str]
        """
        The permission to assign. Must be one of admin, write, or read (case-insensitive)
        """
elif False:
    ServiceAccountNamespaceAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceAccountNamespaceAccessArgs:
    def __init__(__self__, *,
                 namespace_id: pulumi.Input[str],
                 permission: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace_id: The namespace to assign permissions to.
        :param pulumi.Input[str] permission: The permission to assign. Must be one of admin, write, or read (case-insensitive)
        """
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "permission", permission)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        """
        The namespace to assign permissions to.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        """
        The permission to assign. Must be one of admin, write, or read (case-insensitive)
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)


if not MYPY:
    class ServiceAccountTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
elif False:
    ServiceAccountTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceAccountTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)


if not MYPY:
    class UserNamespaceAccessArgsDict(TypedDict):
        namespace_id: pulumi.Input[str]
        """
        The namespace to assign permissions to.
        """
        permission: pulumi.Input[str]
        """
        The permission to assign. Must be one of admin, write, or read (case-insensitive)
        """
elif False:
    UserNamespaceAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserNamespaceAccessArgs:
    def __init__(__self__, *,
                 namespace_id: pulumi.Input[str],
                 permission: pulumi.Input[str]):
        """
        :param pulumi.Input[str] namespace_id: The namespace to assign permissions to.
        :param pulumi.Input[str] permission: The permission to assign. Must be one of admin, write, or read (case-insensitive)
        """
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "permission", permission)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        """
        The namespace to assign permissions to.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        """
        The permission to assign. Must be one of admin, write, or read (case-insensitive)
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)


if not MYPY:
    class UserTimeoutsArgsDict(TypedDict):
        create: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        delete: NotRequired[pulumi.Input[str]]
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
elif False:
    UserTimeoutsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param pulumi.Input[str] delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)


