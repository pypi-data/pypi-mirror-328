# (generated with --quick)

import contextlib
from typing import Any, Callable, Iterator, ParamSpec, TypeVar, Union, overload

ContextDecorator: type[contextlib.ContextDecorator]
DEFAULT_DB_ALIAS: Any
DatabaseError: Any
Error: Any
ProgrammingError: Any
connections: Any

_P = ParamSpec('_P')
_T0 = TypeVar('_T0')
_T_co = TypeVar('_T_co')

class Atomic(contextlib.ContextDecorator):
    __doc__: str
    _from_testcase: bool
    durable: Any
    savepoint: Any
    using: Any
    def __enter__(self) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: BaseException, traceback) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: BaseException, traceback) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: None, traceback) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: None, traceback) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: BaseException, traceback: None) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: BaseException, traceback: None) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: None, traceback: None) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: None, traceback: None) -> None: ...
    def __init__(self, using, savepoint, durable) -> None: ...

class TransactionManagementError(Any):
    __doc__: str

def atomic(using: _T0 = ..., savepoint = ..., durable = ...) -> Union[Atomic, _T0]: ...
def clean_savepoints(using = ...) -> None: ...
def commit(using = ...) -> None: ...
def contextmanager(func: Callable[_P, Iterator[_T_co]]) -> Callable[_P, contextlib._GeneratorContextManager[_T_co]]: ...
def get_autocommit(using = ...) -> Any: ...
def get_connection(using = ...) -> Any: ...
def get_rollback(using = ...) -> Any: ...
def mark_for_rollback_on_error(using = ...) -> contextlib._GeneratorContextManager: ...
def on_commit(func, using = ..., robust = ...) -> None: ...
def rollback(using = ...) -> None: ...
def savepoint(using = ...) -> Any: ...
def savepoint_commit(sid, using = ...) -> None: ...
def savepoint_rollback(sid, using = ...) -> None: ...
def set_autocommit(autocommit, using = ...) -> Any: ...
def set_rollback(rollback, using = ...) -> Any: ...
