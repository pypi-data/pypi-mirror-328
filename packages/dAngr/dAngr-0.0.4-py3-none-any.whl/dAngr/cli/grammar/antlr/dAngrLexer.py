# Generated from /workspaces/dAngr/src/dAngr/cli/grammar/dAngr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from .dAngrParser import dAngrParser


def serializedATN():
    return [
        4,0,78,473,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,230,
        8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,18,3,18,260,8,18,1,18,1,18,5,18,264,8,18,10,18,12,18,
        267,9,18,1,19,4,19,270,8,19,11,19,12,19,271,1,20,1,20,1,20,1,20,
        4,20,278,8,20,11,20,12,20,279,1,21,4,21,283,8,21,11,21,12,21,284,
        1,22,1,22,1,23,4,23,290,8,23,11,23,12,23,291,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,1,30,5,30,330,8,30,10,30,12,30,333,9,30,
        1,30,5,30,336,8,30,10,30,12,30,339,9,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,5,30,349,8,30,10,30,12,30,352,9,30,1,30,5,30,355,
        8,30,10,30,12,30,358,9,30,1,30,1,30,3,30,362,8,30,1,31,1,31,1,31,
        1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
        1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
        1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
        1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,61,
        1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,65,
        1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,
        1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,
        1,76,1,77,1,77,0,0,78,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
        107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
        63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,
        145,73,147,74,149,75,151,76,153,77,155,78,1,0,7,3,0,48,57,65,70,
        97,102,1,0,48,57,2,0,65,90,97,122,1,0,34,34,1,0,39,39,3,0,39,39,
        48,48,92,92,3,0,34,34,48,48,92,92,488,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
        1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
        1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
        0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
        1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,
        0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,
        0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,
        151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,1,157,1,0,0,0,3,164,1,0,
        0,0,5,168,1,0,0,0,7,173,1,0,0,0,9,178,1,0,0,0,11,184,1,0,0,0,13,
        188,1,0,0,0,15,191,1,0,0,0,17,196,1,0,0,0,19,200,1,0,0,0,21,203,
        1,0,0,0,23,210,1,0,0,0,25,214,1,0,0,0,27,229,1,0,0,0,29,231,1,0,
        0,0,31,236,1,0,0,0,33,243,1,0,0,0,35,249,1,0,0,0,37,259,1,0,0,0,
        39,269,1,0,0,0,41,273,1,0,0,0,43,282,1,0,0,0,45,286,1,0,0,0,47,289,
        1,0,0,0,49,293,1,0,0,0,51,295,1,0,0,0,53,300,1,0,0,0,55,305,1,0,
        0,0,57,311,1,0,0,0,59,316,1,0,0,0,61,361,1,0,0,0,63,363,1,0,0,0,
        65,366,1,0,0,0,67,369,1,0,0,0,69,372,1,0,0,0,71,375,1,0,0,0,73,378,
        1,0,0,0,75,381,1,0,0,0,77,383,1,0,0,0,79,385,1,0,0,0,81,387,1,0,
        0,0,83,389,1,0,0,0,85,391,1,0,0,0,87,393,1,0,0,0,89,395,1,0,0,0,
        91,397,1,0,0,0,93,399,1,0,0,0,95,401,1,0,0,0,97,403,1,0,0,0,99,405,
        1,0,0,0,101,407,1,0,0,0,103,409,1,0,0,0,105,411,1,0,0,0,107,413,
        1,0,0,0,109,415,1,0,0,0,111,417,1,0,0,0,113,419,1,0,0,0,115,421,
        1,0,0,0,117,423,1,0,0,0,119,425,1,0,0,0,121,427,1,0,0,0,123,430,
        1,0,0,0,125,433,1,0,0,0,127,436,1,0,0,0,129,439,1,0,0,0,131,441,
        1,0,0,0,133,444,1,0,0,0,135,447,1,0,0,0,137,449,1,0,0,0,139,451,
        1,0,0,0,141,454,1,0,0,0,143,457,1,0,0,0,145,460,1,0,0,0,147,463,
        1,0,0,0,149,465,1,0,0,0,151,467,1,0,0,0,153,469,1,0,0,0,155,471,
        1,0,0,0,157,158,5,115,0,0,158,159,5,116,0,0,159,160,5,97,0,0,160,
        161,5,116,0,0,161,162,5,105,0,0,162,163,5,99,0,0,163,2,1,0,0,0,164,
        165,5,73,0,0,165,166,5,73,0,0,166,167,5,70,0,0,167,4,1,0,0,0,168,
        169,5,84,0,0,169,170,5,72,0,0,170,171,5,69,0,0,171,172,5,78,0,0,
        172,6,1,0,0,0,173,174,5,69,0,0,174,175,5,76,0,0,175,176,5,83,0,0,
        176,177,5,69,0,0,177,8,1,0,0,0,178,179,5,114,0,0,179,180,5,97,0,
        0,180,181,5,110,0,0,181,182,5,103,0,0,182,183,5,101,0,0,183,10,1,
        0,0,0,184,185,5,100,0,0,185,186,5,101,0,0,186,187,5,102,0,0,187,
        12,1,0,0,0,188,189,5,105,0,0,189,190,5,102,0,0,190,14,1,0,0,0,191,
        192,5,101,0,0,192,193,5,108,0,0,193,194,5,115,0,0,194,195,5,101,
        0,0,195,16,1,0,0,0,196,197,5,102,0,0,197,198,5,111,0,0,198,199,5,
        114,0,0,199,18,1,0,0,0,200,201,5,105,0,0,201,202,5,110,0,0,202,20,
        1,0,0,0,203,204,5,110,0,0,204,205,5,111,0,0,205,206,5,116,0,0,206,
        207,5,32,0,0,207,208,5,105,0,0,208,209,5,110,0,0,209,22,1,0,0,0,
        210,211,5,110,0,0,211,212,5,111,0,0,212,213,5,116,0,0,213,24,1,0,
        0,0,214,215,5,119,0,0,215,216,5,104,0,0,216,217,5,105,0,0,217,218,
        5,108,0,0,218,219,5,101,0,0,219,26,1,0,0,0,220,221,5,84,0,0,221,
        222,5,114,0,0,222,223,5,117,0,0,223,230,5,101,0,0,224,225,5,70,0,
        0,225,226,5,97,0,0,226,227,5,108,0,0,227,228,5,115,0,0,228,230,5,
        101,0,0,229,220,1,0,0,0,229,224,1,0,0,0,230,28,1,0,0,0,231,232,5,
        104,0,0,232,233,5,101,0,0,233,234,5,108,0,0,234,235,5,112,0,0,235,
        30,1,0,0,0,236,237,5,114,0,0,237,238,5,101,0,0,238,239,5,116,0,0,
        239,240,5,117,0,0,240,241,5,114,0,0,241,242,5,110,0,0,242,32,1,0,
        0,0,243,244,5,98,0,0,244,245,5,114,0,0,245,246,5,101,0,0,246,247,
        5,97,0,0,247,248,5,107,0,0,248,34,1,0,0,0,249,250,5,99,0,0,250,251,
        5,111,0,0,251,252,5,110,0,0,252,253,5,116,0,0,253,254,5,105,0,0,
        254,255,5,110,0,0,255,256,5,117,0,0,256,257,5,101,0,0,257,36,1,0,
        0,0,258,260,5,13,0,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,1,0,
        0,0,261,265,5,10,0,0,262,264,5,32,0,0,263,262,1,0,0,0,264,267,1,
        0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,38,1,0,0,0,267,265,1,0,
        0,0,268,270,5,32,0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,1,0,
        0,0,271,272,1,0,0,0,272,40,1,0,0,0,273,274,5,48,0,0,274,275,5,120,
        0,0,275,277,1,0,0,0,276,278,7,0,0,0,277,276,1,0,0,0,278,279,1,0,
        0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,42,1,0,0,0,281,283,3,45,
        22,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,1,0,
        0,0,285,44,1,0,0,0,286,287,7,1,0,0,287,46,1,0,0,0,288,290,3,49,24,
        0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,
        0,292,48,1,0,0,0,293,294,7,2,0,0,294,50,1,0,0,0,295,296,5,38,0,0,
        296,297,5,115,0,0,297,298,5,121,0,0,298,299,5,109,0,0,299,52,1,0,
        0,0,300,301,5,38,0,0,301,302,5,114,0,0,302,303,5,101,0,0,303,304,
        5,103,0,0,304,54,1,0,0,0,305,306,5,38,0,0,306,307,5,118,0,0,307,
        308,5,97,0,0,308,309,5,114,0,0,309,310,5,115,0,0,310,56,1,0,0,0,
        311,312,5,38,0,0,312,313,5,109,0,0,313,314,5,101,0,0,314,315,5,109,
        0,0,315,58,1,0,0,0,316,317,5,38,0,0,317,318,5,115,0,0,318,319,5,
        116,0,0,319,320,5,97,0,0,320,321,5,116,0,0,321,322,5,101,0,0,322,
        60,1,0,0,0,323,337,3,91,45,0,324,336,3,65,32,0,325,326,5,92,0,0,
        326,327,5,120,0,0,327,331,1,0,0,0,328,330,7,1,0,0,329,328,1,0,0,
        0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,336,1,0,0,
        0,333,331,1,0,0,0,334,336,8,3,0,0,335,324,1,0,0,0,335,325,1,0,0,
        0,335,334,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,
        0,338,340,1,0,0,0,339,337,1,0,0,0,340,341,3,91,45,0,341,362,1,0,
        0,0,342,356,3,93,46,0,343,355,3,67,33,0,344,345,5,92,0,0,345,346,
        5,120,0,0,346,350,1,0,0,0,347,349,7,1,0,0,348,347,1,0,0,0,349,352,
        1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,355,1,0,0,0,352,350,
        1,0,0,0,353,355,8,4,0,0,354,343,1,0,0,0,354,344,1,0,0,0,354,353,
        1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,359,
        1,0,0,0,358,356,1,0,0,0,359,360,3,93,46,0,360,362,1,0,0,0,361,323,
        1,0,0,0,361,342,1,0,0,0,362,62,1,0,0,0,363,364,5,98,0,0,364,365,
        3,61,30,0,365,64,1,0,0,0,366,367,5,92,0,0,367,368,3,71,35,0,368,
        66,1,0,0,0,369,370,5,92,0,0,370,371,3,69,34,0,371,68,1,0,0,0,372,
        373,5,92,0,0,373,374,7,5,0,0,374,70,1,0,0,0,375,376,5,92,0,0,376,
        377,7,6,0,0,377,72,1,0,0,0,378,379,5,45,0,0,379,380,5,62,0,0,380,
        74,1,0,0,0,381,382,5,40,0,0,382,76,1,0,0,0,383,384,5,41,0,0,384,
        78,1,0,0,0,385,386,5,33,0,0,386,80,1,0,0,0,387,388,5,38,0,0,388,
        82,1,0,0,0,389,390,5,36,0,0,390,84,1,0,0,0,391,392,5,58,0,0,392,
        86,1,0,0,0,393,394,5,59,0,0,394,88,1,0,0,0,395,396,5,44,0,0,396,
        90,1,0,0,0,397,398,5,34,0,0,398,92,1,0,0,0,399,400,5,39,0,0,400,
        94,1,0,0,0,401,402,5,64,0,0,402,96,1,0,0,0,403,404,5,46,0,0,404,
        98,1,0,0,0,405,406,5,124,0,0,406,100,1,0,0,0,407,408,5,91,0,0,408,
        102,1,0,0,0,409,410,5,93,0,0,410,104,1,0,0,0,411,412,5,123,0,0,412,
        106,1,0,0,0,413,414,5,125,0,0,414,108,1,0,0,0,415,416,5,94,0,0,416,
        110,1,0,0,0,417,418,5,35,0,0,418,112,1,0,0,0,419,420,5,37,0,0,420,
        114,1,0,0,0,421,422,5,42,0,0,422,116,1,0,0,0,423,424,5,43,0,0,424,
        118,1,0,0,0,425,426,5,47,0,0,426,120,1,0,0,0,427,428,5,47,0,0,428,
        429,5,47,0,0,429,122,1,0,0,0,430,431,5,60,0,0,431,432,5,60,0,0,432,
        124,1,0,0,0,433,434,5,62,0,0,434,435,5,62,0,0,435,126,1,0,0,0,436,
        437,5,42,0,0,437,438,5,42,0,0,438,128,1,0,0,0,439,440,5,61,0,0,440,
        130,1,0,0,0,441,442,5,61,0,0,442,443,5,61,0,0,443,132,1,0,0,0,444,
        445,5,33,0,0,445,446,5,61,0,0,446,134,1,0,0,0,447,448,5,60,0,0,448,
        136,1,0,0,0,449,450,5,62,0,0,450,138,1,0,0,0,451,452,5,60,0,0,452,
        453,5,61,0,0,453,140,1,0,0,0,454,455,5,62,0,0,455,456,5,61,0,0,456,
        142,1,0,0,0,457,458,5,38,0,0,458,459,5,38,0,0,459,144,1,0,0,0,460,
        461,5,124,0,0,461,462,5,124,0,0,462,146,1,0,0,0,463,464,5,63,0,0,
        464,148,1,0,0,0,465,466,5,126,0,0,466,150,1,0,0,0,467,468,5,96,0,
        0,468,152,1,0,0,0,469,470,5,95,0,0,470,154,1,0,0,0,471,472,5,45,
        0,0,472,156,1,0,0,0,15,0,229,259,265,271,279,284,291,331,335,337,
        350,354,356,361,0
    ]

class dAngrLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    STATIC = 1
    CIF = 2
    CTHEN = 3
    CELSE = 4
    RANGE = 5
    DEF = 6
    IF = 7
    ELSE = 8
    FOR = 9
    IN = 10
    NOT_IN = 11
    NOT = 12
    WHILE = 13
    BOOL = 14
    HELP = 15
    RETURN = 16
    BREAK = 17
    CONTINUE = 18
    NEWLINE = 19
    WS = 20
    HEX_NUMBERS = 21
    NUMBERS = 22
    NUMBER = 23
    LETTERS = 24
    LETTER = 25
    SYM_DB = 26
    REG_DB = 27
    VARS_DB = 28
    MEM_DB = 29
    STATE = 30
    STRING = 31
    BINARY_STRING = 32
    ESCAPED_QUOTE = 33
    ESCAPED_SINGLE_QUOTE = 34
    SESC_SEQ = 35
    ESC_SEQ = 36
    ARROW = 37
    LPAREN = 38
    RPAREN = 39
    BANG = 40
    AMP = 41
    DOLLAR = 42
    COLON = 43
    SCOLON = 44
    COMMA = 45
    QUOTE = 46
    SQUOTE = 47
    AT = 48
    DOT = 49
    BAR = 50
    BRA = 51
    KET = 52
    BRACE = 53
    KETCE = 54
    XOR = 55
    HASH = 56
    PERC = 57
    MUL = 58
    ADD = 59
    DIV = 60
    FLOORDIV = 61
    LSHIFT = 62
    RSHIFT = 63
    POW = 64
    ASSIGN = 65
    EQ = 66
    NEQ = 67
    LT = 68
    GT = 69
    LE = 70
    GE = 71
    AND = 72
    OR = 73
    QMARK = 74
    TILDE = 75
    TICK = 76
    UNDERSCORE = 77
    DASH = 78

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'static'", "'IIF'", "'THEN'", "'ELSE'", "'range'", "'def'", 
            "'if'", "'else'", "'for'", "'in'", "'not in'", "'not'", "'while'", 
            "'help'", "'return'", "'break'", "'continue'", "'&sym'", "'&reg'", 
            "'&vars'", "'&mem'", "'&state'", "'->'", "'('", "')'", "'!'", 
            "'&'", "'$'", "':'", "';'", "','", "'\"'", "'''", "'@'", "'.'", 
            "'|'", "'['", "']'", "'{'", "'}'", "'^'", "'#'", "'%'", "'*'", 
            "'+'", "'/'", "'//'", "'<<'", "'>>'", "'**'", "'='", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'?'", 
            "'~'", "'`'", "'_'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "STATIC", "CIF", "CTHEN", "CELSE", "RANGE", "DEF", "IF", "ELSE", 
            "FOR", "IN", "NOT_IN", "NOT", "WHILE", "BOOL", "HELP", "RETURN", 
            "BREAK", "CONTINUE", "NEWLINE", "WS", "HEX_NUMBERS", "NUMBERS", 
            "NUMBER", "LETTERS", "LETTER", "SYM_DB", "REG_DB", "VARS_DB", 
            "MEM_DB", "STATE", "STRING", "BINARY_STRING", "ESCAPED_QUOTE", 
            "ESCAPED_SINGLE_QUOTE", "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", 
            "RPAREN", "BANG", "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", 
            "QUOTE", "SQUOTE", "AT", "DOT", "BAR", "BRA", "KET", "BRACE", 
            "KETCE", "XOR", "HASH", "PERC", "MUL", "ADD", "DIV", "FLOORDIV", 
            "LSHIFT", "RSHIFT", "POW", "ASSIGN", "EQ", "NEQ", "LT", "GT", 
            "LE", "GE", "AND", "OR", "QMARK", "TILDE", "TICK", "UNDERSCORE", 
            "DASH" ]

    ruleNames = [ "STATIC", "CIF", "CTHEN", "CELSE", "RANGE", "DEF", "IF", 
                  "ELSE", "FOR", "IN", "NOT_IN", "NOT", "WHILE", "BOOL", 
                  "HELP", "RETURN", "BREAK", "CONTINUE", "NEWLINE", "WS", 
                  "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", "LETTER", 
                  "SYM_DB", "REG_DB", "VARS_DB", "MEM_DB", "STATE", "STRING", 
                  "BINARY_STRING", "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", 
                  "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", "RPAREN", "BANG", 
                  "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", "QUOTE", 
                  "SQUOTE", "AT", "DOT", "BAR", "BRA", "KET", "BRACE", "KETCE", 
                  "XOR", "HASH", "PERC", "MUL", "ADD", "DIV", "FLOORDIV", 
                  "LSHIFT", "RSHIFT", "POW", "ASSIGN", "EQ", "NEQ", "LT", 
                  "GT", "LE", "GE", "AND", "OR", "QMARK", "TILDE", "TICK", 
                  "UNDERSCORE", "DASH" ]

    grammarFileName = "dAngr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class dAngrDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: dangr_Lexer = lexer

        def pull_token(self):
            return super(dAngrLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.dAngrDenter(self, self.NEWLINE, dAngrParser.INDENT, dAngrParser.DEDENT, False)
        return self.denter.next_token()



