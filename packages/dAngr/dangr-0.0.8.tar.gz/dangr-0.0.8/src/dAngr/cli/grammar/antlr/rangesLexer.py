# Generated from /workspaces/dAngr/src/dAngr/cli/grammar/ranges.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,60,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,1,0,1,0,4,0,126,8,0,11,0,12,0,127,1,1,4,1,131,
        8,1,11,1,12,1,132,1,2,1,2,1,3,4,3,138,8,3,11,3,12,3,139,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,10,5,10,178,8,10,10,10,12,10,181,9,10,1,10,5,10,184,8,
        10,10,10,12,10,187,9,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        5,10,197,8,10,10,10,12,10,200,9,10,1,10,5,10,203,8,10,10,10,12,10,
        206,9,10,1,10,1,10,3,10,210,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,
        13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,
        37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,
        42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,
        47,1,47,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,
        52,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,
        58,3,58,323,8,58,1,58,1,58,1,59,4,59,328,8,59,11,59,12,59,329,0,
        0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
        56,113,57,115,58,117,59,119,60,1,0,8,3,0,48,57,65,70,97,102,1,0,
        48,57,2,0,65,90,97,122,1,0,34,34,1,0,39,39,3,0,39,39,48,48,92,92,
        3,0,34,34,48,48,92,92,2,0,9,9,32,32,344,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,
        0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,1,121,1,0,0,0,3,
        130,1,0,0,0,5,134,1,0,0,0,7,137,1,0,0,0,9,141,1,0,0,0,11,143,1,0,
        0,0,13,148,1,0,0,0,15,153,1,0,0,0,17,159,1,0,0,0,19,164,1,0,0,0,
        21,209,1,0,0,0,23,211,1,0,0,0,25,214,1,0,0,0,27,217,1,0,0,0,29,220,
        1,0,0,0,31,223,1,0,0,0,33,226,1,0,0,0,35,229,1,0,0,0,37,231,1,0,
        0,0,39,233,1,0,0,0,41,235,1,0,0,0,43,237,1,0,0,0,45,239,1,0,0,0,
        47,241,1,0,0,0,49,243,1,0,0,0,51,245,1,0,0,0,53,247,1,0,0,0,55,249,
        1,0,0,0,57,251,1,0,0,0,59,253,1,0,0,0,61,255,1,0,0,0,63,257,1,0,
        0,0,65,259,1,0,0,0,67,261,1,0,0,0,69,263,1,0,0,0,71,265,1,0,0,0,
        73,267,1,0,0,0,75,269,1,0,0,0,77,271,1,0,0,0,79,273,1,0,0,0,81,275,
        1,0,0,0,83,278,1,0,0,0,85,281,1,0,0,0,87,284,1,0,0,0,89,287,1,0,
        0,0,91,289,1,0,0,0,93,292,1,0,0,0,95,295,1,0,0,0,97,297,1,0,0,0,
        99,299,1,0,0,0,101,302,1,0,0,0,103,305,1,0,0,0,105,308,1,0,0,0,107,
        311,1,0,0,0,109,313,1,0,0,0,111,315,1,0,0,0,113,317,1,0,0,0,115,
        319,1,0,0,0,117,322,1,0,0,0,119,327,1,0,0,0,121,122,5,48,0,0,122,
        123,5,120,0,0,123,125,1,0,0,0,124,126,7,0,0,0,125,124,1,0,0,0,126,
        127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,2,1,0,0,0,129,131,
        3,5,2,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,
        1,0,0,0,133,4,1,0,0,0,134,135,7,1,0,0,135,6,1,0,0,0,136,138,3,9,
        4,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,140,1,0,
        0,0,140,8,1,0,0,0,141,142,7,2,0,0,142,10,1,0,0,0,143,144,5,38,0,
        0,144,145,5,115,0,0,145,146,5,121,0,0,146,147,5,109,0,0,147,12,1,
        0,0,0,148,149,5,38,0,0,149,150,5,114,0,0,150,151,5,101,0,0,151,152,
        5,103,0,0,152,14,1,0,0,0,153,154,5,38,0,0,154,155,5,118,0,0,155,
        156,5,97,0,0,156,157,5,114,0,0,157,158,5,115,0,0,158,16,1,0,0,0,
        159,160,5,38,0,0,160,161,5,109,0,0,161,162,5,101,0,0,162,163,5,109,
        0,0,163,18,1,0,0,0,164,165,5,38,0,0,165,166,5,115,0,0,166,167,5,
        116,0,0,167,168,5,97,0,0,168,169,5,116,0,0,169,170,5,101,0,0,170,
        20,1,0,0,0,171,185,3,51,25,0,172,184,3,25,12,0,173,174,5,92,0,0,
        174,175,5,120,0,0,175,179,1,0,0,0,176,178,7,1,0,0,177,176,1,0,0,
        0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,184,1,0,0,
        0,181,179,1,0,0,0,182,184,8,3,0,0,183,172,1,0,0,0,183,173,1,0,0,
        0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,
        0,186,188,1,0,0,0,187,185,1,0,0,0,188,189,3,51,25,0,189,210,1,0,
        0,0,190,204,3,53,26,0,191,203,3,27,13,0,192,193,5,92,0,0,193,194,
        5,120,0,0,194,198,1,0,0,0,195,197,7,1,0,0,196,195,1,0,0,0,197,200,
        1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,203,1,0,0,0,200,198,
        1,0,0,0,201,203,8,4,0,0,202,191,1,0,0,0,202,192,1,0,0,0,202,201,
        1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,207,
        1,0,0,0,206,204,1,0,0,0,207,208,3,53,26,0,208,210,1,0,0,0,209,171,
        1,0,0,0,209,190,1,0,0,0,210,22,1,0,0,0,211,212,5,98,0,0,212,213,
        3,21,10,0,213,24,1,0,0,0,214,215,5,92,0,0,215,216,3,31,15,0,216,
        26,1,0,0,0,217,218,5,92,0,0,218,219,3,29,14,0,219,28,1,0,0,0,220,
        221,5,92,0,0,221,222,7,5,0,0,222,30,1,0,0,0,223,224,5,92,0,0,224,
        225,7,6,0,0,225,32,1,0,0,0,226,227,5,45,0,0,227,228,5,62,0,0,228,
        34,1,0,0,0,229,230,5,40,0,0,230,36,1,0,0,0,231,232,5,41,0,0,232,
        38,1,0,0,0,233,234,5,33,0,0,234,40,1,0,0,0,235,236,5,38,0,0,236,
        42,1,0,0,0,237,238,5,36,0,0,238,44,1,0,0,0,239,240,5,58,0,0,240,
        46,1,0,0,0,241,242,5,59,0,0,242,48,1,0,0,0,243,244,5,44,0,0,244,
        50,1,0,0,0,245,246,5,34,0,0,246,52,1,0,0,0,247,248,5,39,0,0,248,
        54,1,0,0,0,249,250,5,64,0,0,250,56,1,0,0,0,251,252,5,46,0,0,252,
        58,1,0,0,0,253,254,5,124,0,0,254,60,1,0,0,0,255,256,5,91,0,0,256,
        62,1,0,0,0,257,258,5,93,0,0,258,64,1,0,0,0,259,260,5,123,0,0,260,
        66,1,0,0,0,261,262,5,125,0,0,262,68,1,0,0,0,263,264,5,94,0,0,264,
        70,1,0,0,0,265,266,5,35,0,0,266,72,1,0,0,0,267,268,5,37,0,0,268,
        74,1,0,0,0,269,270,5,42,0,0,270,76,1,0,0,0,271,272,5,43,0,0,272,
        78,1,0,0,0,273,274,5,47,0,0,274,80,1,0,0,0,275,276,5,47,0,0,276,
        277,5,47,0,0,277,82,1,0,0,0,278,279,5,60,0,0,279,280,5,60,0,0,280,
        84,1,0,0,0,281,282,5,62,0,0,282,283,5,62,0,0,283,86,1,0,0,0,284,
        285,5,42,0,0,285,286,5,42,0,0,286,88,1,0,0,0,287,288,5,61,0,0,288,
        90,1,0,0,0,289,290,5,61,0,0,290,291,5,61,0,0,291,92,1,0,0,0,292,
        293,5,33,0,0,293,294,5,61,0,0,294,94,1,0,0,0,295,296,5,60,0,0,296,
        96,1,0,0,0,297,298,5,62,0,0,298,98,1,0,0,0,299,300,5,60,0,0,300,
        301,5,61,0,0,301,100,1,0,0,0,302,303,5,62,0,0,303,304,5,61,0,0,304,
        102,1,0,0,0,305,306,5,38,0,0,306,307,5,38,0,0,307,104,1,0,0,0,308,
        309,5,124,0,0,309,310,5,124,0,0,310,106,1,0,0,0,311,312,5,63,0,0,
        312,108,1,0,0,0,313,314,5,126,0,0,314,110,1,0,0,0,315,316,5,96,0,
        0,316,112,1,0,0,0,317,318,5,95,0,0,318,114,1,0,0,0,319,320,5,45,
        0,0,320,116,1,0,0,0,321,323,5,13,0,0,322,321,1,0,0,0,322,323,1,0,
        0,0,323,324,1,0,0,0,324,325,5,10,0,0,325,118,1,0,0,0,326,328,7,7,
        0,0,327,326,1,0,0,0,328,329,1,0,0,0,329,327,1,0,0,0,329,330,1,0,
        0,0,330,120,1,0,0,0,13,0,127,132,139,179,183,185,198,202,204,209,
        322,329,0
    ]

class rangesLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    HEX_NUMBERS = 1
    NUMBERS = 2
    NUMBER = 3
    LETTERS = 4
    LETTER = 5
    SYM_DB = 6
    REG_DB = 7
    VARS_DB = 8
    MEM_DB = 9
    STATE = 10
    STRING = 11
    BINARY_STRING = 12
    ESCAPED_QUOTE = 13
    ESCAPED_SINGLE_QUOTE = 14
    SESC_SEQ = 15
    ESC_SEQ = 16
    ARROW = 17
    LPAREN = 18
    RPAREN = 19
    BANG = 20
    AMP = 21
    DOLLAR = 22
    COLON = 23
    SCOLON = 24
    COMMA = 25
    QUOTE = 26
    SQUOTE = 27
    AT = 28
    DOT = 29
    BAR = 30
    BRA = 31
    KET = 32
    BRACE = 33
    KETCE = 34
    XOR = 35
    HASH = 36
    PERC = 37
    MUL = 38
    ADD = 39
    DIV = 40
    FLOORDIV = 41
    LSHIFT = 42
    RSHIFT = 43
    POW = 44
    ASSIGN = 45
    EQ = 46
    NEQ = 47
    LT = 48
    GT = 49
    LE = 50
    GE = 51
    AND = 52
    OR = 53
    QMARK = 54
    TILDE = 55
    TICK = 56
    UNDERSCORE = 57
    DASH = 58
    NEWLINE = 59
    WS = 60

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'&sym'", "'&reg'", "'&vars'", "'&mem'", "'&state'", "'->'", 
            "'('", "')'", "'!'", "'&'", "'$'", "':'", "';'", "','", "'\"'", 
            "'''", "'@'", "'.'", "'|'", "'['", "']'", "'{'", "'}'", "'^'", 
            "'#'", "'%'", "'*'", "'+'", "'/'", "'//'", "'<<'", "'>>'", "'**'", 
            "'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", 
            "'||'", "'?'", "'~'", "'`'", "'_'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", "LETTER", "SYM_DB", 
            "REG_DB", "VARS_DB", "MEM_DB", "STATE", "STRING", "BINARY_STRING", 
            "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", "SESC_SEQ", "ESC_SEQ", 
            "ARROW", "LPAREN", "RPAREN", "BANG", "AMP", "DOLLAR", "COLON", 
            "SCOLON", "COMMA", "QUOTE", "SQUOTE", "AT", "DOT", "BAR", "BRA", 
            "KET", "BRACE", "KETCE", "XOR", "HASH", "PERC", "MUL", "ADD", 
            "DIV", "FLOORDIV", "LSHIFT", "RSHIFT", "POW", "ASSIGN", "EQ", 
            "NEQ", "LT", "GT", "LE", "GE", "AND", "OR", "QMARK", "TILDE", 
            "TICK", "UNDERSCORE", "DASH", "NEWLINE", "WS" ]

    ruleNames = [ "HEX_NUMBERS", "NUMBERS", "NUMBER", "LETTERS", "LETTER", 
                  "SYM_DB", "REG_DB", "VARS_DB", "MEM_DB", "STATE", "STRING", 
                  "BINARY_STRING", "ESCAPED_QUOTE", "ESCAPED_SINGLE_QUOTE", 
                  "SESC_SEQ", "ESC_SEQ", "ARROW", "LPAREN", "RPAREN", "BANG", 
                  "AMP", "DOLLAR", "COLON", "SCOLON", "COMMA", "QUOTE", 
                  "SQUOTE", "AT", "DOT", "BAR", "BRA", "KET", "BRACE", "KETCE", 
                  "XOR", "HASH", "PERC", "MUL", "ADD", "DIV", "FLOORDIV", 
                  "LSHIFT", "RSHIFT", "POW", "ASSIGN", "EQ", "NEQ", "LT", 
                  "GT", "LE", "GE", "AND", "OR", "QMARK", "TILDE", "TICK", 
                  "UNDERSCORE", "DASH", "NEWLINE", "WS" ]

    grammarFileName = "ranges.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


