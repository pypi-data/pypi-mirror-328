Metadata-Version: 2.4
Name: sportmonks-py
Version: 0.0.8
Summary: A Python package to interact with the SportMonks API
Project-URL: Repository, https://github.com/christophermccallan/sportmonks-py
Project-URL: Issues, https://github.com/christophermccallan/sportmonks-py/issues
Project-URL: Changelog, https://github.com/christophermccallan/sportmonks-py/blob/main/Changelog
Author: Chris McCallan
Maintainer-email: Chris McCallan <chris.mccallan+sportmonks@hotmail.co.uk>
License: MIT License
        
        Copyright (c) 2024 cmccallan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Keywords: api,apiv3,data,football,soccer,sportmonks
Requires-Python: >=3.9
Requires-Dist: aiohttp>=3.11.10
Requires-Dist: asyncio>=3.4.3
Requires-Dist: datetime>=5.5
Requires-Dist: http-client>=0.1.22
Requires-Dist: pytest-asyncio>=0.25.0
Requires-Dist: pytest>=8.3.3
Requires-Dist: pytz>=2024.2
Requires-Dist: responses>=0.25.3
Requires-Dist: ruff>=0.8.2
Requires-Dist: sphinx-rtd-theme>=3.0.2
Requires-Dist: sphinx>=7.4.7
Requires-Dist: tzlocal>=5.2
Description-Content-Type: text/markdown

# sportmonks-py
Python Package for SportsMonks API

Full details on the SportMonks API can be found [here](https://docs.sportmonks.com/football/) 

### Football

V3 of the SportMonks API is split into defined `Entities`, as listed below

- Fixture
- League, Season, Schedule, Stage and Round
- Team, Player, Squad, Coach and Referee
- Statistic
- Expected
- Standing and Topscorer
- Odd and Prediction
- Other

SportMonks imposes rate limits per entity (3000 per hour), hence this package separates endpoints by entity. More information
on entity rate limits can be viewed in the SportMonks documentation [here](https://docs.sportmonks.com/football/api/rate-limit).

For brevity and ease of use, entities have been mapped to a shortened keyword as below

| Entity Name | API Endpoint |
| ------------|--------------|
| Fixture     | fixture      |
 |League, Season, Schedule, Stage and Round | leagues      |
 | Team, Player, Squad, Coach and Referee | teams        |
| Statistic | statistics   |
| Expected | expected     |
| Standing and Topscorer | standings    |
| Odd and Prediction | odds         |
| Other | misc         |

### Documentation
Full documentation can be found at [ReadTheDocs](https://sportmonks-py.readthedocs.io/en/stable/)

### Installation

```bash
pip install sportmonks-py
```


#### Examples

See the `examples` directory for more examples on how to use the package.

### Returns
Given the size of the potential responses all calls return a generator object. This allows for the handling of large responses without the need to load the entire response into memory. The generator object can be iterated over to get the full response. The generators are defined depending on whether the call was asynchronous or not:
```python
StdResponse = Iterable[Iterator[dict[str, Any]]]
```
A standard (non-async) response is an iterable of iterators of dictionaries. The dictionaries contain the response data. The response data is paginated, so the iterators are used to iterate over the pages of data. 
```python
AsyncResponse = AsyncIterator[Iterator[dict[str, Any]]]
```
An async response is an async iterable of dictionaries. The dictionaries contain the response data. The response data is paginated, so the async iterable is used to iterate over the pages of data.

See the examples below for more information on how to use the response objects.
