from collections.abc import Hashable, Sequence
from typing import Any

import numpy as np
import pandas as pd
import plotly.graph_objs.layout.newselection as _newselection
import plotly.graph_objs.layout.template as _template
from plotly.basedatatypes import BaseLayoutType as _BaseLayoutType
from plotly.graph_objs.layout import (
    Activeselection,
    Activeshape,
    Annotation,
    Coloraxis,
    Colorscale,
    Font,
    Geo,
    Grid,
    Hoverlabel,
    Image,
    Legend,
    Map,
    Mapbox,
    Margin,
    Modebar,
    Newselection,
    Newshape,
    Polar,
    Scene,
    Selection,
    Shape,
    Slider,
    Smith,
    Template,
    Ternary,
    Title,
    Transition,
    Uniformtext,
    Updatemenu,
    XAxis,
    YAxis,
)

class Layout(_BaseLayoutType):
    _subplotid_prop_names = ...
    _subplotid_prop_re = ...
    _parent_path_str = ...
    _path_str = ...
    _valid_props = ...
    @property
    def activeselection(self) -> Activeselection | dict[str, str | int | float]: ...
    @activeselection.setter
    def activeselection(self, val: Activeselection | dict[str, str | int | float]) -> None: ...
    @property
    def activeshape(self) -> Activeshape | dict[str, str | int | float]: ...
    @activeshape.setter
    def activeshape(self, val: Activeshape | dict[str, str | int | float]) -> None: ...
    @property
    def annotations(self) -> Sequence[Annotation] | Sequence[dict[str, Any]]: ...
    @annotations.setter
    def annotations(self, val: Sequence[Annotation] | Sequence[dict[str, Any]]) -> None: ...
    @property
    def annotationdefaults(self) -> Annotation | dict[str, Any]: ...
    @annotationdefaults.setter
    def annotationdefaults(self, val: Annotation | dict[str, Any]) -> None: ...
    @property
    def autosize(self) -> bool: ...
    @autosize.setter
    def autosize(self, val: bool) -> None: ...
    @property
    def autotypenumbers(self) -> str: ...
    @autotypenumbers.setter
    def autotypenumbers(self, val: str) -> None: ...
    @property
    def barcornerradius(self) -> str | int: ...
    @barcornerradius.setter
    def barcornerradius(self, val: str | int) -> None: ...
    @property
    def bargap(self) -> int | float: ...
    @bargap.setter
    def bargap(self, val: int | float) -> None: ...
    @property
    def bargroupgap(self) -> int | float: ...
    @bargroupgap.setter
    def bargroupgap(self, val: int | float) -> None: ...
    @property
    def barmode(self) -> str: ...
    @barmode.setter
    def barmode(self, val: str) -> None: ...
    @property
    def barnorm(self) -> str: ...
    @barnorm.setter
    def barnorm(self, val: str) -> None: ...
    @property
    def boxgap(self) -> int | float: ...
    @boxgap.setter
    def boxgap(self, val: int | float) -> None: ...
    @property
    def boxgroupgap(self) -> int | float: ...
    @boxgroupgap.setter
    def boxgroupgap(self, val: int | float) -> None: ...
    @property
    def boxmode(self) -> str: ...
    @boxmode.setter
    def boxmode(self, val: str) -> None: ...
    @property
    def calendar(self) -> str: ...
    @calendar.setter
    def calendar(self, val: str) -> None: ...
    @property
    def clickmode(self) -> str: ...
    @clickmode.setter
    def clickmode(self, val: str) -> None: ...
    @property
    def coloraxis(self) -> Coloraxis | dict[str, Any]: ...
    @coloraxis.setter
    def coloraxis(self, val: Coloraxis | dict[str, Any]) -> None: ...
    @property
    def colorscale(self) -> Colorscale | dict[str, str]: ...
    @colorscale.setter
    def colorscale(self, val: Colorscale | dict[str, str]) -> None: ...
    @property
    def colorway(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]: ...
    @colorway.setter
    def colorway(
        self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]
    ) -> None: ...
    @property
    def computed(self) -> Any: ...
    @computed.setter
    def computed(self, val: Any) -> None: ...
    @property
    def datarevision(self) -> Hashable | None: ...
    @datarevision.setter
    def datarevision(self, val: Hashable | None) -> None: ...
    @property
    def dragmode(self) -> str | bool: ...
    @dragmode.setter
    def dragmode(self, val: str | bool) -> None: ...
    @property
    def editrevision(self) -> Hashable: ...
    @editrevision.setter
    def editrevision(self, val: Hashable) -> None: ...
    @property
    def extendfunnelareacolors(self) -> bool: ...
    @extendfunnelareacolors.setter
    def extendfunnelareacolors(self, val: bool) -> None: ...
    @property
    def extendiciclecolors(self) -> bool: ...
    @extendiciclecolors.setter
    def extendiciclecolors(self, val: bool) -> None: ...
    @property
    def extendpiecolors(self) -> bool: ...
    @extendpiecolors.setter
    def extendpiecolors(self, val: bool) -> None: ...
    @property
    def extendsunburstcolors(self) -> bool: ...
    @extendsunburstcolors.setter
    def extendsunburstcolors(self, val: bool) -> None: ...
    @property
    def extendtreemapcolors(self) -> bool: ...
    @extendtreemapcolors.setter
    def extendtreemapcolors(self, val: bool) -> None: ...
    @property
    def font(self) -> Font | dict[str, Any]: ...
    @font.setter
    def font(self, val: Font | dict[str, Any]) -> None: ...
    @property
    def funnelareacolorway(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]: ...
    @funnelareacolorway.setter
    def funnelareacolorway(
        self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]
    ) -> None: ...
    @property
    def funnelgap(self) -> int | float: ...
    @funnelgap.setter
    def funnelgap(self, val: int | float) -> None: ...
    @property
    def funnelgroupgap(self) -> int | float: ...
    @funnelgroupgap.setter
    def funnelgroupgap(self, val: int | float) -> None: ...
    @property
    def funnelmode(self) -> str: ...
    @funnelmode.setter
    def funnelmode(self, val: str) -> None: ...
    @property
    def geo(self) -> Geo | dict[str, Any]: ...
    @geo.setter
    def geo(self, val: Geo | dict[str, Any]) -> None: ...
    @property
    def grid(self) -> Grid | dict[str, Any]: ...
    @grid.setter
    def grid(self, val: Grid | dict[str, Any]) -> None: ...
    @property
    def height(self) -> int | float: ...
    @height.setter
    def height(self, val: int | float) -> None: ...
    @property
    def hiddenlabels(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]: ...
    @hiddenlabels.setter
    def hiddenlabels(
        self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]
    ) -> None: ...
    @property
    def hiddenlabelssrc(self) -> str: ...
    @hiddenlabelssrc.setter
    def hiddenlabelssrc(self, val: str) -> None: ...
    @property
    def hidesources(self) -> bool: ...
    @hidesources.setter
    def hidesources(self, val: bool) -> None: ...
    @property
    def hoverdistance(self) -> int: ...
    @hoverdistance.setter
    def hoverdistance(self, val: int) -> None: ...
    @property
    def hoverlabel(self) -> Hoverlabel | dict[str, Any]: ...
    @hoverlabel.setter
    def hoverlabel(self, val: Hoverlabel | dict[str, Any]) -> None: ...
    @property
    def hovermode(self) -> str | bool: ...
    @hovermode.setter
    def hovermode(self, val: str | bool) -> None: ...
    @property
    def hoversubplots(self) -> str: ...
    @hoversubplots.setter
    def hoversubplots(self, val: str) -> None: ...
    @property
    def iciclecolorway(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]: ...
    @iciclecolorway.setter
    def iciclecolorway(
        self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]
    ) -> None: ...
    @property
    def images(self) -> Sequence[Image] | Sequence[dict[str, Any]]: ...
    @images.setter
    def images(self, val: Sequence[Image] | Sequence[dict[str, Any]]) -> None: ...
    @property
    def imagedefaults(self) -> Image | dict[str, Any]: ...
    @imagedefaults.setter
    def imagedefaults(self, val: Image | dict[str, Any]) -> None: ...
    @property
    def legend(self) -> Legend | dict[str, Any]: ...
    @legend.setter
    def legend(self, val: Legend | dict[str, Any]) -> None: ...
    @property
    def map(self) -> Map | dict[str, Any]: ...
    @map.setter
    def map(self, val: Map | dict[str, Any]) -> None: ...
    @property
    def mapbox(self) -> Mapbox | dict[str, Any]: ...
    @mapbox.setter
    def mapbox(self, val: Mapbox | dict[str, Any]) -> None: ...
    @property
    def margin(self) -> Margin | dict[str, bool | int | float]: ...
    @margin.setter
    def margin(self, val: Margin | dict[str, bool | int | float]) -> None: ...
    @property
    def meta(self) -> Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any]: ...
    @meta.setter
    def meta(self, val: Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any]) -> None: ...
    @property
    def metasrc(self) -> str: ...
    @metasrc.setter
    def metasrc(self, val: str) -> None: ...
    @property
    def minreducedheight(self) -> int | float: ...
    @minreducedheight.setter
    def minreducedheight(self, val: int | float) -> None: ...
    @property
    def minreducedwidth(self) -> int | float: ...
    @minreducedwidth.setter
    def minreducedwidth(self, val: int | float) -> None: ...
    @property
    def modebar(self) -> Modebar | dict[str, Any]: ...
    @modebar.setter
    def modebar(self, val: Modebar | dict[str, Any]) -> None: ...
    @property
    def newselection(self) -> Newselection | dict[str, _newselection.Line | dict[str, Any] | str]: ...
    @newselection.setter
    def newselection(self, val: Newselection | dict[str, _newselection.Line | dict[str, Any] | str]) -> None: ...
    @property
    def newshape(self) -> Newshape | dict[str, Any]: ...
    @newshape.setter
    def newshape(self, val: Newshape | dict[str, Any]) -> None: ...
    @property
    def paper_bgcolor(self) -> str: ...
    @paper_bgcolor.setter
    def paper_bgcolor(self, val: str) -> None: ...
    @property
    def piecolorway(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]: ...
    @piecolorway.setter
    def piecolorway(
        self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]
    ) -> None: ...
    @property
    def plot_bgcolor(self) -> str: ...
    @plot_bgcolor.setter
    def plot_bgcolor(self, val: str) -> None: ...
    @property
    def polar(self) -> Polar | dict[str, Any]: ...
    @polar.setter
    def polar(self, val: Polar | dict[str, Any]) -> None: ...
    @property
    def scattergap(self) -> int | float: ...
    @scattergap.setter
    def scattergap(self, val: int | float) -> None: ...
    @property
    def scattermode(self) -> str: ...
    @scattermode.setter
    def scattermode(self, val: str) -> None: ...
    @property
    def scene(self) -> Scene | dict[str, Any]: ...
    @scene.setter
    def scene(self, val: Scene | dict[str, Any]) -> None: ...
    @property
    def selectdirection(self) -> str: ...
    @selectdirection.setter
    def selectdirection(self, val: str) -> None: ...
    @property
    def selectionrevision(self) -> Hashable: ...
    @selectionrevision.setter
    def selectionrevision(self, val: Hashable) -> None: ...
    @property
    def selections(self) -> Sequence[Selection] | Sequence[dict[str, Any]]: ...
    @selections.setter
    def selections(self, val: Sequence[Selection] | Sequence[dict[str, Any]]) -> None: ...
    @property
    def selectiondefaults(self) -> Selection | dict[str, Any]: ...
    @selectiondefaults.setter
    def selectiondefaults(self, val: Selection | dict[str, Any]) -> None: ...
    @property
    def separators(self) -> str: ...
    @separators.setter
    def separators(self, val: str) -> None: ...
    @property
    def shapes(self) -> Sequence[Shape] | Sequence[dict[str, Any]]: ...
    @shapes.setter
    def shapes(self, val: Sequence[Shape] | Sequence[dict[str, Any]]) -> None: ...
    @property
    def shapedefaults(self) -> Shape | dict[str, Any]: ...
    @shapedefaults.setter
    def shapedefaults(self, val: Shape | dict[str, Any]) -> None: ...
    @property
    def showlegend(self) -> bool: ...
    @showlegend.setter
    def showlegend(self, val: bool) -> None: ...
    @property
    def sliders(self) -> Sequence[Slider] | Sequence[dict[str, Any]]: ...
    @sliders.setter
    def sliders(self, val: Sequence[Slider] | Sequence[dict[str, Any]]) -> None: ...
    @property
    def sliderdefaults(self) -> Slider | dict[str, Any]: ...
    @sliderdefaults.setter
    def sliderdefaults(self, val: Slider | dict[str, Any]) -> None: ...
    @property
    def smith(self) -> Smith | dict[str, Any]: ...
    @smith.setter
    def smith(self, val: Smith | dict[str, Any]) -> None: ...
    @property
    def spikedistance(self) -> int: ...
    @spikedistance.setter
    def spikedistance(self, val: int) -> None: ...
    @property
    def sunburstcolorway(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]: ...
    @sunburstcolorway.setter
    def sunburstcolorway(
        self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]
    ) -> None: ...
    @property
    def template(self) -> Template | dict[str, _template.Data | Layout | dict[str, Any]]: ...
    @template.setter
    def template(self, val: Template | dict[str, _template.Data | Layout | dict[str, Any]]) -> None: ...
    @property
    def ternary(self) -> Ternary | dict[str, Any]: ...
    @ternary.setter
    def ternary(self, val: Ternary | dict[str, Any]) -> None: ...
    @property
    def title(self) -> Title | dict[str, Any]: ...
    @title.setter
    def title(self, val: Title | dict[str, Any]) -> None: ...
    @property
    def transition(self) -> Transition | dict[str, Any]: ...
    @transition.setter
    def transition(self, val: Transition | dict[str, Any]) -> None: ...
    @property
    def treemapcolorway(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]: ...
    @treemapcolorway.setter
    def treemapcolorway(
        self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]
    ) -> None: ...
    @property
    def uirevision(self) -> Hashable: ...
    @uirevision.setter
    def uirevision(self, val: Hashable) -> None: ...
    @property
    def uniformtext(self) -> Uniformtext | dict[str, int | float | str]: ...
    @uniformtext.setter
    def uniformtext(self, val: Uniformtext | dict[str, int | float | str]) -> None: ...
    @property
    def updatemenus(self) -> Sequence[Updatemenu] | Sequence[dict[str, Any]]: ...
    @updatemenus.setter
    def updatemenus(self, val: Sequence[Updatemenu] | Sequence[dict[str, Any]]) -> None: ...
    @property
    def updatemenudefaults(self) -> Updatemenu | dict[str, Any]: ...
    @updatemenudefaults.setter
    def updatemenudefaults(self, val: Updatemenu | dict[str, Any]) -> None: ...
    @property
    def violingap(self) -> int | float: ...
    @violingap.setter
    def violingap(self, val: int | float) -> None: ...
    @property
    def violingroupgap(self) -> int | float: ...
    @violingroupgap.setter
    def violingroupgap(self, val: int | float) -> None: ...
    @property
    def violinmode(self) -> str: ...
    @violinmode.setter
    def violinmode(self, val: str) -> None: ...
    @property
    def waterfallgap(self) -> int | float: ...
    @waterfallgap.setter
    def waterfallgap(self, val: int | float) -> None: ...
    @property
    def waterfallgroupgap(self) -> int | float: ...
    @waterfallgroupgap.setter
    def waterfallgroupgap(self, val: int | float) -> None: ...
    @property
    def waterfallmode(self) -> str: ...
    @waterfallmode.setter
    def waterfallmode(self, val: str) -> None: ...
    @property
    def width(self) -> int | float: ...
    @width.setter
    def width(self, val: int | float) -> None: ...
    @property
    def xaxis(self) -> XAxis | dict[str, Any]: ...
    @xaxis.setter
    def xaxis(self, val: XAxis | dict[str, Any]) -> None: ...
    @property
    def yaxis(self) -> YAxis | dict[str, Any]: ...
    @yaxis.setter
    def yaxis(self, val: YAxis | dict[str, Any]) -> None: ...
    def __init__(
        self,
        arg: Layout | dict[str, Any] | None = ...,
        activeselection: Activeselection | dict[str, str | int | float] | None = ...,
        activeshape: Activeshape | dict[str, str | int | float] | None = ...,
        annotations: Sequence[Annotation] | Sequence[dict[str, Any]] | None = ...,
        annotationdefaults: Annotation | dict[str, Any] | None = ...,
        autosize: bool | None = ...,
        autotypenumbers: str | None = ...,
        barcornerradius: str | int | None = ...,
        bargap: int | float | None = ...,
        bargroupgap: int | float | None = ...,
        barmode: str | None = ...,
        barnorm: str | None = ...,
        boxgap: int | float | None = ...,
        boxgroupgap: int | float | None = ...,
        boxmode: str | None = ...,
        calendar: str | None = ...,
        clickmode: str | None = ...,
        coloraxis: str | None = ...,
        colorscale: str | list[str] | list[tuple[float, str]] | None = ...,
        colorway: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None = ...,
        computed: Any | None = ...,
        datarevision: Hashable | None = ...,
        dragmode: str | bool | None = ...,
        editrevision: Hashable | None = ...,
        extendfunnelareacolors: bool | None = ...,
        extendiciclecolors: bool | None = ...,
        extendpiecolors: bool | None = ...,
        extendsunburstcolors: bool | None = ...,
        extendtreemapcolors: bool | None = ...,
        font: Font | dict[str, Any] | None = ...,
        funnelareacolorway: Sequence[str]
        | np.ndarray[tuple[int, ...], np.dtype[np.str_]]
        | pd.Series[str]
        | None = ...,
        funnelgap: int | float | None = ...,
        funnelgroupgap: int | float | None = ...,
        funnelmode: str | None = ...,
        geo: Geo | dict[str, Any] | None = ...,
        grid: Grid | dict[str, Any] | None = ...,
        height: int | float | None = ...,
        hiddenlabels: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None = ...,
        hiddenlabelssrc: str | None = ...,
        hidesources: bool | None = ...,
        hoverdistance: int | None = ...,
        hoverlabel: Hoverlabel | dict[str, Any] | None = ...,
        hovermode: str | bool | None = ...,
        hoversubplots: str | None = ...,
        iciclecolorway: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None = ...,
        images: Sequence[Image] | Sequence[dict[str, Any]] | None = ...,
        imagedefaults: Image | dict[str, Any] | None = ...,
        legend: Legend | dict[str, Any] | None = ...,
        map: Map | dict[str, Any] | None = ...,
        mapbox: Mapbox | dict[str, Any] | None = ...,
        margin: Margin | dict[str, Any] | None = ...,
        meta: Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any] | None = ...,
        metasrc: str | None = ...,
        minreducedheight: int | float | None = ...,
        minreducedwidth: int | float | None = ...,
        modebar: Modebar | dict[str, Any] | None = ...,
        newselection: Newselection | dict[str, _newselection.Line | dict[str, Any] | str] | None = ...,
        newshape: Newshape | dict[str, Any] | None = ...,
        paper_bgcolor: str | None = ...,
        piecolorway: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None = ...,
        plot_bgcolor: str | None = ...,
        polar: Polar | dict[str, Any] | None = ...,
        scattergap: int | float | None = ...,
        scattermode: str | None = ...,
        scene: str | None = ...,
        selectdirection: str | None = ...,
        selectionrevision: Hashable | None = ...,
        selections: Sequence[Selection] | Sequence[dict[str, Any]] | None = ...,
        selectiondefaults: Selection | dict[str, Any] | None = ...,
        separators: str | None = ...,
        shapes: Sequence[Shape] | Sequence[dict[str, Any]] | None = ...,
        shapedefaults: Shape | dict[str, Any] | None = ...,
        showlegend: bool | None = ...,
        sliders: Sequence[Slider] | Sequence[dict[str, Any]] | None = ...,
        sliderdefaults: Slider | dict[str, Any] | None = ...,
        smith: Smith | dict[str, Any] | None = ...,
        spikedistance: int | None = ...,
        sunburstcolorway: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None = ...,
        template: Template | dict[str, _template.Data | Layout | dict[str, Any]] | None = ...,
        ternary: Ternary | dict[str, Any] | None = ...,
        title: Title | dict[str, Any] | None = ...,
        transition: Transition | dict[str, Any] | None = ...,
        treemapcolorway: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None = ...,
        uirevision: Hashable | None = ...,
        uniformtext: Uniformtext | dict[str, int | float | str] | None = ...,
        updatemenus: Sequence[Updatemenu] | Sequence[dict[str, Any]] | None = ...,
        updatemenudefaults: Updatemenu | dict[str, Any] | None = ...,
        violingap: int | float | None = ...,
        violingroupgap: int | float | None = ...,
        violinmode: str | None = ...,
        waterfallgap: int | float | None = ...,
        waterfallgroupgap: int | float | None = ...,
        waterfallmode: str | None = ...,
        width: int | float | None = ...,
        xaxis: XAxis | dict[str, Any] | None = ...,
        yaxis: YAxis | dict[str, Any] | None = ...,
        **kwargs: Any,
    ) -> None: ...
