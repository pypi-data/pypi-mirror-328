from collections.abc import Hashable, Sequence
from typing import Any

import numpy as np
import pandas as pd
from plotly.basedatatypes import BaseTraceType as _BaseTraceType
from plotly.graph_objs.contour import (
    ColorBar,
    Contours,
    Hoverlabel,
    Legendgrouptitle,
    Line,
    Stream,
    Textfont,
)

class Contour(_BaseTraceType):
    _parent_path_str = ...
    _path_str = ...
    _valid_props = ...
    @property
    def autocolorscale(self) -> bool: ...
    @autocolorscale.setter
    def autocolorscale(self, val: bool) -> None: ...
    @property
    def autocontour(self) -> bool: ...
    @autocontour.setter
    def autocontour(self, val: bool) -> None: ...
    @property
    def coloraxis(self) -> str: ...
    @coloraxis.setter
    def coloraxis(self, val: str) -> None: ...
    @property
    def colorbar(self) -> ColorBar | dict[str, Any]: ...
    @colorbar.setter
    def colorbar(self, val: ColorBar | dict[str, Any]) -> None: ...
    @property
    def colorscale(self) -> str | list[str] | list[tuple[float, str]]: ...
    @colorscale.setter
    def colorscale(self, val: str | list[str] | list[tuple[float, str]]) -> None: ...
    @property
    def connectgaps(self) -> bool: ...
    @connectgaps.setter
    def connectgaps(self, val: bool) -> None: ...
    @property
    def contours(self) -> Contours | dict[str, Any]: ...
    @contours.setter
    def contours(self, val: Contours | dict[str, Any]) -> None: ...
    @property
    def customdata(self) -> Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @customdata.setter
    def customdata(
        self, val: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]
    ) -> None: ...
    @property
    def customdatasrc(self) -> str: ...
    @customdatasrc.setter
    def customdatasrc(self, val: str) -> None: ...
    @property
    def dx(self) -> int | float: ...
    @dx.setter
    def dx(self, val: int | float) -> None: ...
    @property
    def dy(self) -> int | float: ...
    @dy.setter
    def dy(self, val: int | float) -> None: ...
    @property
    def fillcolor(self) -> str: ...
    @fillcolor.setter
    def fillcolor(self, val: str) -> None: ...
    @property
    def hoverinfo(self) -> str | Sequence[str]: ...
    @hoverinfo.setter
    def hoverinfo(self, val: str | Sequence[str]) -> None: ...
    @property
    def hoverinfosrc(self) -> str: ...
    @hoverinfosrc.setter
    def hoverinfosrc(self, val: str) -> None: ...
    @property
    def hoverlabel(self) -> Hoverlabel | dict[str, Any]: ...
    @hoverlabel.setter
    def hoverlabel(self, val: Hoverlabel | dict[str, Any]) -> None: ...
    @property
    def hoverongaps(self) -> bool: ...
    @hoverongaps.setter
    def hoverongaps(self, val: bool) -> None: ...
    @property
    def hovertemplate(
        self,
    ) -> str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]: ...
    @hovertemplate.setter
    def hovertemplate(
        self, val: str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
    ) -> None: ...
    @property
    def hovertemplatesrc(self) -> str: ...
    @hovertemplatesrc.setter
    def hovertemplatesrc(self, val: str) -> None: ...
    @property
    def hovertext(
        self,
    ) -> str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]: ...
    @hovertext.setter
    def hovertext(
        self, val: str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
    ) -> None: ...
    @property
    def hovertextsrc(self) -> str: ...
    @hovertextsrc.setter
    def hovertextsrc(self, val: str) -> None: ...
    @property
    def ids(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]: ...
    @ids.setter
    def ids(self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str]) -> None: ...
    @property
    def idssrc(self) -> str: ...
    @idssrc.setter
    def idssrc(self, val: str) -> None: ...
    @property
    def legend(self) -> str: ...
    @legend.setter
    def legend(self, val: str) -> None: ...
    @property
    def legendgroup(self) -> str | int: ...
    @legendgroup.setter
    def legendgroup(self, val: str | int) -> None: ...
    @property
    def legendgrouptitle(self) -> Legendgrouptitle | dict[str, Any]: ...
    @legendgrouptitle.setter
    def legendgrouptitle(self, val: Legendgrouptitle | dict[str, Any]) -> None: ...
    @property
    def legendrank(self) -> int | float: ...
    @legendrank.setter
    def legendrank(self, val: int | float) -> None: ...
    @property
    def legendwidth(self) -> int | float: ...
    @legendwidth.setter
    def legendwidth(self, val: int | float) -> None: ...
    @property
    def line(self) -> Line | dict[str, str | int | float]: ...
    @line.setter
    def line(self, val: Line | dict[str, str | int | float]) -> None: ...
    @property
    def meta(self) -> Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any]: ...
    @meta.setter
    def meta(self, val: Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any]) -> None: ...
    @property
    def metasrc(self) -> str: ...
    @metasrc.setter
    def metasrc(self, val: str) -> None: ...
    @property
    def name(self) -> str | int: ...
    @name.setter
    def name(self, val: str | int) -> None: ...
    @property
    def ncontours(self) -> int: ...
    @ncontours.setter
    def ncontours(self, val: int) -> None: ...
    @property
    def opacity(self) -> int | float: ...
    @opacity.setter
    def opacity(self, val: int | float) -> None: ...
    @property
    def reversescale(self) -> bool: ...
    @reversescale.setter
    def reversescale(self, val: bool) -> None: ...
    @property
    def showlegend(self) -> bool: ...
    @showlegend.setter
    def showlegend(self, val: bool) -> None: ...
    @property
    def showscale(self) -> bool: ...
    @showscale.setter
    def showscale(self, val: bool) -> None: ...
    @property
    def stream(self) -> Stream | dict[str, int | str]: ...
    @stream.setter
    def stream(self, val: Stream | dict[str, int | str]) -> None: ...
    @property
    def text(
        self,
    ) -> str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]: ...
    @text.setter
    def text(
        self, val: str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
    ) -> None: ...
    @property
    def textfont(self) -> Textfont | dict[str, Any]: ...
    @textfont.setter
    def textfont(self, val: Textfont | dict[str, Any]) -> None: ...
    @property
    def textsrc(self) -> str: ...
    @textsrc.setter
    def textsrc(self, val: str) -> None: ...
    @property
    def texttemplate(self) -> str: ...
    @texttemplate.setter
    def texttemplate(self, val: str) -> None: ...
    @property
    def transpose(self) -> bool: ...
    @transpose.setter
    def transpose(self, val: bool) -> None: ...
    @property
    def uid(self) -> str | int: ...
    @uid.setter
    def uid(self, val: str | int) -> None: ...
    @property
    def uirevision(self) -> Hashable: ...
    @uirevision.setter
    def uirevision(self, val: Hashable) -> None: ...
    @property
    def visible(self) -> bool | str: ...
    @visible.setter
    def visible(self, val: bool | str) -> None: ...
    @property
    def x(
        self,
    ) -> Sequence[int] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @x.setter
    def x(
        self,
        val: Sequence[int] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float],
    ) -> None: ...
    @property
    def x0(self) -> int | float: ...
    @x0.setter
    def x0(self, val: int | float) -> None: ...
    @property
    def xaxis(self) -> str: ...
    @xaxis.setter
    def xaxis(self, val: str) -> None: ...
    @property
    def xcalendar(self) -> str: ...
    @xcalendar.setter
    def xcalendar(self, val: str) -> None: ...
    @property
    def xhoverformat(self) -> str: ...
    @xhoverformat.setter
    def xhoverformat(self, val: str) -> None: ...
    @property
    def xperiod(self) -> int | float | str: ...
    @xperiod.setter
    def xperiod(self, val: int | float | str) -> None: ...
    @property
    def xperiod0(self) -> int | float | str: ...
    @xperiod0.setter
    def xperiod0(self, val: int | float | str) -> None: ...
    @property
    def xperiodalignment(self) -> str: ...
    @xperiodalignment.setter
    def xperiodalignment(self, val: str) -> None: ...
    @property
    def xsrc(self) -> str: ...
    @xsrc.setter
    def xsrc(self, val: str) -> None: ...
    @property
    def xtype(self) -> str: ...
    @xtype.setter
    def xtype(self, val: str) -> None: ...
    @property
    def y(
        self,
    ) -> Sequence[int] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @y.setter
    def y(
        self,
        val: Sequence[int] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float],
    ) -> None: ...
    @property
    def y0(self) -> int | float: ...
    @y0.setter
    def y0(self, val: int | float) -> None: ...
    @property
    def yaxis(self) -> str: ...
    @yaxis.setter
    def yaxis(self, val: str) -> None: ...
    @property
    def ycalendar(self) -> str: ...
    @ycalendar.setter
    def ycalendar(self, val: str) -> None: ...
    @property
    def yhoverformat(self) -> str: ...
    @yhoverformat.setter
    def yhoverformat(self, val: str) -> None: ...
    @property
    def yperiod(self) -> int | float | str: ...
    @yperiod.setter
    def yperiod(self, val: int | float | str) -> None: ...
    @property
    def yperiod0(self) -> int | float | str: ...
    @yperiod0.setter
    def yperiod0(self, val: int | float | str) -> None: ...
    @property
    def yperiodalignment(self) -> str: ...
    @yperiodalignment.setter
    def yperiodalignment(self, val: str) -> None: ...
    @property
    def ysrc(self) -> str: ...
    @ysrc.setter
    def ysrc(self, val: str) -> None: ...
    @property
    def ytype(self) -> str: ...
    @ytype.setter
    def ytype(self, val: str) -> None: ...
    @property
    def z(
        self,
    ) -> Sequence[int] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @z.setter
    def z(
        self,
        val: Sequence[int] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float],
    ) -> None: ...
    @property
    def zauto(self) -> bool: ...
    @zauto.setter
    def zauto(self, val: bool) -> None: ...
    @property
    def zhoverformat(self) -> str: ...
    @zhoverformat.setter
    def zhoverformat(self, val: str) -> None: ...
    @property
    def zmax(self) -> int | float: ...
    @zmax.setter
    def zmax(self, val: int | float) -> None: ...
    @property
    def zmid(self) -> int | float: ...
    @zmid.setter
    def zmid(self, val: int | float) -> None: ...
    @property
    def zmin(self) -> int | float: ...
    @zmin.setter
    def zmin(self, val: int | float) -> None: ...
    @property
    def zorder(self) -> int: ...
    @zorder.setter
    def zorder(self, val: int) -> None: ...
    @property
    def zsrc(self) -> str: ...
    @zsrc.setter
    def zsrc(self, val: str) -> None: ...
    @property
    def type(self) -> str: ...
    def __init__(
        self,
        arg: Contour | dict[str, Any] | None = ...,
        autocolorscale: bool | None = ...,
        autocontour: bool | None = ...,
        coloraxis: str | None = ...,
        colorbar: ColorBar | dict[str, Any] | None = ...,
        colorscale: str | list[str] | list[tuple[float, str]] | None = ...,
        connectgaps: bool | None = ...,
        contours: Contours | dict[str, Any] | None = ...,
        customdata: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float] | None = ...,
        customdatasrc: str | None = ...,
        dx: int | float | None = ...,
        dy: int | float | None = ...,
        fillcolor: str | None = ...,
        hoverinfo: str | Sequence[str] | None = ...,
        hoverinfosrc: str | None = ...,
        hoverlabel: Hoverlabel | dict[str, Any] | None = ...,
        hoverongaps: bool | None = ...,
        hovertemplate: str
        | float
        | Sequence[str]
        | Sequence[float]
        | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
        | None = ...,
        hovertemplatesrc: str | None = ...,
        hovertext: str
        | float
        | Sequence[str]
        | Sequence[float]
        | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
        | None = ...,
        hovertextsrc: str | None = ...,
        ids: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None = ...,
        idssrc: str | None = ...,
        legend: str | None = ...,
        legendgroup: str | int | None = ...,
        legendgrouptitle: Legendgrouptitle | dict[str, Any] | None = ...,
        legendrank: int | float | None = ...,
        legendwidth: int | float | None = ...,
        line: Line | dict[str, str | int | float] | None = ...,
        meta: Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any] | None = ...,
        metasrc: str | None = ...,
        name: str | int | None = ...,
        ncontours: int | None = ...,
        opacity: int | float | None = ...,
        reversescale: bool | None = ...,
        showlegend: bool | None = ...,
        showscale: bool | None = ...,
        stream: Stream | dict[str, int | str] | None = ...,
        text: str
        | float
        | Sequence[str]
        | Sequence[float]
        | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
        | None = ...,
        textfont: Textfont | dict[str, Any] | None = ...,
        textsrc: str | None = ...,
        texttemplate: str | None = ...,
        transpose: bool | None = ...,
        uid: str | int | None = ...,
        uirevision: Hashable | None = ...,
        visible: bool | str | None = ...,
        x: Sequence[int]
        | Sequence[float]
        | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
        | pd.Series[float]
        | None = ...,
        x0: int | float | None = ...,
        xaxis: str | None = ...,
        xcalendar: str | None = ...,
        xhoverformat: str | None = ...,
        xperiod: int | float | str | None = ...,
        xperiod0: int | float | str | None = ...,
        xperiodalignment: str | None = ...,
        xsrc: str | None = ...,
        xtype: str | None = ...,
        y: Sequence[int]
        | Sequence[float]
        | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
        | pd.Series[float]
        | None = ...,
        y0: int | float | None = ...,
        yaxis: str | None = ...,
        ycalendar: str | None = ...,
        yhoverformat: str | None = ...,
        yperiod: int | float | str | None = ...,
        yperiod0: int | float | str | None = ...,
        yperiodalignment: str | None = ...,
        ysrc: str | None = ...,
        ytype: str | None = ...,
        z: Sequence[int]
        | Sequence[float]
        | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
        | pd.Series[float]
        | None = ...,
        zauto: bool | None = ...,
        zhoverformat: str | None = ...,
        zmax: int | float | None = ...,
        zmid: int | float | None = ...,
        zmin: int | float | None = ...,
        zorder: int | None = ...,
        zsrc: str | None = ...,
        **kwargs: Any,
    ) -> None: ...
