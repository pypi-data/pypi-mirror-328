# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Tx(BaseModel):
    """
    Tx
    """ # noqa: E501
    hash: StrictStr
    type: Annotated[int, Field(le=64, strict=True, ge=1)]
    info: StrictStr
    event_info: StrictStr
    status: StrictInt
    transaction_index: StrictInt
    l1_address: StrictStr
    account_index: StrictInt
    nonce: StrictInt
    expire_at: StrictInt
    block_height: StrictInt
    queued_at: StrictInt
    executed_at: StrictInt
    sequence_index: StrictInt
    parent_hash: StrictStr
    __properties: ClassVar[List[str]] = ["hash", "type", "info", "event_info", "status", "transaction_index", "l1_address", "account_index", "nonce", "expire_at", "block_height", "queued_at", "executed_at", "sequence_index", "parent_hash"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tx from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tx from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Tx) in the input: " + _key)

        _obj = cls.model_validate({
            "hash": obj.get("hash"),
            "type": obj.get("type"),
            "info": obj.get("info"),
            "event_info": obj.get("event_info"),
            "status": obj.get("status"),
            "transaction_index": obj.get("transaction_index"),
            "l1_address": obj.get("l1_address"),
            "account_index": obj.get("account_index"),
            "nonce": obj.get("nonce"),
            "expire_at": obj.get("expire_at"),
            "block_height": obj.get("block_height"),
            "queued_at": obj.get("queued_at"),
            "executed_at": obj.get("executed_at"),
            "sequence_index": obj.get("sequence_index"),
            "parent_hash": obj.get("parent_hash")
        })
        return _obj


