{"version":3,"file":"lib_index_js.f827baad76e4d32ab7af.js","mappings":"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","sources":["webpack://jupyterlab_autodocstring/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { ICommandPalette } from '@jupyterlab/apputils';\n\n/**\n * The command IDs used by the plugin.\n */\nnamespace CommandIDs {\n  export const generateDocstring = 'autodocstring:generate';\n}\n\n/**\n * Initialization data for the jupyterlab_autodocstring extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab_autodocstring:plugin',\n  description: 'Automatically insert docstring template after writing function header.',\n  autoStart: true,\n  requires: [INotebookTracker, ICommandPalette],\n  activate: (app: JupyterFrontEnd, tracker:INotebookTracker, palette: ICommandPalette) => {\n    console.log('JupyterLab extension jupyterlab_autodocstring is activated!');\n\n    // Register our command\n    app.commands.addCommand(CommandIDs.generateDocstring, {\n      label: 'Generate Docstring',\n      execute: () => {\n        console.log('Executing command:', CommandIDs.generateDocstring);\n        // Get the current active notebook and editor\n        const current = tracker.currentWidget;\n        if (!current) {\n          return;\n        }\n        const cell = current.content.activeCell;\n        if (!cell) {\n          return;\n        }\n        const editor = cell.editor;\n        if (!editor) {\n          return;\n        }\n        generateDocstring(editor);\n      }\n    });\n\n    // ✅ Add the command to the command palette\n    palette.addItem({\n      command: CommandIDs.generateDocstring,\n      category: 'Docstring Tools'\n    });\n\n    // ✅ Manually Listen for 'Cmd + Shift + D' inside Jupyter Notebook Cells\n    document.addEventListener(\"keydown\", (event) => {\n      // ✅ Intercept 'Tab' key only if in a valid function docstring context\n      if (event.code === \"Tab\") {\n        const activeCell = tracker.activeCell;\n        if (!activeCell) return;\n\n        const editor = activeCell.editor;\n        if (!editor) return;\n\n        const cursor = editor.getCursorPosition();\n        const lines = editor.model.sharedModel.getSource().split(\"\\n\");\n\n        // ✅ Check if current line is a triple-quote (`\"\"\"`)\n        const currentLine = lines[cursor.line].trim();\n        if (currentLine !== `\"\"\"\"\"\"`) return; // Normal tab if not triple quotes\n\n        // ✅ Look for the closest function definition above\n        let funcLineIndex = -1;\n        for (let i = cursor.line - 1; i >= 0; i--) {\n          if (/^\\s*def\\s+\\w+\\s*\\(.*\\)\\s*:/.test(lines[i])) {\n            funcLineIndex = i;\n            break;\n          }\n        }\n        if (funcLineIndex === -1) return; // Normal tab if no function found\n\n        console.log(\"🔍 Function detected! Replacing triple-quotes with docstring template.\");\n\n        event.preventDefault();\n        event.stopPropagation();\n        app.commands.execute(CommandIDs.generateDocstring);\n      }\n    });\n  }\n};\n\n/**\n * Generates a docstring template in the given editor.\n */\nfunction generateDocstring(editor: CodeEditor.IEditor): void {\n  const cursor = editor.getCursorPosition();\n  const line = editor.getLine(cursor.line) || '';\n\n  // Check if the current line is exactly sextuple quotes (allowing for spaces)\n  const match = line.match(/^(\\s*)\"\"\"\"\"\"\\s*$/);\n  if (!match) {\n    return;\n  }\n\n  const indentation = match[1]; // Capture the leading spaces (indentation)\n\n  // Get all the text from the start of the cell to the current line.\n  const cellText = editor.model.sharedModel.getSource();\n  const lines = cellText.split('\\n');\n  \n  // Find the function definition before the current line.\n  let funcLineIndex = -1;\n  for (let i = cursor.line - 1; i >= 0; i--) {\n    if (/^\\s*def\\s+\\w+\\s*\\(.*\\)\\s*:/.test(lines[i])) {\n      funcLineIndex = i;\n      break;\n    }\n  }\n  if (funcLineIndex === -1) {\n    console.warn('No function signature found above the docstring.');\n    return;\n  }\n  \n  const funcLine = lines[funcLineIndex];\n  const paramMatch = funcLine.match(/\\((.*)\\)/);\n  let params: string[] = [];\n  if (paramMatch && paramMatch[1].trim()) {\n    // Split parameters by comma and trim them.\n    params = paramMatch[1].split(',').map((param: string) => param.trim().split('=')[0]);\n  }\n\n  // Create a docstring template with the correct indentation\n  let docstringTemplate = `${indentation}\"\"\"\\n${indentation}{Summary}\\n\\n`;\n  if (params.length) {\n    docstringTemplate += `${indentation}Args:\\n`;\n    params.forEach(param => {\n      docstringTemplate += `${indentation}    ${param}: \\n`;\n    });\n    docstringTemplate += `\\n`;\n  }\n  docstringTemplate += `${indentation}Returns:\\n${indentation}    {return}\\n${indentation}\"\"\"`;\n\n  // Replace the current line (six quotes) with the docstring template.\n  lines[cursor.line] = docstringTemplate;\n\n  // Update the editor content\n  editor.model.sharedModel.setSource(lines.join(\"\\n\"));\n\n  // ✅ Move cursor to the end of the inserted docstring\n  const newCursorLine = cursor.line + docstringTemplate.split(\"\\n\").length - 1;\n  const newCursorColumn = docstringTemplate.split(\"\\n\").pop()?.length || 0;\n  \n  editor.setCursorPosition({ line: newCursorLine, column: newCursorColumn });\n\n  // console.log(\"✅ Docstring inserted with proper indentation!\");\n}\n\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}