# type: ignore
# runtime

import numpy as np

max_epochs = 270
stage2_num_epochs = 30
base_lr = 4e-3

train_cfg = dict(max_epochs=max_epochs, val_interval=10)
randomness = dict(seed=21)

# optimizer
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=base_lr, weight_decay=0.05),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))

# learning rate
param_scheduler = [
    dict(
        type='LinearLR',
        start_factor=1.0e-5,
        by_epoch=False,
        begin=0,
        end=1000),
    dict(
        # use cosine lr from 150 to 300 epoch
        type='CosineAnnealingLR',
        eta_min=base_lr * 0.05,
        begin=max_epochs // 2,
        end=max_epochs,
        T_max=max_epochs // 2,
        by_epoch=True,
        convert_to_iter_based=True),
]

# automatically scaling LR based on the actual training batch size
auto_scale_lr = dict(base_batch_size=512)

# codec settings
codec = dict(
    type='SimCCLabel',
    input_size=(288, 384),
    sigma=(6., 6.93),
    simcc_split_ratio=2.0,
    normalize=False,
    use_dark=False)

# model settings
model = dict(
    type='TopdownPoseEstimator',
    data_preprocessor=dict(
        type='PoseDataPreprocessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True),
    backbone=dict(
        _scope_='mmdet',
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=1.,
        widen_factor=1.,
        out_indices=(4, ),
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU'),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint='https://download.openmmlab.com/mmpose/v1/projects/'
            'rtmpose/cspnext-l_udp-aic-coco_210e-256x192-273b7631_20230130.pth'  # noqa
        )),
    head=dict(
        type='RTMCCHead',
        in_channels=1024,
        out_channels=133,
        input_size=codec['input_size'],
        in_featuremap_size=(9, 12),
        simcc_split_ratio=codec['simcc_split_ratio'],
        final_layer_kernel_size=7,
        gau_cfg=dict(
            hidden_dims=256,
            s=128,
            expansion_factor=2,
            dropout_rate=0.,
            drop_path=0.,
            act_fn='SiLU',
            use_rel_bias=False,
            pos_enc=False),
        loss=dict(
            type='KLDiscretLoss',
            use_target_weight=True,
            beta=10.,
            label_softmax=True),
        decoder=codec),
    test_cfg=dict(flip_test=True, ))

# base dataset settings
dataset_type = 'CocoWholeBodyDataset'
data_mode = 'topdown'
data_root = '/data/'

backend_args = dict(backend='local')
# backend_args = dict(
#     backend='petrel',
#     path_mapping=dict({
#         f'{data_root}': 's3://openmmlab/datasets/detection/coco/',
#         f'{data_root}': 's3://openmmlab/datasets/detection/coco/'
#     }))

# pipelines
train_pipeline = [
    dict(type='LoadImage', backend_args=backend_args),
    dict(type='GetBBoxCenterScale'),
    dict(type='RandomFlip', direction='horizontal'),
    dict(type='RandomHalfBody'),
    dict(
        type='RandomBBoxTransform', scale_factor=[0.6, 1.4], rotate_factor=80),
    dict(type='TopdownAffine', input_size=codec['input_size']),
    dict(type='mmdet.YOLOXHSVRandomAug'),
    dict(
        type='Albumentation',
        transforms=[
            dict(type='Blur', p=0.1),
            dict(type='MedianBlur', p=0.1),
            dict(
                type='CoarseDropout',
                max_holes=1,
                max_height=0.4,
                max_width=0.4,
                min_holes=1,
                min_height=0.2,
                min_width=0.2,
                p=1.0),
        ]),
    dict(type='GenerateTarget', encoder=codec),
    dict(type='PackPoseInputs')
]
val_pipeline = [
    dict(type='LoadImage', backend_args=backend_args),
    dict(type='GetBBoxCenterScale'),
    dict(type='TopdownAffine', input_size=codec['input_size']),
    dict(type='PackPoseInputs')
]

train_pipeline_stage2 = [
    dict(type='LoadImage', backend_args=backend_args),
    dict(type='GetBBoxCenterScale'),
    dict(type='RandomFlip', direction='horizontal'),
    dict(type='RandomHalfBody'),
    dict(
        type='RandomBBoxTransform',
        shift_factor=0.,
        scale_factor=[0.75, 1.25],
        rotate_factor=60),
    dict(type='TopdownAffine', input_size=codec['input_size']),
    dict(type='mmdet.YOLOXHSVRandomAug'),
    dict(
        type='Albumentation',
        transforms=[
            dict(type='Blur', p=0.1),
            dict(type='MedianBlur', p=0.1),
            dict(
                type='CoarseDropout',
                max_holes=1,
                max_height=0.4,
                max_width=0.4,
                min_holes=1,
                min_height=0.2,
                min_width=0.2,
                p=0.5),
        ]),
    dict(type='GenerateTarget', encoder=codec),
    dict(type='PackPoseInputs')
]

datasets = []
dataset_coco=dict(
    type=dataset_type,
    data_root=data_root,
    data_mode=data_mode,
    ann_file='coco/annotations/coco_wholebody_train_v1.0.json',
    data_prefix=dict(img='coco/train2017/'),
    pipeline=[],
)
datasets.append(dataset_coco)

scene = ['Magic_show', 'Entertainment', 'ConductMusic', 'Online_class', 
         'TalkShow', 'Speech', 'Fitness', 'Interview', 'Olympic', 'TVShow', 
         'Singing', 'SignLanguage', 'Movie', 'LiveVlog', 'VideoConference']

for i in range(len(scene)):
    datasets.append(
        dict(
            type=dataset_type,
            data_root=data_root,
            data_mode=data_mode,
            ann_file='UBody/annotations/'+scene[i]+'/keypoint_annotation.json',
            data_prefix=dict(img='UBody/images/'+scene[i]+'/'),
            pipeline=[],
        )
    )

# data loaders
train_dataloader = dict(
    batch_size=32,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    dataset=dict(
        type='CombinedDataset',
        metainfo=dict(from_file='configs/_base_/datasets/coco_wholebody.py'),
        datasets=datasets,
        pipeline=train_pipeline,
        test_mode=False,
    ))
val_dataloader = dict(
    batch_size=32,
    num_workers=10,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False, round_up=False),
    dataset=dict(
        type=dataset_type,
        data_root=data_root,
        data_mode=data_mode,
        ann_file='coco/annotations/coco_wholebody_val_v1.0.json',
        bbox_file=f'{data_root}coco/person_detection_results/'
        'COCO_val2017_detections_AP_H_56_person.json',
        data_prefix=dict(img='coco/val2017/'),
        test_mode=True,
        pipeline=val_pipeline,
    ))
test_dataloader = val_dataloader

# hooks
default_hooks = dict(
    checkpoint=dict(
        save_best='coco-wholebody/AP', rule='greater', max_keep_ckpts=1))

custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='mmdet.PipelineSwitchHook',
        switch_epoch=max_epochs - stage2_num_epochs,
        switch_pipeline=train_pipeline_stage2)
]

# evaluators
val_evaluator = dict(
    type='CocoWholeBodyMetric',
    ann_file=data_root + 'coco/annotations/coco_wholebody_val_v1.0.json')
test_evaluator = val_evaluator

# meta
meta = {
    "epoch": 20,
    "iter": 19141,
    "seed": 21,
    "experiment_name": "rtmpose_l-ll__coco-ubody-384x288_20230706_095637",
    "time": "20230706_131003",
    "mmengine_version": "0.7.2",
    "dataset_meta": {
        "dataset_name": "coco_wholebody",
        "num_keypoints": 133,
        "keypoint_colors": np.array([
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [  0, 255,   0],
            [255, 128,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 255, 255],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 153, 255],
            [255, 153, 255],
            [255, 153, 255],
            [255, 153, 255],
            [102, 178, 255],
            [102, 178, 255],
            [102, 178, 255],
            [102, 178, 255],
            [255,  51,  51],
            [255,  51,  51],
            [255,  51,  51],
            [255,  51,  51],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0],
            [255, 255, 255],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 153, 255],
            [255, 153, 255],
            [255, 153, 255],
            [255, 153, 255],
            [102, 178, 255],
            [102, 178, 255],
            [102, 178, 255],
            [102, 178, 255],
            [255,  51,  51],
            [255,  51,  51],
            [255,  51,  51],
            [255,  51,  51],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0]
        ], dtype=np.uint8),
        "num_skeleton_links": 65,
        "skeleton_link_colors": np.array([
            [  0, 255,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [255, 128,   0],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [  0, 255,   0],
            [255, 128,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [ 51, 153, 255],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 153, 255],
            [255, 153, 255],
            [255, 153, 255],
            [255, 153, 255],
            [102, 178, 255],
            [102, 178, 255],
            [102, 178, 255],
            [102, 178, 255],
            [255,  51,  51],
            [255,  51,  51],
            [255,  51,  51],
            [255,  51,  51],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 128,   0],
            [255, 153, 255],
            [255, 153, 255],
            [255, 153, 255],
            [255, 153, 255],
            [102, 178, 255],
            [102, 178, 255],
            [102, 178, 255],
            [102, 178, 255],
            [255,  51,  51],
            [255,  51,  51],
            [255,  51,  51],
            [255,  51,  51],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0],
            [  0, 255,   0]
        ], dtype=np.uint8),
        "dataset_keypoint_weights": np.array(
            [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
             1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
             1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
             1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
             1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
             1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
             1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
             1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.
            ], dtype=np.float32),
        "sigmas": np.array(
            [0.026, 0.025, 0.025, 0.035, 0.035, 0.079, 0.079, 0.072, 0.072,
             0.062, 0.062, 0.107, 0.107, 0.087, 0.087, 0.089, 0.089, 0.068,
             0.066, 0.066, 0.092, 0.094, 0.094, 0.042, 0.043, 0.044, 0.043,
             0.04 , 0.035, 0.031, 0.025, 0.02 , 0.023, 0.029, 0.032, 0.037,
             0.038, 0.043, 0.041, 0.045, 0.013, 0.012, 0.011, 0.011, 0.012,
             0.012, 0.011, 0.011, 0.013, 0.015, 0.009, 0.007, 0.007, 0.007,
             0.012, 0.009, 0.008, 0.016, 0.01 , 0.017, 0.011, 0.009, 0.011,
             0.009, 0.007, 0.013, 0.008, 0.011, 0.012, 0.01 , 0.034, 0.008,
             0.008, 0.009, 0.008, 0.008, 0.007, 0.01 , 0.008, 0.009, 0.009,
             0.009, 0.007, 0.007, 0.008, 0.011, 0.008, 0.008, 0.008, 0.01 ,
             0.008, 0.029, 0.022, 0.035, 0.037, 0.047, 0.026, 0.025, 0.024,
             0.035, 0.018, 0.024, 0.022, 0.026, 0.017, 0.021, 0.021, 0.032,
             0.02 , 0.019, 0.022, 0.031, 0.029, 0.022, 0.035, 0.037, 0.047,
             0.026, 0.025, 0.024, 0.035, 0.018, 0.024, 0.022, 0.026, 0.017,
             0.021, 0.021, 0.032, 0.02 , 0.019, 0.022, 0.031
            ], dtype=np.float32),
        "keypoint_id2name": {
            "0": "nose",
            "1": "left_eye",
            "2": "right_eye",
            "3": "left_ear",
            "4": "right_ear",
            "5": "left_shoulder",
            "6": "right_shoulder",
            "7": "left_elbow",
            "8": "right_elbow",
            "9": "left_wrist",
            "10": "right_wrist",
            "11": "left_hip",
            "12": "right_hip",
            "13": "left_knee",
            "14": "right_knee",
            "15": "left_ankle",
            "16": "right_ankle",
            "17": "left_big_toe",
            "18": "left_small_toe",
            "19": "left_heel",
            "20": "right_big_toe",
            "21": "right_small_toe",
            "22": "right_heel",
            "23": "face-0",
            "24": "face-1",
            "25": "face-2",
            "26": "face-3",
            "27": "face-4",
            "28": "face-5",
            "29": "face-6",
            "30": "face-7",
            "31": "face-8",
            "32": "face-9",
            "33": "face-10",
            "34": "face-11",
            "35": "face-12",
            "36": "face-13",
            "37": "face-14",
            "38": "face-15",
            "39": "face-16",
            "40": "face-17",
            "41": "face-18",
            "42": "face-19",
            "43": "face-20",
            "44": "face-21",
            "45": "face-22",
            "46": "face-23",
            "47": "face-24",
            "48": "face-25",
            "49": "face-26",
            "50": "face-27",
            "51": "face-28",
            "52": "face-29",
            "53": "face-30",
            "54": "face-31",
            "55": "face-32",
            "56": "face-33",
            "57": "face-34",
            "58": "face-35",
            "59": "face-36",
            "60": "face-37",
            "61": "face-38",
            "62": "face-39",
            "63": "face-40",
            "64": "face-41",
            "65": "face-42",
            "66": "face-43",
            "67": "face-44",
            "68": "face-45",
            "69": "face-46",
            "70": "face-47",
            "71": "face-48",
            "72": "face-49",
            "73": "face-50",
            "74": "face-51",
            "75": "face-52",
            "76": "face-53",
            "77": "face-54",
            "78": "face-55",
            "79": "face-56",
            "80": "face-57",
            "81": "face-58",
            "82": "face-59",
            "83": "face-60",
            "84": "face-61",
            "85": "face-62",
            "86": "face-63",
            "87": "face-64",
            "88": "face-65",
            "89": "face-66",
            "90": "face-67",
            "91": "left_hand_root",
            "92": "left_thumb1",
            "93": "left_thumb2",
            "94": "left_thumb3",
            "95": "left_thumb4",
            "96": "left_forefinger1",
            "97": "left_forefinger2",
            "98": "left_forefinger3",
            "99": "left_forefinger4",
            "100": "left_middle_finger1",
            "101": "left_middle_finger2",
            "102": "left_middle_finger3",
            "103": "left_middle_finger4",
            "104": "left_ring_finger1",
            "105": "left_ring_finger2",
            "106": "left_ring_finger3",
            "107": "left_ring_finger4",
            "108": "left_pinky_finger1",
            "109": "left_pinky_finger2",
            "110": "left_pinky_finger3",
            "111": "left_pinky_finger4",
            "112": "right_hand_root",
            "113": "right_thumb1",
            "114": "right_thumb2",
            "115": "right_thumb3",
            "116": "right_thumb4",
            "117": "right_forefinger1",
            "118": "right_forefinger2",
            "119": "right_forefinger3",
            "120": "right_forefinger4",
            "121": "right_middle_finger1",
            "122": "right_middle_finger2",
            "123": "right_middle_finger3",
            "124": "right_middle_finger4",
            "125": "right_ring_finger1",
            "126": "right_ring_finger2",
            "127": "right_ring_finger3",
            "128": "right_ring_finger4",
            "129": "right_pinky_finger1",
            "130": "right_pinky_finger2",
            "131": "right_pinky_finger3",
            "132": "right_pinky_finger4",
        },
        "keypoint_name2id": {
            "nose": 0,
            "left_eye": 1,
            "right_eye": 2,
            "left_ear": 3,
            "right_ear": 4,
            "left_shoulder": 5,
            "right_shoulder": 6,
            "left_elbow": 7,
            "right_elbow": 8,
            "left_wrist": 9,
            "right_wrist": 10,
            "left_hip": 11,
            "right_hip": 12,
            "left_knee": 13,
            "right_knee": 14,
            "left_ankle": 15,
            "right_ankle": 16,
            "left_big_toe": 17,
            "left_small_toe": 18,
            "left_heel": 19,
            "right_big_toe": 20,
            "right_small_toe": 21,
            "right_heel": 22,
            "face-0": 23,
            "face-1": 24,
            "face-2": 25,
            "face-3": 26,
            "face-4": 27,
            "face-5": 28,
            "face-6": 29,
            "face-7": 30,
            "face-8": 31,
            "face-9": 32,
            "face-10": 33,
            "face-11": 34,
            "face-12": 35,
            "face-13": 36,
            "face-14": 37,
            "face-15": 38,
            "face-16": 39,
            "face-17": 40,
            "face-18": 41,
            "face-19": 42,
            "face-20": 43,
            "face-21": 44,
            "face-22": 45,
            "face-23": 46,
            "face-24": 47,
            "face-25": 48,
            "face-26": 49,
            "face-27": 50,
            "face-28": 51,
            "face-29": 52,
            "face-30": 53,
            "face-31": 54,
            "face-32": 55,
            "face-33": 56,
            "face-34": 57,
            "face-35": 58,
            "face-36": 59,
            "face-37": 60,
            "face-38": 61,
            "face-39": 62,
            "face-40": 63,
            "face-41": 64,
            "face-42": 65,
            "face-43": 66,
            "face-44": 67,
            "face-45": 68,
            "face-46": 69,
            "face-47": 70,
            "face-48": 71,
            "face-49": 72,
            "face-50": 73,
            "face-51": 74,
            "face-52": 75,
            "face-53": 76,
            "face-54": 77,
            "face-55": 78,
            "face-56": 79,
            "face-57": 80,
            "face-58": 81,
            "face-59": 82,
            "face-60": 83,
            "face-61": 84,
            "face-62": 85,
            "face-63": 86,
            "face-64": 87,
            "face-65": 88,
            "face-66": 89,
            "face-67": 90,
            "left_hand_root": 91,
            "left_thumb1": 92,
            "left_thumb2": 93,
            "left_thumb3": 94,
            "left_thumb4": 95,
            "left_forefinger1": 96,
            "left_forefinger2": 97,
            "left_forefinger3": 98,
            "left_forefinger4": 99,
            "left_middle_finger1": 100,
            "left_middle_finger2": 101,
            "left_middle_finger3": 102,
            "left_middle_finger4": 103,
            "left_ring_finger1": 104,
            "left_ring_finger2": 105,
            "left_ring_finger3": 106,
            "left_ring_finger4": 107,
            "left_pinky_finger1": 108,
            "left_pinky_finger2": 109,
            "left_pinky_finger3": 110,
            "left_pinky_finger4": 111,
            "right_hand_root": 112,
            "right_thumb1": 113,
            "right_thumb2": 114,
            "right_thumb3": 115,
            "right_thumb4": 116,
            "right_forefinger1": 117,
            "right_forefinger2": 118,
            "right_forefinger3": 119,
            "right_forefinger4": 120,
            "right_middle_finger1": 121,
            "right_middle_finger2": 122,
            "right_middle_finger3": 123,
            "right_middle_finger4": 124,
            "right_ring_finger1": 125,
            "right_ring_finger2": 126,
            "right_ring_finger3": 127,
            "right_ring_finger4": 128,
            "right_pinky_finger1": 129,
            "right_pinky_finger2": 130,
            "right_pinky_finger3": 131,
            "right_pinky_finger4": 132,
        },
        "upper_body_ids": {
            "0": 0,
            "1": 1,
            "2": 2,
            "3": 3,
            "4": 4,
            "5": 5,
            "6": 6,
            "7": 7,
            "8": 8,
            "9": 9,
            "10": 10,
        },
        "lower_body_ids": {
            "0": 11,
            "1": 12,
            "2": 13,
            "3": 14,
            "4": 15,
            "5": 16,
            "6": 17,
            "7": 18,
            "8": 19,
            "9": 20,
            "10": 21,
            "11": 22,
        },
        "flip_indices": [
            0,2,1,4,3,6,5,8,7,10,9,12,11,14,
            13,16,15,20,21,22,17,18,19,39,38,
            37,36,35,34,33,32,31,30,29,28,27,
            26,25,24,23,49,48,47,46,45,44,43,
            42,41,40,50,51,52,53,58,57,56,55,
            54,68,67,66,65,70,69,62,61,60,59,
            64,63,77,76,75,74,73,72,71,82,81,
            80,79,78,87,86,85,84,83,90,89,88,
            112,113,114,115,116,117,118,119,120,
            121,122,123,124,125,126,127,128,129,
            130,131,132,91,92,93,94,95,96,97,98,
            99,100,101,102,103,104,105,106,107,
            108,109,110,111,
        ],
        "flip_pairs": {
            "0": (2, 1),
            "1": (1, 2),
            "2": (4, 3),
            "3": (3, 4),
            "4": (6, 5),
            "5": (5, 6),
            "6": (8, 7),
            "7": (7, 8),
            "8": (10, 9),
            "9": (9, 10),
            "10": (12, 11),
            "11": (11, 12),
            "12": (14, 13),
            "13": (13, 14),
            "14": (16, 15),
            "15": (15, 16),
            "16": (20, 17),
            "17": (21, 18),
            "18": (22, 19),
            "19": (17, 20),
            "20": (18, 21),
            "21": (19, 22),
            "22": (39, 23),
            "23": (38, 24),
            "24": (37, 25),
            "25": (36, 26),
            "26": (35, 27),
            "27": (34, 28),
            "28": (33, 29),
            "29": (32, 30),
            "30": (30, 32),
            "31": (29, 33),
            "32": (28, 34),
            "33": (27, 35),
            "34": (26, 36),
            "35": (25, 37),
            "36": (24, 38),
            "37": (23, 39),
            "38": (49, 40),
            "39": (48, 41),
            "40": (47, 42),
            "41": (46, 43),
            "42": (45, 44),
            "43": (44, 45),
            "44": (43, 46),
            "45": (42, 47),
            "46": (41, 48),
            "47": (40, 49),
            "48": (58, 54),
            "49": (57, 55),
            "50": (55, 57),
            "51": (54, 58),
            "52": (68, 59),
            "53": (67, 60),
            "54": (66, 61),
            "55": (65, 62),
            "56": (70, 63),
            "57": (69, 64),
            "58": (62, 65),
            "59": (61, 66),
            "60": (60, 67),
            "61": (59, 68),
            "62": (64, 69),
            "63": (63, 70),
            "64": (77, 71),
            "65": (76, 72),
            "66": (75, 73),
            "67": (73, 75),
            "68": (72, 76),
            "69": (71, 77),
            "70": (82, 78),
            "71": (81, 79),
            "72": (79, 81),
            "73": (78, 82),
            "74": (87, 83),
            "75": (86, 84),
            "76": (84, 86),
            "77": (83, 87),
            "78": (90, 88),
            "79": (88, 90),
            "80": (112, 91),
            "81": (113, 92),
            "82": (114, 93),
            "83": (115, 94),
            "84": (116, 95),
            "85": (117, 96),
            "86": (118, 97),
            "87": (119, 98),
            "88": (120, 99),
            "89": (121, 100),
            "90": (122, 101),
            "91": (123, 102),
            "92": (124, 103),
            "93": (125, 104),
            "94": (126, 105),
            "95": (127, 106),
            "96": (128, 107),
            "97": (129, 108),
            "98": (130, 109),
            "99": (131, 110),
            "100": (132, 111),
            "101": (91, 112),
            "102": (92, 113),
            "103": (93, 114),
            "104": (94, 115),
            "105": (95, 116),
            "106": (96, 117),
            "107": (97, 118),
            "108": (98, 119),
            "109": (99, 120),
            "110": (100, 121),
            "111": (101, 122),
            "112": (102, 123),
            "113": (103, 124),
            "114": (104, 125),
            "115": (105, 126),
            "116": (106, 127),
            "117": (107, 128),
            "118": (108, 129),
            "119": (109, 130),
            "120": (110, 131),
            "121": (111, 132),
        },
        "skeleton_links": {
            "0": (15, 13),
            "1": (13, 11),
            "2": (16, 14),
            "3": (14, 12),
            "4": (11, 12),
            "5": (5, 11),
            "6": (6, 12),
            "7": (5, 6),
            "8": (5, 7),
            "9": (6, 8),
            "10": (7, 9),
            "11": (8, 10),
            "12": (1, 2),
            "13": (0, 1),
            "14": (0, 2),
            "15": (1, 3),
            "16": (2, 4),
            "17": (3, 5),
            "18": (4, 6),
            "19": (15, 17),
            "20": (15, 18),
            "21": (15, 19),
            "22": (16, 20),
            "23": (16, 21),
            "24": (16, 22),
            "25": (91, 92),
            "26": (92, 93),
            "27": (93, 94),
            "28": (94, 95),
            "29": (91, 96),
            "30": (96, 97),
            "31": (97, 98),
            "32": (98, 99),
            "33": (91, 100),
            "34": (100, 101),
            "35": (101, 102),
            "36": (102, 103),
            "37": (91, 104),
            "38": (104, 105),
            "39": (105, 106),
            "40": (106, 107),
            "41": (91, 108),
            "42": (108, 109),
            "43": (109, 110),
            "44": (110, 111),
            "45": (112, 113),
            "46": (113, 114),
            "47": (114, 115),
            "48": (115, 116),
            "49": (112, 117),
            "50": (117, 118),
            "51": (118, 119),
            "52": (119, 120),
            "53": (112, 121),
            "54": (121, 122),
            "55": (122, 123),
            "56": (123, 124),
            "57": (112, 125),
            "58": (125, 126),
            "59": (126, 127),
            "60": (127, 128),
            "61": (112, 129),
            "62": (129, 130),
            "63": (130, 131),
            "64": (131, 132),
        },
    },
}
