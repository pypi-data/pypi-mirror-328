from abc import ABC, abstractmethod
from typing import TypeVar, Generic

Connection = TypeVar('Connection')
"""Generic type variable representing a database connection."""
ResultSet = TypeVar('ResultSet')
"""Generic type variable representing a query result set"""

class SQLEngine(ABC, Generic[Connection, ResultSet]):
    """
    Abstract base class for SQL engine implementations.

    SQLEngine defines an interface for executing SQL queries using a connection
    to a database. Implementations of this class must provide methods to obtain
    a connection, execute queries, and fetch results.
    """

    @abstractmethod
    def get_connection(self) -> Connection:
        """
        Get a connection to the underlying database.

        Returns:
            Connection: A connection instance to the database.
        """
        pass

    @abstractmethod
    def execute(self, query: str, params: dict = {}) -> None:
        """
        Execute a SQL query without returning any results.

        Parameters:
            query (str): The SQL query string to execute.
            params (dict, optional): A dictionary of parameters to be bound to the query.
                Defaults to an empty dictionary.

        Returns:
            None
        """
        pass

    @abstractmethod
    def execute_and_fetch(self, query: str, params: dict = {}) -> ResultSet:
        """
        Execute a SQL query and fetch the results.

        Parameters:
            query (str): The SQL query string to execute.
            params (dict, optional): A dictionary of parameters to be bound to the query.
                Defaults to an empty dictionary.

        Returns:
            ResultSet: The result set generated by the executed query.
        """
        pass