# generated by datamodel-codegen:
#   filename:  base-state-machine.json
#   timestamp: 2023-08-01T12:32:48+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Literal

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class AslPath(RootModel):
    root: str | None


class AslRefPath(RootModel):
    root: str | None


class Operator(BaseModel):
    Variable: str | None = None
    And: list[Operator] | None = None
    Or: list[Operator] | None = None
    Not: Operator | None = None
    IsNull: bool | None = None
    IsPresent: bool | None = None
    BooleanEquals: bool | None = None
    BooleanEqualsPath: AslPath | None = None
    IsBoolean: bool | None = None
    NumericEquals: float | None = None
    NumericEqualsPath: AslPath | None = None
    NumericGreaterThan: float | None = None
    NumericGreaterThanPath: AslPath | None = None
    NumericGreaterThanEquals: float | None = None
    NumericGreaterThanEqualsPath: AslPath | None = None
    NumericLessThan: float | None = None
    NumericLessThanPath: AslPath | None = None
    NumericLessThanEquals: float | None = None
    NumericLessThanEqualsPath: AslPath | None = None
    IsNumeric: bool | None = None
    StringEquals: str | None = None
    StringEqualsPath: AslPath | None = None
    StringGreaterThan: str | None = None
    StringGreaterThanPath: AslPath | None = None
    StringGreaterThanEquals: str | None = None
    StringGreaterThanEqualsPath: AslPath | None = None
    StringLessThan: str | None = None
    StringLessThanPath: AslPath | None = None
    StringLessThanEquals: str | None = None
    StringLessThanEqualsPath: AslPath | None = None
    StringMatches: str | None = None
    IsString: bool | None = None
    TimestampEquals: str | None = None
    TimestampEqualsPath: AslPath | None = None
    TimestampGreaterThan: str | None = None
    TimestampGreaterThanPath: AslPath | None = None
    TimestampGreaterThanEquals: str | None = None
    TimestampGreaterThanEqualsPath: AslPath | None = None
    TimestampLessThan: str | None = None
    TimestampLessThanPath: AslPath | None = None
    TimestampLessThanEquals: str | None = None
    TimestampLessThanEqualsPath: AslPath | None = None
    IsTimestamp: bool | None = None


class Fail(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Type: Literal["Fail"]
    Comment: str | None = None
    Cause: str | None = None
    Error: str | None = None


class Errors(RootModel):
    root: (
        str
        | Literal["States.ALL"]
        | Literal["States.HeartbeatTimeout"]
        | Literal["States.Timeout"]
        | Literal["States.TaskFailed"]
        | Literal["States.Permissions"]
        | Literal["States.ResultPathMatchFailure"]
        | Literal["States.ParameterPathFailure"]
        | Literal["States.BranchFailed"]
        | Literal["States.NoChoiceMatched"]
        | Literal["States.IntrinsicFailure"]
    ) = Field(..., description="https://states-language.net/#appendix-a")


class Succeed(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Type: Literal["Succeed"]
    Comment: str | None = None
    OutputPath: AslPath | None = None
    InputPath: AslPath | None = None


class ResourceItem(BaseModel):
    Ref: str | None = None


class RetryItem(BaseModel):
    ErrorEquals: list[Errors]
    IntervalSeconds: confloat(ge=0.0) | None = None
    MaxAttempts: confloat(ge=0.0) | None = None
    BackoffRate: confloat(ge=0.0) | None = None


class CatchItem1(BaseModel):
    ErrorEquals: list[Errors]
    Next: str
    ResultPath: AslRefPath | None = None


class Wait(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Type: Literal["Wait"]
    Next: str | None = None
    End: Literal[True] | None = None
    Comment: str | None = None
    OutputPath: AslPath | None = None
    InputPath: AslPath | None = None
    Seconds: confloat(ge=0.0) | None = None
    Timestamp: str | None = None
    SecondsPath: AslRefPath | None = None
    TimestampPath: AslRefPath | None = None


class ReaderConfig(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    MaxItems: conint(ge=1) | None = None
    MaxItemsPath: AslRefPath | None = None


class ProcessorConfigItem(BaseModel):
    Mode: Literal["INLINE"]


class ExecutionType(Enum):
    EXPRESS = "EXPRESS"
    STANDARD = "STANDARD"


class ProcessorConfigItem1(BaseModel):
    Mode: Literal["DISTRIBUTED"]
    ExecutionType: ExecutionType


class CatchItem2(BaseModel):
    ErrorEquals: list[Errors]
    Next: str


class Choice1(Operator):
    Next: str


class Choice(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Type: Literal["Choice"]
    Next: str | None = None
    End: Literal[True] | None = None
    Comment: str | None = None
    OutputPath: AslPath | None = None
    InputPath: AslPath | None = None
    Choices: list[Choice1]
    Default: str | None = None


class CatchItem(BaseModel):
    ErrorEquals: list[Errors]
    Next: str
    ResultPath: AslRefPath | None = None


class Model(BaseModel):
    Comment: str | None = None
    StartAt: str
    States: dict[constr(pattern=r"^.{1,80}$"), State]


class State(RootModel):
    root: Choice | Fail | Parallel | Pass | Succeed | Task | Wait | Map


class FieldPayloadTemplateObject(RootModel):
    root: (
        dict[constr(pattern=r"^.+\.\$$"), str]
        | dict[
            constr(pattern=r"^.+(([^.][^$])|([^.][$]))$"),
            (
                float
                | bool
                | str
                | None
                | list[AslPayloadTemplate]
                | FieldPayloadTemplateObject
            ),
        ]
    )


class AslPayloadTemplate(RootModel):
    root: FieldPayloadTemplateObject | list[AslPayloadTemplate] | str | bool | float


class Parallel(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Type: Literal["Parallel"]
    Parameters: AslPayloadTemplate | None = None
    ResultSelector: AslPayloadTemplate | None = None
    Next: str | None = None
    End: Literal[True] | None = None
    Comment: str | None = None
    OutputPath: AslPath | None = None
    InputPath: AslPath | None = None
    ResultPath: AslRefPath | None = None
    Branches: list[StateMachine]
    Retry: list[RetryItem] | None = None
    Catch: list[CatchItem] | None = None


class StateMachine(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Comment: str | None = None
    StartAt: str
    States: dict[constr(pattern=r"^.{1,80}$"), State]
    Version: str | None = None
    TimeoutSeconds: conint(ge=0) | None = None


class Pass(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Type: Literal["Pass"]
    Next: str | None = None
    End: Literal[True] | None = None
    Comment: str | None = None
    OutputPath: AslPath | None = None
    InputPath: AslPath | None = None
    ResultPath: AslRefPath | None = None
    Parameters: AslPayloadTemplate | None = None
    Result: Any | None = None


class Task(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Type: Literal["Task"]
    Next: str | None = None
    End: Literal[True] | None = None
    Comment: str | None = None
    OutputPath: AslPath | None = None
    InputPath: AslPath | None = None
    Resource: str | constr(pattern=r"^\$\{[^\}]+\}$") | ResourceItem
    ResultPath: AslRefPath | None = None
    Retry: list[RetryItem] | None = None
    Catch: list[CatchItem1] | None = None
    TimeoutSeconds: confloat(ge=1.0) | None = None
    TimeoutSecondsPath: AslRefPath | None = None
    HeartbeatSeconds: confloat(ge=1.0) | None = None
    HeartbeatSecondsPath: AslRefPath | None = None
    ResultSelector: AslPayloadTemplate | None = None
    Parameters: AslPayloadTemplate | None = None
    Credentials: AslPayloadTemplate | None = None


class ItemReader(BaseModel):
    Resource: str
    Parameters: AslPayloadTemplate | None = None
    ReaderConfig: ReaderConfig | None = None


class ItemBatcher(BaseModel):
    MaxItemsPerBatch: confloat(ge=0.0) | None = None
    MaxItemsPerBatchPath: AslRefPath | None = None
    MaxInputBytesPerBatch: confloat(ge=0.0, le=262144.0) | None = None
    MaxInputBytesPerBatchPath: AslRefPath | None = None
    BatchInput: AslPayloadTemplate | None = None


class Map(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    Type: Literal["Map"]
    Next: str | None = None
    End: Literal[True] | None = None
    Comment: str | None = None
    OutputPath: AslPath | None = None
    InputPath: AslPath | None = None
    ResultPath: AslRefPath | None = None
    ItemsPath: AslRefPath | None = None
    Label: str | None = None
    MaxConcurrency: confloat(ge=0.0) | None = None
    MaxConcurrencyPath: AslRefPath | None = None
    ItemReader: ItemReader | None = None
    ItemProcessor: ItemProcessor | None = None
    Iterator: Model | None = None
    Parameters: AslPayloadTemplate | None = None
    ItemSelector: AslPayloadTemplate | None = None
    ItemBatcher: ItemBatcher | None = None
    ResultSelector: AslPayloadTemplate | None = None
    ResultWriter: dict[str, Any] | None = None
    Retry: list[RetryItem] | None = None
    Catch: list[CatchItem2] | None = None
    ToleratedFailureCount: conint(ge=0) | None = None
    ToleratedFailureCountPath: AslRefPath | None = None
    ToleratedFailurePercentage: conint(ge=0, le=100) | None = None
    ToleratedFailurePercentagePath: AslRefPath | None = None


class ItemProcessor(Model):
    ProcessorConfig: ProcessorConfigItem | ProcessorConfigItem1 | None = None


Operator.model_rebuild()
Model.model_rebuild()
State.model_rebuild()
FieldPayloadTemplateObject.model_rebuild()
Parallel.model_rebuild()
Map.model_rebuild()
ItemProcessor.model_rebuild()
