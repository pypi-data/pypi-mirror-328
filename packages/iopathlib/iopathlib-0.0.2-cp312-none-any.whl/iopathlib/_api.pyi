#  This file is automatically generated. See: sources/iopathlib/_api.py
from . import handlers
import typing

def open(
    path: str,
    mode: str = "r",
    buffering: int = -1,
    **kwargs: typing.Any,
) -> typing.IO[str] | typing.IO[bytes]: ...
def opena(
    self,
    path: str,
    mode: str = "r",
    buffering: int = -1,
    callback_after_file_close: typing.Callable[[None], None] | None = None,
    **kwargs: typing.Any,
) -> typing.IO[str] | typing.IO[bytes]: ...
def async_join(*paths: str, **kwargs: typing.Any) -> bool: ...
def async_close(**kwargs: typing.Any) -> bool: ...
def copy(
    src_path: str,
    dst_path: str,
    overwrite: bool = False,
    **kwargs: typing.Any,
) -> bool: ...
def mv(src_path: str, dst_path: str, **kwargs: typing.Any) -> bool: ...
def copy_from_local(
    local_path: str,
    dst_path: str,
    overwrite: bool = False,
    **kwargs: typing.Any,
) -> None: ...
def exists(path: str, **kwargs: typing.Any) -> bool: ...
def isfile(path: str, **kwargs: typing.Any) -> bool: ...
def isdir(path: str, **kwargs: typing.Any) -> bool: ...
def ls(path: str, **kwargs: typing.Any) -> list[str]: ...
def mkdirs(path: str, **kwargs: typing.Any) -> None: ...
def rm(path: str, **kwargs: typing.Any) -> None: ...
def symlink(src_path: str, dst_path: str, **kwargs: typing.Any) -> bool: ...
def set_cwd(path: str | None, **kwargs: typing.Any) -> bool: ...
def register_handler(
    handler: handlers.PathHandler, allow_override: bool = True
) -> None: ...
def set_strict_kwargs_checking(enable: bool) -> None: ...
def set_logging(enable_logging=True) -> None: ...
