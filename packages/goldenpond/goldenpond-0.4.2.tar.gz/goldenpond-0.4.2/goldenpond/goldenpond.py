# Generated by Haxe 4.3.6
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
import inspect as python_lib_Inspect
import sys as python_lib_Sys
import functools as python_lib_Functools
import random as python_lib_Random
import traceback as python_lib_Traceback
from io import StringIO as python_lib_io_StringIO


class _hx_AnonObject:
    _hx_disable_getattr = False
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)
    def __contains__(self, item):
        return item in self.__dict__
    def __getitem__(self, item):
        return self.__dict__[item]
    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None
    def _hx_hasattr(self,field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False



class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'



class ChordFactory:
    _hx_class_name = "ChordFactory"
    __slots__ = ()
    _hx_statics = ["calculateSecondaryChord", "generateChordNotes", "chordProgression", "voice_lead"]

    @staticmethod
    def calculateSecondaryChord(chordThing):
        new_tonic = chordThing.get_mode().nth_from(chordThing.key,chordThing.degree)
        ct = ChordThing(new_tonic,Mode.getMajorMode(),chordThing.secondary_degree,chordThing.length)
        if (python_internal_ArrayImpl.indexOf(chordThing.modifiers,Modifier.SEVENTH,None) != -1):
            ct.seventh()
        if (python_internal_ArrayImpl.indexOf(chordThing.modifiers,Modifier.NINTH,None) != -1):
            ct.ninth()
        ct.set_inversion(chordThing.inversion)
        return ct

    @staticmethod
    def generateChordNotes(chordThing):
        if (python_internal_ArrayImpl.indexOf(chordThing.modifiers,Modifier.SECONDARY,None) != -1):
            chordThing = ChordFactory.calculateSecondaryChord(chordThing)
        mode = chordThing.get_mode()
        chord = mode.make_triad(chordThing.key,chordThing.degree)
        if (python_internal_ArrayImpl.indexOf(chordThing.modifiers,Modifier.NINTH,None) != -1):
            chord = mode.make_ninth(chordThing.key,chordThing.degree)
        elif (python_internal_ArrayImpl.indexOf(chordThing.modifiers,Modifier.SEVENTH,None) != -1):
            chord = mode.make_seventh(chordThing.key,chordThing.degree)
        _g = 0
        _g1 = chordThing.inversion
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = (None if ((len(chord) == 0)) else chord.pop(0))
            chord.append((x + 12))
        return chord

    @staticmethod
    def chordProgression(chordThings):
        chords = []
        prev_chord = None
        _g = 0
        while (_g < len(chordThings)):
            ct = (chordThings[_g] if _g >= 0 and _g < len(chordThings) else None)
            _g = (_g + 1)
            chord = ChordFactory.generateChordNotes(ct)
            if ((prev_chord is not None) and ((python_internal_ArrayImpl.indexOf(ct.modifiers,Modifier.VOICE_LEADING,None) != -1))):
                chord = ChordFactory.voice_lead(prev_chord,chord)
            chords.append(chord)
            prev_chord = chord
        return chords

    @staticmethod
    def voice_lead(prevChord,nextChord):
        return nextChord


class Tuple2:
    _hx_class_name = "Tuple2"
    __slots__ = ("_0", "_1")
    _hx_fields = ["_0", "_1"]

    def __init__(self,_0,_1):
        self._0 = _0
        self._1 = _1



class ChordParser:
    _hx_class_name = "ChordParser"
    __slots__ = ("key", "mode")
    _hx_fields = ["key", "mode"]
    _hx_methods = ["parseSeparator", "parseTranspose", "parseItem", "countOccurrences", "interpretItem", "parse"]

    def __init__(self,key,mode):
        self.key = key
        self.mode = mode

    def parseSeparator(self,inputString):
        separators = ["|", ",", "&"]
        if ((len(inputString) > 0) and ((python_internal_ArrayImpl.indexOf(separators,("" if ((0 >= len(inputString))) else inputString[0]),None) != -1))):
            return Tuple2(("" if ((0 >= len(inputString))) else inputString[0]),HxString.substr(inputString,1,None))
        else:
            return Tuple2(None,inputString)

    def parseTranspose(self,inputString):
        transposeChars_b = python_lib_io_StringIO()
        while ((len(inputString) > 0) and ((python_internal_ArrayImpl.indexOf([",", "|"],("" if ((0 >= len(inputString))) else inputString[0]),None) == -1))):
            transposeChars_b.write(Std.string(("" if ((0 >= len(inputString))) else inputString[0])))
            inputString = HxString.substr(inputString,1,None)
        transposeString = StringTools.trim(transposeChars_b.getvalue())
        if (((("" if ((0 >= len(transposeString))) else transposeString[0])) != ">") and (((("" if ((0 >= len(transposeString))) else transposeString[0])) != "<"))):
            raise haxe_Exception.thrown((("Expected '>' or '<' at the start of '" + ("null" if transposeString is None else transposeString)) + "'"))
        transposeValue = Std.parseInt(HxString.substr(transposeString,1,None))
        if ((("" if ((0 >= len(transposeString))) else transposeString[0])) == ">"):
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.key
            _hx_local_0.key = (_hx_local_1 + transposeValue)
            _hx_local_0.key
        else:
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.key
            _hx_local_2.key = (_hx_local_3 - transposeValue)
            _hx_local_2.key
        return inputString

    def parseItem(self,inputString):
        itemChars_b = python_lib_io_StringIO()
        insideParentheses = False
        while ((len(inputString) > 0) and ((insideParentheses or ((python_internal_ArrayImpl.indexOf([",", "|", "&", ">", "<"],("" if ((0 >= len(inputString))) else inputString[0]),None) == -1))))):
            char = ("" if ((0 >= len(inputString))) else inputString[0])
            if (char == "("):
                insideParentheses = True
            elif (char == ")"):
                insideParentheses = False
            itemChars_b.write(Std.string(char))
            inputString = HxString.substr(inputString,1,None)
        return Tuple2(StringTools.trim(itemChars_b.getvalue()),inputString)

    def countOccurrences(self,_hx_str,char):
        count = 0
        _g = 0
        _g1 = len(_hx_str)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if ((("" if (((i < 0) or ((i >= len(_hx_str))))) else _hx_str[i])) == char):
                count = (count + 1)
        return count

    def interpretItem(self,itemString):
        isModalInterchange = False
        if ((("" if ((0 >= len(itemString))) else itemString[0])) == "-"):
            isModalInterchange = True
            itemString = HxString.substr(itemString,1,None)
        inversion = 0
        startIndex = None
        if (((itemString.find("i") if ((startIndex is None)) else HxString.indexOfImpl(itemString,"i",startIndex))) != -1):
            inversion = self.countOccurrences(itemString,"i")
            _this = itemString.split("i")
            itemString = "".join([python_Boot.toString1(x1,'') for x1 in _this])
        tmp = None
        startIndex = None
        if (((itemString.find("(") if ((startIndex is None)) else HxString.indexOfImpl(itemString,"(",startIndex))) != -1):
            startIndex = None
            tmp = (((itemString.find(")") if ((startIndex is None)) else HxString.indexOfImpl(itemString,")",startIndex))) != -1)
        else:
            tmp = False
        if tmp:
            extension = None
            parts = itemString.split("(")
            if (len((parts[0] if 0 < len(parts) else None)) > 0):
                extension = Std.parseInt((parts[0] if 0 < len(parts) else None))
            _this = HxString.substr((parts[1] if 1 < len(parts) else None),0,(len((parts[1] if 1 < len(parts) else None)) - 1))
            secondaryParts = _this.split("/")
            secondaryDegree = Std.parseInt((secondaryParts[0] if 0 < len(secondaryParts) else None))
            degree = Std.parseInt((secondaryParts[1] if 1 < len(secondaryParts) else None))
            chord = ChordThing(self.key,self.mode,degree)
            chord.set_as_secondary(secondaryDegree)
            chord.set_inversion(inversion)
            if (extension is not None):
                if (extension == 7):
                    chord.seventh()
                elif (extension == 9):
                    chord.ninth()
            return chord
        itemValue = Std.parseInt(itemString)
        chord = None
        if ((1 <= itemValue) and ((itemValue <= 7))):
            chord = ChordThing(self.key,self.mode,itemValue)
        elif ((71 <= itemValue) and ((itemValue <= 77))):
            chord = ChordThing(self.key,self.mode,(itemValue - 70)).seventh()
        elif ((91 <= itemValue) and ((itemValue <= 97))):
            chord = ChordThing(self.key,self.mode,(itemValue - 90)).ninth()
        else:
            raise haxe_Exception.thrown(("Unexpected item value: " + ("null" if itemString is None else itemString)))
        if isModalInterchange:
            chord.modal_interchange()
        chord.set_inversion(inversion)
        return chord

    def parse(self,inputString):
        chords = []
        voiceLeadNext = False
        while (len(inputString) > 0):
            sepResult = self.parseSeparator(inputString)
            separator = sepResult._0
            inputString = sepResult._1
            if (separator == "&"):
                voiceLeadNext = True
            if (len(inputString) > 0):
                if ((("" if ((0 >= len(inputString))) else inputString[0])) == "!"):
                    self.mode = (Mode.getMinorMode() if ((self.mode == Mode.getMajorMode())) else Mode.getMajorMode())
                    inputString = HxString.substr(inputString,1,None)
                elif (((("" if ((0 >= len(inputString))) else inputString[0])) == ">") or (((("" if ((0 >= len(inputString))) else inputString[0])) == "<"))):
                    inputString = self.parseTranspose(inputString)
                else:
                    itemResult = self.parseItem(inputString)
                    itemString = itemResult._0
                    inputString = itemResult._1
                    chord = self.interpretItem(itemString)
                    if voiceLeadNext:
                        chord.set_voice_leading()
                    chords.append(chord)
        return chords



class ChordProgression:
    _hx_class_name = "ChordProgression"
    __slots__ = ("key", "mode", "scoreString", "stutter", "chordThings")
    _hx_fields = ["key", "mode", "scoreString", "stutter", "chordThings"]
    _hx_methods = ["recalc", "setStutter", "toChordThings", "toNotes"]

    def __init__(self,key,mode,scoreString):
        self.chordThings = None
        self.key = key
        self.mode = mode
        self.scoreString = scoreString
        self.stutter = 0
        self.recalc()

    def recalc(self):
        self.chordThings = self.toChordThings()

    def setStutter(self,x):
        self.stutter = x
        self.recalc()
        if (self.stutter > 0):
            lenseq = len(self.chordThings)
            frag = self.chordThings[0:self.stutter]
            repeatedFrag = []
            while (len(repeatedFrag) < lenseq):
                repeatedFrag = (repeatedFrag + frag)
            self.chordThings = repeatedFrag[0:lenseq]

    def toChordThings(self):
        return ChordParser(self.key,self.mode).parse(self.scoreString)

    def toNotes(self):
        return ChordFactory.chordProgression(self.chordThings)



class ChordThing:
    _hx_class_name = "ChordThing"
    __slots__ = ("key", "mode", "degree", "length", "modifiers", "inversion", "secondary_degree")
    _hx_fields = ["key", "mode", "degree", "length", "modifiers", "inversion", "secondary_degree"]
    _hx_methods = ["equals", "set_as_secondary", "swap_mode", "modal_interchange", "has_modal_interchange", "seventh", "ninth", "set_inversion", "set_voice_leading", "toString", "clone", "has_extensions", "get_mode"]

    def __init__(self,key,mode,degree,length = None):
        if (length is None):
            length = 1
        self.key = key
        self.mode = mode
        self.degree = degree
        self.length = length
        self.modifiers = []
        self.inversion = 0
        self.secondary_degree = None

    def equals(self,other):
        if (((((self.key != other.key) or ((self.mode != other.mode))) or ((self.degree != other.degree))) or ((self.length != other.length))) or ((self.inversion != other.inversion))):
            return False
        if (len(self.modifiers) != len(other.modifiers)):
            return False
        _g = 0
        _g1 = len(self.modifiers)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if ((self.modifiers[i] if i >= 0 and i < len(self.modifiers) else None) != (other.modifiers[i] if i >= 0 and i < len(other.modifiers) else None)):
                return False
        return True

    def set_as_secondary(self,secondary_degree):
        _this = self.modifiers
        _this.append(Modifier.SECONDARY)
        self.secondary_degree = secondary_degree
        return self

    def swap_mode(self):
        if (self.mode == _Mode_Mode_Fields_.MAJOR):
            self.mode = _Mode_Mode_Fields_.MINOR
        else:
            self.mode = _Mode_Mode_Fields_.MAJOR
        return self

    def modal_interchange(self):
        _this = self.modifiers
        _this.append(Modifier.MODAL_INTERCHANGE)
        return self

    def has_modal_interchange(self):
        return (python_internal_ArrayImpl.indexOf(self.modifiers,Modifier.MODAL_INTERCHANGE,None) != -1)

    def seventh(self):
        if (python_internal_ArrayImpl.indexOf(self.modifiers,Modifier.NINTH,None) != -1):
            _this = self.modifiers
            pos = python_internal_ArrayImpl.indexOf(self.modifiers,Modifier.NINTH,None)
            if (pos < 0):
                pos = (len(_this) + pos)
            if (pos < 0):
                pos = 0
            res = _this[pos:(pos + 1)]
            del _this[pos:(pos + 1)]
        _this = self.modifiers
        _this.append(Modifier.SEVENTH)
        return self

    def ninth(self):
        if (python_internal_ArrayImpl.indexOf(self.modifiers,Modifier.SEVENTH,None) != -1):
            _this = self.modifiers
            pos = python_internal_ArrayImpl.indexOf(self.modifiers,Modifier.SEVENTH,None)
            if (pos < 0):
                pos = (len(_this) + pos)
            if (pos < 0):
                pos = 0
            res = _this[pos:(pos + 1)]
            del _this[pos:(pos + 1)]
        _this = self.modifiers
        _this.append(Modifier.NINTH)
        return self

    def set_inversion(self,inversion):
        self.inversion = inversion
        return self

    def set_voice_leading(self):
        _this = self.modifiers
        _this.append(Modifier.VOICE_LEADING)
        return self

    def toString(self):
        modeStr = ("MAJOR" if ((self.mode == _Mode_Mode_Fields_.MAJOR)) else "MINOR")
        degree_repr = ((((("(" + Std.string(self.secondary_degree)) + "/") + Std.string(self.degree)) + ")") if ((python_internal_ArrayImpl.indexOf(self.modifiers,Modifier.SECONDARY,None) != -1)) else ("" + Std.string(self.degree)))
        _this = self.modifiers
        return ((((((((((("ChordThing(" + Std.string(self.key)) + ",") + ("null" if modeStr is None else modeStr)) + ",") + ("null" if degree_repr is None else degree_repr)) + ",") + Std.string(self.inversion)) + ",") + Std.string(self.length)) + ") + ") + HxOverrides.stringOrNull(((("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + "]"))))

    def clone(self):
        ct = ChordThing(self.key,self.mode,self.degree,self.length)
        ct.modifiers = list(self.modifiers)
        ct.inversion = self.inversion
        ct.secondary_degree = self.secondary_degree
        return ct

    def has_extensions(self):
        if (python_internal_ArrayImpl.indexOf(self.modifiers,Modifier.SEVENTH,None) == -1):
            return (python_internal_ArrayImpl.indexOf(self.modifiers,Modifier.NINTH,None) != -1)
        else:
            return True

    def get_mode(self):
        if self.has_modal_interchange():
            if (self.mode == _Mode_Mode_Fields_.MINOR):
                return _Mode_Mode_Fields_.MAJOR
            else:
                return _Mode_Mode_Fields_.MINOR
        else:
            return self.mode



class Class: pass

class Modifier(Enum):
    __slots__ = ()
    _hx_class_name = "Modifier"
    _hx_constructs = ["MODAL_INTERCHANGE", "SEVENTH", "NINTH", "SECONDARY", "VOICE_LEADING"]
Modifier.MODAL_INTERCHANGE = Modifier("MODAL_INTERCHANGE", 0, ())
Modifier.SEVENTH = Modifier("SEVENTH", 1, ())
Modifier.NINTH = Modifier("NINTH", 2, ())
Modifier.SECONDARY = Modifier("SECONDARY", 3, ())
Modifier.VOICE_LEADING = Modifier("VOICE_LEADING", 4, ())


class Mode:
    _hx_class_name = "Mode"
    __slots__ = ("intervals",)
    _hx_fields = ["intervals"]
    _hx_methods = ["nth_from", "make_chord_from_pattern", "make_triad", "make_seventh", "make_ninth"]
    _hx_statics = ["major_intervals", "minor_intervals", "_major_mode", "_minor_mode", "getMajorMode", "getMinorMode", "constructNthMajorMode", "ionian", "dorian", "phrygian", "lydian", "mixolydian", "aeolian", "locrian"]

    def __init__(self,intervals):
        self.intervals = intervals

    def nth_from(self,root,n):
        if (n == 1):
            return root
        note = root
        _g = 0
        _g1 = (n - 1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            note = (note + python_internal_ArrayImpl._get(self.intervals, HxOverrides.mod(i, len(self.intervals))))
        return note

    def make_chord_from_pattern(self,root,n,pat):
        _gthis = self
        def _hx_local_1():
            def _hx_local_0(x):
                return _gthis.nth_from(root,((n + x) - 1))
            return list(map(_hx_local_0,pat))
        return _hx_local_1()

    def make_triad(self,root,n):
        return self.make_chord_from_pattern(root,n,[1, 3, 5])

    def make_seventh(self,root,n):
        return self.make_chord_from_pattern(root,n,[1, 3, 5, 7])

    def make_ninth(self,root,n):
        return self.make_chord_from_pattern(root,n,[1, 3, 5, 7, 9])
    _major_mode = None
    _minor_mode = None

    @staticmethod
    def getMajorMode():
        if (Mode._major_mode is None):
            Mode._major_mode = Mode(Mode.major_intervals)
        return Mode._major_mode

    @staticmethod
    def getMinorMode():
        if (Mode._minor_mode is None):
            Mode._minor_mode = Mode(Mode.minor_intervals)
        return Mode._minor_mode

    @staticmethod
    def constructNthMajorMode(offset):
        new_intervals = (Mode.major_intervals[(offset - 1):None] + Mode.major_intervals[0:(offset - 1)])
        return Mode(new_intervals)

    @staticmethod
    def ionian():
        return Mode.constructNthMajorMode(1)

    @staticmethod
    def dorian():
        return Mode.constructNthMajorMode(2)

    @staticmethod
    def phrygian():
        return Mode.constructNthMajorMode(3)

    @staticmethod
    def lydian():
        return Mode.constructNthMajorMode(4)

    @staticmethod
    def mixolydian():
        return Mode.constructNthMajorMode(5)

    @staticmethod
    def aeolian():
        return Mode.constructNthMajorMode(6)

    @staticmethod
    def locrian():
        return Mode.constructNthMajorMode(7)



class _Mode_Mode_Fields_:
    _hx_class_name = "_Mode.Mode_Fields_"
    __slots__ = ()
    _hx_statics = ["MAJOR", "MINOR"]


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "compare", "isEnumValue"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)

    @staticmethod
    def compare(a,b):
        if ((a is None) and ((b is None))):
            return 0
        if (a is None):
            return 1
        elif (b is None):
            return -1
        elif HxOverrides.eq(a,b):
            return 0
        elif (a > b):
            return 1
        else:
            return -1

    @staticmethod
    def isEnumValue(v):
        if not HxOverrides.eq(v,Enum):
            return isinstance(v,Enum)
        else:
            return False


class Note:
    _hx_class_name = "Note"
    __slots__ = ("chan", "note", "startTime", "length", "velocity")
    _hx_fields = ["chan", "note", "startTime", "length", "velocity"]
    _hx_methods = ["toString", "toStruct", "equals", "transpose"]

    def __init__(self,chan,note,velocity,startTime,length):
        self.chan = chan
        self.note = note
        self.startTime = startTime
        self.length = length
        self.velocity = velocity

    def toString(self):
        return (((((((((("Note[chan: " + Std.string(self.chan)) + ", note: ") + Std.string(self.note)) + ", vel: ") + Std.string(self.velocity)) + ", startTime: ") + Std.string(self.startTime)) + ", length: ") + Std.string(self.length)) + "]")

    def toStruct(self):
        return _hx_AnonObject({'chan': self.chan, 'note': self.note, 'velocity': self.velocity, 'startTime': self.startTime, 'length': self.length})

    def equals(self,other):
        if (((self.note == other.note) and ((self.velocity == other.velocity))) and ((self.startTime == other.startTime))):
            return (self.length == other.length)
        else:
            return False

    def transpose(self,offset):
        return Note(self.chan,(self.note + offset),self.velocity,self.startTime,self.length)



class ScoreUtilities:
    _hx_class_name = "ScoreUtilities"
    __slots__ = ()
    _hx_statics = ["getNoteOn", "getNoteOff", "transposeNotes", "makePianoRollSVG"]

    @staticmethod
    def getNoteOn():
        return NoteEventType.NOTE_ON

    @staticmethod
    def getNoteOff():
        return NoteEventType.NOTE_OFF

    @staticmethod
    def transposeNotes(notes,offset):
        _g = []
        _g1 = 0
        while (_g1 < len(notes)):
            n = (notes[_g1] if _g1 >= 0 and _g1 < len(notes) else None)
            _g1 = (_g1 + 1)
            x = n.transpose(offset)
            _g.append(x)
        return _g

    @staticmethod
    def makePianoRollSVG(notes,svgWidth,svgHeight):
        noteHeight = (svgHeight / 100)
        maxTime = 0.0
        _g = 0
        while (_g < len(notes)):
            note = (notes[_g] if _g >= 0 and _g < len(notes) else None)
            _g = (_g + 1)
            b = (note.startTime + note.length)
            if (not python_lib_Math.isnan(maxTime)):
                maxTime = (b if (python_lib_Math.isnan(b)) else max(maxTime,b))
        timeScale = ((svgWidth / maxTime) if ((maxTime > 0)) else 0.1)
        pitchOffset = 20
        svg_b = python_lib_io_StringIO()
        svg_b.write(Std.string((((((((("<svg width=\"" + Std.string(svgWidth)) + "\" height=\"") + Std.string(svgHeight)) + "\" viewBox=\"0 0 ") + Std.string(svgWidth)) + " ") + Std.string(svgHeight)) + "\" xmlns=\"http://www.w3.org/2000/svg\">\n")))
        _g = 0
        _g1 = None
        try:
            _g1 = int((svgHeight / noteHeight))
        except BaseException as _g2:
            None
            _g1 = None
        _g2 = _g1
        while (_g < _g2):
            i = _g
            _g = (_g + 1)
            y = (i * noteHeight)
            svg_b.write(Std.string((((((("<line x1=\"0\" y1=\"" + Std.string(y)) + "\" x2=\"") + Std.string(svgWidth)) + "\" y2=\"") + Std.string(y)) + "\" stroke=\"#ddd\" />\n")))
        _g = 0
        while (_g < len(notes)):
            note = (notes[_g] if _g >= 0 and _g < len(notes) else None)
            _g = (_g + 1)
            x = (note.startTime * timeScale)
            y = ((svgHeight - ((((note.note - pitchOffset)) * noteHeight))) - noteHeight)
            width = (note.length * timeScale)
            height = noteHeight
            if (((python_lib_Math.isnan(x) or python_lib_Math.isnan(y)) or python_lib_Math.isnan(width)) or python_lib_Math.isnan(height)):
                print(str(((((((((("Invalid note values: note=" + Std.string(note)) + ", x=") + Std.string(x)) + ", y=") + Std.string(y)) + ", width=") + Std.string(width)) + ", height=") + Std.string(height))))
                continue
            svg_b.write(Std.string((((((((("<rect x=\"" + Std.string(x)) + "\" y=\"") + Std.string(y)) + "\" width=\"") + Std.string(width)) + "\" height=\"") + Std.string(height)) + "\" fill=\"black\" />\n")))
        svg_b.write("</svg>")
        return svg_b.getvalue()

class NoteEventType(Enum):
    __slots__ = ()
    _hx_class_name = "NoteEventType"
    _hx_constructs = ["NOTE_ON", "NOTE_OFF"]
NoteEventType.NOTE_ON = NoteEventType("NOTE_ON", 0, ())
NoteEventType.NOTE_OFF = NoteEventType("NOTE_OFF", 1, ())


class DeltaEvent:
    _hx_class_name = "DeltaEvent"
    __slots__ = ("chan", "note", "velocity", "deltaFromLast", "type")
    _hx_fields = ["chan", "note", "velocity", "deltaFromLast", "type"]
    _hx_methods = ["toString"]

    def __init__(self,chan,note,velocity,deltaFromLast,_hx_type):
        self.chan = chan
        self.note = note
        self.velocity = velocity
        self.deltaFromLast = deltaFromLast
        self.type = _hx_type

    def toString(self):
        return (((((((((("DeltaEvent[chan: " + Std.string(self.chan)) + ", note: ") + Std.string(self.note)) + ", vel: ") + Std.string(self.velocity)) + ", delta: ") + Std.string(self.deltaFromLast)) + ", type: ") + Std.string(self.type)) + "]")



class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["isOfType", "string", "parseInt"]

    @staticmethod
    def isOfType(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if ((type(t) == type) and (t == Dynamic)):
            return (v is not None)
        isBool = isinstance(v,bool)
        if (((type(t) == type) and (t == Bool)) and isBool):
            return True
        if ((((not isBool) and (not ((type(t) == type) and (t == Bool)))) and ((type(t) == type) and (t == Int))) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and ((type(t) == type) and (t == Int))):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp1 = None
            try:
                tmp1 = int(v)
            except BaseException as _g:
                None
                tmp1 = None
            tmp = (v == tmp1)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and ((type(t) == type) and (t == Float))) and isinstance(v,(float, int))):
            return True
        if ((type(t) == type) and (t == str)):
            return isinstance(v,str)
        isEnumType = ((type(t) == type) and (t == Enum))
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = ((type(t) == type) and (t == Class))
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp = None
        try:
            tmp = isinstance(v,t)
        except BaseException as _g:
            None
            tmp = False
        if tmp:
            return True
        if python_lib_Inspect.isclass(t):
            cls = t
            loop = None
            def _hx_local_1(intf):
                f = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f is not None):
                    _g = 0
                    while (_g < len(f)):
                        i = (f[_g] if _g >= 0 and _g < len(f) else None)
                        _g = (_g + 1)
                        if (i == cls):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            result = False
            while (currentClass is not None):
                if loop(currentClass):
                    result = True
                    break
                currentClass = python_Boot.getSuperClass(currentClass)
            return result
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        _hx_len = len(x)
        index = 0
        while (index < _hx_len):
            if (not (x[index] in " \n\r\t\x0B\x0C")):
                break
            index = (index + 1)
        isNegative = None
        if (index < _hx_len):
            sign = x[index]
            if ((sign == "-") or ((sign == "+"))):
                index = (index + 1)
            isNegative = (sign == "-")
        else:
            isNegative = False
        isHexadecimal = None
        if ((index + 1) < _hx_len):
            cur = x[index]
            next = x[(index + 1)]
            isHexadecimal = ((cur == "0") and (((next == "x") or ((next == "X")))))
        else:
            isHexadecimal = False
        if isHexadecimal:
            index = (index + 2)
        cur = index
        if isHexadecimal:
            while (cur < _hx_len):
                if (not (x[cur] in "0123456789abcdefABCDEF")):
                    break
                cur = (cur + 1)
        else:
            while (cur < _hx_len):
                if (not (x[cur] in "0123456789")):
                    break
                cur = (cur + 1)
        firstInvalidIndex = cur
        if (index == firstInvalidIndex):
            return None
        result = int(HxString.substring(x,index,firstInvalidIndex),(16 if isHexadecimal else 10))
        if isNegative:
            return -result
        else:
            return result


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["isSpace", "ltrim", "rtrim", "trim"]

    @staticmethod
    def isSpace(s,pos):
        if (((len(s) == 0) or ((pos < 0))) or ((pos >= len(s)))):
            return False
        c = HxString.charCodeAt(s,pos)
        if (not (((c > 8) and ((c < 14))))):
            return (c == 32)
        else:
            return True

    @staticmethod
    def ltrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,r)):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,r,(l - r))
        else:
            return s

    @staticmethod
    def rtrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,((l - r) - 1))):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,0,(l - r))
        else:
            return s

    @staticmethod
    def trim(s):
        return StringTools.ltrim(StringTools.rtrim(s))

class SeqTypes(Enum):
    __slots__ = ()
    _hx_class_name = "SeqTypes"
    _hx_constructs = ["CHORDS", "EUCLIDEAN", "BASS", "TOP", "RANDOM", "SCALE"]
SeqTypes.CHORDS = SeqTypes("CHORDS", 0, ())
SeqTypes.EUCLIDEAN = SeqTypes("EUCLIDEAN", 1, ())
SeqTypes.BASS = SeqTypes("BASS", 2, ())
SeqTypes.TOP = SeqTypes("TOP", 3, ())
SeqTypes.RANDOM = SeqTypes("RANDOM", 4, ())
SeqTypes.SCALE = SeqTypes("SCALE", 5, ())

class DivisionValue(Enum):
    __slots__ = ()
    _hx_class_name = "DivisionValue"
    _hx_constructs = ["SIXTEENTH", "TWELFTH", "EIGHTH", "SIXTH", "QUARTER", "THIRD", "HALF", "WHOLE"]
DivisionValue.SIXTEENTH = DivisionValue("SIXTEENTH", 0, ())
DivisionValue.TWELFTH = DivisionValue("TWELFTH", 1, ())
DivisionValue.EIGHTH = DivisionValue("EIGHTH", 2, ())
DivisionValue.SIXTH = DivisionValue("SIXTH", 3, ())
DivisionValue.QUARTER = DivisionValue("QUARTER", 4, ())
DivisionValue.THIRD = DivisionValue("THIRD", 5, ())
DivisionValue.HALF = DivisionValue("HALF", 6, ())
DivisionValue.WHOLE = DivisionValue("WHOLE", 7, ())

class RhythmicDensity(Enum):
    __slots__ = ()
    _hx_class_name = "RhythmicDensity"
    _hx_constructs = ["SIXTEEN", "TWELVE", "EIGHT", "SIX", "FOUR", "THREE", "TWO", "ONE"]
RhythmicDensity.SIXTEEN = RhythmicDensity("SIXTEEN", 0, ())
RhythmicDensity.TWELVE = RhythmicDensity("TWELVE", 1, ())
RhythmicDensity.EIGHT = RhythmicDensity("EIGHT", 2, ())
RhythmicDensity.SIX = RhythmicDensity("SIX", 3, ())
RhythmicDensity.FOUR = RhythmicDensity("FOUR", 4, ())
RhythmicDensity.THREE = RhythmicDensity("THREE", 5, ())
RhythmicDensity.TWO = RhythmicDensity("TWO", 6, ())
RhythmicDensity.ONE = RhythmicDensity("ONE", 7, ())


class IRhythmGenerator:
    _hx_class_name = "IRhythmGenerator"
    __slots__ = ()
    _hx_methods = ["hasNext", "next"]


class ILineGenerator:
    _hx_class_name = "ILineGenerator"
    __slots__ = ()
    _hx_methods = ["generateNotes", "getPitches", "getDurations"]


class SilentIterator:
    _hx_class_name = "SilentIterator"
    __slots__ = ()
    _hx_methods = ["hasNext", "next"]
    _hx_interfaces = [IRhythmGenerator]

    def __init__(self):
        pass

    def hasNext(self):
        return True

    def next(self):
        return 0



class RhythmGenerator:
    _hx_class_name = "RhythmGenerator"
    __slots__ = ("rhythm", "index")
    _hx_fields = ["rhythm", "index"]
    _hx_methods = ["restart", "hasNext", "next"]
    _hx_interfaces = [IRhythmGenerator]

    def __init__(self,k,n):
        self.rhythm = TimeManipulator.distributePulsesEvenly(k,n)
        self.index = 0

    def restart(self):
        self.index = 0

    def hasNext(self):
        return True

    def next(self):
        beat = python_internal_ArrayImpl._get(self.rhythm, self.index)
        self.index = HxOverrides.mod(((self.index + 1)), len(self.rhythm))
        return beat



class ArpIterator:
    _hx_class_name = "ArpIterator"
    __slots__ = ("chord", "noteIndex", "step")
    _hx_fields = ["chord", "noteIndex", "step"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,chord,step = None):
        if (step is None):
            step = 1
        self.chord = chord
        self.noteIndex = 0
        self.step = step

    def hasNext(self):
        return True

    def next(self):
        note = python_internal_ArrayImpl._get(self.chord, HxOverrides.mod(self.noteIndex, len(self.chord)))
        self.noteIndex = HxOverrides.mod(((self.noteIndex + self.step)), len(self.chord))
        return note



class NoteSelectorIterator:
    _hx_class_name = "NoteSelectorIterator"
    __slots__ = ("chords", "chordIndex", "noteSelector")
    _hx_fields = ["chords", "chordIndex", "noteSelector"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,chords,noteSelector):
        self.chords = chords.toNotes()
        self.chordIndex = 0
        self.noteSelector = noteSelector

    def hasNext(self):
        return (self.chordIndex < len(self.chords))

    def next(self):
        note = self.noteSelector(python_internal_ArrayImpl._get(self.chords, self.chordIndex))
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.chordIndex
        _hx_local_0.chordIndex = (_hx_local_1 + 1)
        _hx_local_1
        return note



class MenuHelper:
    _hx_class_name = "MenuHelper"
    __slots__ = ()
    _hx_statics = ["getDivisionNames", "getDivisionValues", "getDivisionFor", "divisionValue2Numeric", "getRhythmicDensityNames", "getRhythmicDensityValues", "getRhythmicDensityFor", "rhythmicDensityToNumeric"]

    @staticmethod
    def getDivisionNames():
        return ["1/16", "1/12", "1/8", "1/6", "1/4", "1/3", "1/2", "1"]

    @staticmethod
    def getDivisionValues():
        return [DivisionValue.SIXTEENTH, DivisionValue.TWELFTH, DivisionValue.EIGHTH, DivisionValue.SIXTH, DivisionValue.QUARTER, DivisionValue.THIRD, DivisionValue.HALF, DivisionValue.WHOLE]

    @staticmethod
    def getDivisionFor(i):
        return python_internal_ArrayImpl._get(MenuHelper.getDivisionValues(), i)

    @staticmethod
    def divisionValue2Numeric(dv):
        _g = haxe_ds_EnumValueMap()
        _g.set(DivisionValue.SIXTEENTH,0.0625)
        _g.set(DivisionValue.TWELFTH,0.0833333333333333287)
        _g.set(DivisionValue.EIGHTH,0.125)
        _g.set(DivisionValue.SIXTH,0.166666666666666657)
        _g.set(DivisionValue.QUARTER,0.25)
        _g.set(DivisionValue.THIRD,0.333333333333333315)
        _g.set(DivisionValue.HALF,0.5)
        _g.set(DivisionValue.WHOLE,1)
        return _g.get(dv)

    @staticmethod
    def getRhythmicDensityNames():
        return ["16 patterns/chord", "12 patterns/chord", "8 patterns/chord", "6 patterns/chord", "4 patterns/chord", "3 patterns/chord", "2 patterns/chord", "1 pattern/chord"]

    @staticmethod
    def getRhythmicDensityValues():
        return [RhythmicDensity.SIXTEEN, RhythmicDensity.TWELVE, RhythmicDensity.EIGHT, RhythmicDensity.SIX, RhythmicDensity.FOUR, RhythmicDensity.THREE, RhythmicDensity.TWO, RhythmicDensity.ONE]

    @staticmethod
    def getRhythmicDensityFor(i):
        return python_internal_ArrayImpl._get(MenuHelper.getRhythmicDensityValues(), i)

    @staticmethod
    def rhythmicDensityToNumeric(rd):
        _g = haxe_ds_EnumValueMap()
        _g.set(RhythmicDensity.SIXTEEN,0.0625)
        _g.set(RhythmicDensity.TWELVE,0.0833333333333333287)
        _g.set(RhythmicDensity.EIGHT,0.125)
        _g.set(RhythmicDensity.SIX,0.166666666666666657)
        _g.set(RhythmicDensity.FOUR,0.25)
        _g.set(RhythmicDensity.THREE,0.333333333333333315)
        _g.set(RhythmicDensity.TWO,0.5)
        _g.set(RhythmicDensity.ONE,1)
        result = _g.get(rd)
        return result


class TimeManipulator:
    _hx_class_name = "TimeManipulator"
    __slots__ = ("ppq", "chordDuration", "chordTicks", "bpm")
    _hx_fields = ["ppq", "chordDuration", "chordTicks", "bpm"]
    _hx_methods = ["recalc", "setChordDuration", "setPPQ", "setBPM", "toString", "quarterToMS", "getBPM", "getPPQ"]
    _hx_statics = ["distributePulsesEvenly"]

    def __init__(self):
        self.chordTicks = None
        self.ppq = 1000
        self.chordDuration = 16
        self.bpm = 120
        self.recalc()

    def recalc(self):
        self.chordTicks = (self.ppq * self.chordDuration)

    def setChordDuration(self,cl):
        self.chordDuration = cl
        self.recalc()
        return self

    def setPPQ(self,p):
        self.ppq = p
        self.recalc()
        return self

    def setBPM(self,b):
        self.bpm = b
        self.recalc()
        return self

    def toString(self):
        return ((((((("\nTimeManipulator\n  PPQ: " + Std.string(self.ppq)) + "\n  Chord Length Multiplier: ") + Std.string(self.chordDuration)) + "\n  quarterToMS: ") + Std.string(self.quarterToMS())) + "\n  chordTicks:") + Std.string(self.chordTicks))

    def quarterToMS(self):
        return (60 / self.bpm)

    def getBPM(self):
        return self.bpm

    def getPPQ(self):
        return self.ppq

    @staticmethod
    def distributePulsesEvenly(k,n):
        rhythm = list()
        _g = 0
        _g1 = n
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            rhythm.append(0)
        stepSize = (n / k)
        currentStep = 0.0
        _g = 0
        _g1 = k
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            python_internal_ArrayImpl._set(rhythm, Math.floor((currentStep + 0.5)), 1)
            currentStep = (currentStep + stepSize)
        return rhythm



class AbstractLineGenerator:
    _hx_class_name = "AbstractLineGenerator"
    __slots__ = ("timeManipulator", "seq", "k", "n", "gateLength", "rhythmicDensity", "transposition", "cachedNotes")
    _hx_fields = ["timeManipulator", "seq", "k", "n", "gateLength", "rhythmicDensity", "transposition", "cachedNotes"]
    _hx_methods = ["transpose", "generateCachedNotes", "pickNotesFromChord", "getPitches", "getDurations", "generateNotes", "notesToTimeEvents", "sortTimeEvents", "asDeltaEvents", "notesInSeconds"]
    _hx_interfaces = [ILineGenerator]

    def __init__(self,timeManipulator,seq,k,n,gateLength,rhythmicDensity):
        self.timeManipulator = timeManipulator
        self.seq = seq
        self.k = k
        self.n = n
        self.gateLength = gateLength
        self.rhythmicDensity = rhythmicDensity
        self.transposition = 0
        self.cachedNotes = None

    def transpose(self,offset):
        self.transposition = offset
        self.cachedNotes = None
        return self

    def generateCachedNotes(self):
        notes = list()
        currentTime = 0.0
        patternDuration = (self.timeManipulator.chordTicks * self.rhythmicDensity)
        stepSize = (patternDuration / self.n)
        noteLength = (stepSize * self.gateLength)
        patternsPerChord = Math.floor((1 / self.rhythmicDensity))
        _g = 0
        _g1 = self.seq.toNotes()
        while (_g < len(_g1)):
            c = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            rGen = RhythmGenerator(self.k,self.n)
            _g2 = 0
            _g3 = patternsPerChord
            while (_g2 < _g3):
                pattern = _g2
                _g2 = (_g2 + 1)
                _g4 = 0
                _g5 = self.n
                while (_g4 < _g5):
                    step = _g4
                    _g4 = (_g4 + 1)
                    beat = rGen.next()
                    if (beat == 1):
                        notesToAdd = self.pickNotesFromChord(c)
                        _g6 = 0
                        while (_g6 < len(notesToAdd)):
                            note = (notesToAdd[_g6] if _g6 >= 0 and _g6 < len(notesToAdd) else None)
                            _g6 = (_g6 + 1)
                            x = Note(0,note,100,currentTime,noteLength)
                            notes.append(x)
                    currentTime = (currentTime + stepSize)
        return notes

    def pickNotesFromChord(self,chord):
        raise haxe_exceptions_NotImplementedException(None,None,_hx_AnonObject({'fileName': "src/goldenpond/TimedSequence.hx", 'lineNumber': 331, 'className': "AbstractLineGenerator", 'methodName': "pickNotesFromChord"}))

    def getPitches(self):
        pitches = list()
        _g = 0
        _g1 = self.cachedNotes
        while (_g < len(_g1)):
            note = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            x = note.note
            pitches.append(x)
        return pitches

    def getDurations(self):
        durations = list()
        if (len(self.cachedNotes) == 0):
            return durations
        _g = 0
        _g1 = (len(self.cachedNotes) - 1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            currentNote = (self.cachedNotes[i] if i >= 0 and i < len(self.cachedNotes) else None)
            nextNote = python_internal_ArrayImpl._get(self.cachedNotes, (i + 1))
            duration = (nextNote.startTime - currentNote.startTime)
            durations.append(duration)
        x = python_internal_ArrayImpl._get(self.cachedNotes, (len(self.cachedNotes) - 1)).length
        durations.append(x)
        return durations

    def generateNotes(self,startTime,channel,velocity):
        if (self.cachedNotes is None):
            self.cachedNotes = self.generateCachedNotes()
        adjustedNotes = list()
        _g = 0
        _g1 = self.cachedNotes
        while (_g < len(_g1)):
            note = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            x = Note(channel,(note.note + self.transposition),velocity,(note.startTime + startTime),note.length)
            adjustedNotes.append(x)
        return adjustedNotes

    def notesToTimeEvents(self,notes):
        timeEvents = list()
        _g = 0
        while (_g < len(notes)):
            note = (notes[_g] if _g >= 0 and _g < len(notes) else None)
            _g = (_g + 1)
            x = _hx_AnonObject({'time': note.startTime, 'event': DeltaEvent(note.chan,note.note,note.velocity,0,NoteEventType.NOTE_ON)})
            timeEvents.append(x)
            x1 = _hx_AnonObject({'time': (note.startTime + note.length), 'event': DeltaEvent(note.chan,note.note,0,0,NoteEventType.NOTE_OFF)})
            timeEvents.append(x1)
        return timeEvents

    def sortTimeEvents(self,timeEvents):
        def _hx_local_0(a,b):
            timeDiff = (a.time - b.time)
            if (Reflect.field(Math,"fabs")(timeDiff) < 0.0001):
                if ((a.event.note == b.event.note) and ((a.event.type != b.event.type))):
                    if (a.event.type == NoteEventType.NOTE_OFF):
                        return -1
                    else:
                        return 1
                return (a.event.note - b.event.note)
            if (timeDiff > 0):
                return 1
            else:
                return -1
        timeEvents.sort(key= python_lib_Functools.cmp_to_key(_hx_local_0))
        return timeEvents

    def asDeltaEvents(self):
        events = list()
        notes = self.generateCachedNotes()
        timeEvents = self.notesToTimeEvents(notes)
        timeEvents = self.sortTimeEvents(timeEvents)
        _g = 0
        _g1 = len(timeEvents)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            previousTime = (python_internal_ArrayImpl._get(timeEvents, (i - 1)).time if ((i > 0)) else 0.0)
            currentTime = (timeEvents[i] if i >= 0 and i < len(timeEvents) else None).time
            delta = (currentTime - previousTime)
            (timeEvents[i] if i >= 0 and i < len(timeEvents) else None).event.deltaFromLast = delta
            x = (timeEvents[i] if i >= 0 and i < len(timeEvents) else None).event
            events.append(x)
        return events

    def notesInSeconds(self,startTime,channel,velocity):
        tickNotes = self.generateNotes(startTime,channel,velocity)
        secondsPerTick = (60.0 / ((self.timeManipulator.getBPM() * self.timeManipulator.getPPQ())))
        _g = []
        _g1 = 0
        while (_g1 < len(tickNotes)):
            n = (tickNotes[_g1] if _g1 >= 0 and _g1 < len(tickNotes) else None)
            _g1 = (_g1 + 1)
            x = Note(n.chan,n.note,n.velocity,(n.startTime * secondsPerTick),(n.length * secondsPerTick))
            _g.append(x)
        return _g



class ChordLine(AbstractLineGenerator):
    _hx_class_name = "ChordLine"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["pickNotesFromChord"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = AbstractLineGenerator


    def __init__(self,timeManipulator,seq,k,n,gateLength,rhythmicDensity):
        super().__init__(timeManipulator,seq,k,n,gateLength,rhythmicDensity)

    def pickNotesFromChord(self,chord):
        return chord



class BassLine(AbstractLineGenerator):
    _hx_class_name = "BassLine"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["pickNotesFromChord"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = AbstractLineGenerator


    def __init__(self,timeManipulator,seq,k,n,gateLength,rhythmicDensity):
        super().__init__(timeManipulator,seq,k,n,gateLength,rhythmicDensity)

    def pickNotesFromChord(self,chord):
        return [((chord[0] if 0 < len(chord) else None) - 12)]



class TopLine(AbstractLineGenerator):
    _hx_class_name = "TopLine"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["pickNotesFromChord"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = AbstractLineGenerator


    def __init__(self,timeManipulator,seq,k,n,gateLength,rhythmicDensity):
        super().__init__(timeManipulator,seq,k,n,gateLength,rhythmicDensity)

    def pickNotesFromChord(self,chord):
        return [(python_internal_ArrayImpl._get(chord, (len(chord) - 1)) + 12)]



class ArpLine(AbstractLineGenerator):
    _hx_class_name = "ArpLine"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["generateCachedNotes"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = AbstractLineGenerator


    def __init__(self,timeManipulator,seq,k,n,gateLength,rhythmicDensity):
        super().__init__(timeManipulator,seq,k,n,gateLength,rhythmicDensity)

    def generateCachedNotes(self):
        notes = list()
        currentTime = 0.0
        patternDuration = (self.timeManipulator.chordTicks * self.rhythmicDensity)
        euclideanStepSize = (patternDuration / self.n)
        patternsPerChord = Math.floor((1 / self.rhythmicDensity))
        _g = 0
        _g1 = self.seq.toNotes()
        while (_g < len(_g1)):
            c = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            arpIter = ArpIterator(c)
            _g2 = 0
            _g3 = patternsPerChord
            while (_g2 < _g3):
                pattern = _g2
                _g2 = (_g2 + 1)
                rGen = RhythmGenerator(self.k,self.n)
                _g4 = 0
                _g5 = self.n
                while (_g4 < _g5):
                    step = _g4
                    _g4 = (_g4 + 1)
                    beat = rGen.next()
                    if (beat == 1):
                        x = Note(0,arpIter.next(),100,currentTime,(euclideanStepSize * self.gateLength))
                        notes.append(x)
                    currentTime = (currentTime + euclideanStepSize)
        return notes



class SilentLine(AbstractLineGenerator):
    _hx_class_name = "SilentLine"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["generateCachedNotes"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = AbstractLineGenerator


    def __init__(self,timeManipulator,seq,gateLength,rhythmicDensity):
        super().__init__(timeManipulator,seq,1,1,gateLength,rhythmicDensity)

    def generateCachedNotes(self):
        return []



class RandomLine(AbstractLineGenerator):
    _hx_class_name = "RandomLine"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["pickNotesFromChord"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = AbstractLineGenerator


    def __init__(self,timeManipulator,seq,k,n,gateLength,rhythmicDensity):
        super().__init__(timeManipulator,seq,k,n,gateLength,rhythmicDensity)

    def pickNotesFromChord(self,chord):
        randomIndex = Math.floor((python_lib_Random.random() * len(chord)))
        return [(chord[randomIndex] if randomIndex >= 0 and randomIndex < len(chord) else None)]



class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class haxe_Exception(Exception):
    _hx_class_name = "haxe.Exception"
    __slots__ = ("_hx___nativeStack", "_hx___skipStack", "_hx___nativeException", "_hx___previousException")
    _hx_fields = ["__nativeStack", "__skipStack", "__nativeException", "__previousException"]
    _hx_methods = ["unwrap", "toString", "get_message", "get_native"]
    _hx_statics = ["caught", "thrown"]
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,message,previous = None,native = None):
        self._hx___previousException = None
        self._hx___nativeException = None
        self._hx___nativeStack = None
        self._hx___skipStack = 0
        super().__init__(message)
        self._hx___previousException = previous
        if ((native is not None) and Std.isOfType(native,BaseException)):
            self._hx___nativeException = native
            self._hx___nativeStack = haxe_NativeStackTrace.exceptionStack()
        else:
            self._hx___nativeException = self
            infos = python_lib_Traceback.extract_stack()
            if (len(infos) != 0):
                infos.pop()
            infos.reverse()
            self._hx___nativeStack = infos

    def unwrap(self):
        return self._hx___nativeException

    def toString(self):
        return self.get_message()

    def get_message(self):
        return str(self)

    def get_native(self):
        return self._hx___nativeException

    @staticmethod
    def caught(value):
        if Std.isOfType(value,haxe_Exception):
            return value
        elif Std.isOfType(value,BaseException):
            return haxe_Exception(str(value),None,value)
        else:
            return haxe_ValueException(value,None,value)

    @staticmethod
    def thrown(value):
        if Std.isOfType(value,haxe_Exception):
            return value.get_native()
        elif Std.isOfType(value,BaseException):
            return value
        else:
            e = haxe_ValueException(value)
            e._hx___skipStack = (e._hx___skipStack + 1)
            return e



class haxe_NativeStackTrace:
    _hx_class_name = "haxe.NativeStackTrace"
    __slots__ = ()
    _hx_statics = ["saveStack", "exceptionStack"]

    @staticmethod
    def saveStack(exception):
        pass

    @staticmethod
    def exceptionStack():
        exc = python_lib_Sys.exc_info()
        if (exc[2] is not None):
            infos = python_lib_Traceback.extract_tb(exc[2])
            infos.reverse()
            return infos
        else:
            return []


class haxe_ValueException(haxe_Exception):
    _hx_class_name = "haxe.ValueException"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["unwrap"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,value,previous = None,native = None):
        self.value = None
        super().__init__(("null" if ((value is None)) else Std.string(value)),previous,native)
        self.value = value

    def unwrap(self):
        return self.value



class haxe_ds_BalancedTree:
    _hx_class_name = "haxe.ds.BalancedTree"
    __slots__ = ("root",)
    _hx_fields = ["root"]
    _hx_methods = ["set", "get", "setLoop", "balance", "compare"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.root = None

    def set(self,key,value):
        self.root = self.setLoop(key,value,self.root)

    def get(self,key):
        node = self.root
        while (node is not None):
            c = self.compare(key,node.key)
            if (c == 0):
                return node.value
            if (c < 0):
                node = node.left
            else:
                node = node.right
        return None

    def setLoop(self,k,v,node):
        if (node is None):
            return haxe_ds_TreeNode(None,k,v,None)
        c = self.compare(k,node.key)
        if (c == 0):
            return haxe_ds_TreeNode(node.left,k,v,node.right,(0 if ((node is None)) else node._height))
        elif (c < 0):
            nl = self.setLoop(k,v,node.left)
            return self.balance(nl,node.key,node.value,node.right)
        else:
            nr = self.setLoop(k,v,node.right)
            return self.balance(node.left,node.key,node.value,nr)

    def balance(self,l,k,v,r):
        hl = (0 if ((l is None)) else l._height)
        hr = (0 if ((r is None)) else r._height)
        if (hl > ((hr + 2))):
            _this = l.left
            _this1 = l.right
            if (((0 if ((_this is None)) else _this._height)) >= ((0 if ((_this1 is None)) else _this1._height))):
                return haxe_ds_TreeNode(l.left,l.key,l.value,haxe_ds_TreeNode(l.right,k,v,r))
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,haxe_ds_TreeNode(l.right.right,k,v,r))
        elif (hr > ((hl + 2))):
            _this = r.right
            _this1 = r.left
            if (((0 if ((_this is None)) else _this._height)) > ((0 if ((_this1 is None)) else _this1._height))):
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right)
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right))
        else:
            return haxe_ds_TreeNode(l,k,v,r,(((hl if ((hl > hr)) else hr)) + 1))

    def compare(self,k1,k2):
        return Reflect.compare(k1,k2)



class haxe_ds_TreeNode:
    _hx_class_name = "haxe.ds.TreeNode"
    __slots__ = ("left", "right", "key", "value", "_height")
    _hx_fields = ["left", "right", "key", "value", "_height"]

    def __init__(self,l,k,v,r,h = None):
        if (h is None):
            h = -1
        self._height = None
        self.left = l
        self.key = k
        self.value = v
        self.right = r
        if (h == -1):
            tmp = None
            _this = self.left
            _this1 = self.right
            if (((0 if ((_this is None)) else _this._height)) > ((0 if ((_this1 is None)) else _this1._height))):
                _this = self.left
                tmp = (0 if ((_this is None)) else _this._height)
            else:
                _this = self.right
                tmp = (0 if ((_this is None)) else _this._height)
            self._height = (tmp + 1)
        else:
            self._height = h



class haxe_ds_EnumValueMap(haxe_ds_BalancedTree):
    _hx_class_name = "haxe.ds.EnumValueMap"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["compare", "compareArgs", "compareArg"]
    _hx_statics = []
    _hx_interfaces = [haxe_IMap]
    _hx_super = haxe_ds_BalancedTree


    def __init__(self):
        super().__init__()

    def compare(self,k1,k2):
        d = (k1.index - k2.index)
        if (d != 0):
            return d
        p1 = list(k1.params)
        p2 = list(k2.params)
        if ((len(p1) == 0) and ((len(p2) == 0))):
            return 0
        return self.compareArgs(p1,p2)

    def compareArgs(self,a1,a2):
        ld = (len(a1) - len(a2))
        if (ld != 0):
            return ld
        _g = 0
        _g1 = len(a1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            d = self.compareArg((a1[i] if i >= 0 and i < len(a1) else None),(a2[i] if i >= 0 and i < len(a2) else None))
            if (d != 0):
                return d
        return 0

    def compareArg(self,v1,v2):
        if (Reflect.isEnumValue(v1) and Reflect.isEnumValue(v2)):
            return self.compare(v1,v2)
        elif (Std.isOfType(v1,list) and Std.isOfType(v2,list)):
            return self.compareArgs(v1,v2)
        else:
            return Reflect.compare(v1,v2)



class haxe_exceptions_PosException(haxe_Exception):
    _hx_class_name = "haxe.exceptions.PosException"
    __slots__ = ("posInfos",)
    _hx_fields = ["posInfos"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,message,previous = None,pos = None):
        self.posInfos = None
        super().__init__(message,previous)
        if (pos is None):
            self.posInfos = _hx_AnonObject({'fileName': "(unknown)", 'lineNumber': 0, 'className': "(unknown)", 'methodName': "(unknown)"})
        else:
            self.posInfos = pos

    def toString(self):
        return ((((((((("" + HxOverrides.stringOrNull(super().toString())) + " in ") + HxOverrides.stringOrNull(self.posInfos.className)) + ".") + HxOverrides.stringOrNull(self.posInfos.methodName)) + " at ") + HxOverrides.stringOrNull(self.posInfos.fileName)) + ":") + Std.string(self.posInfos.lineNumber))



class haxe_exceptions_NotImplementedException(haxe_exceptions_PosException):
    _hx_class_name = "haxe.exceptions.NotImplementedException"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_exceptions_PosException


    def __init__(self,message = None,previous = None,pos = None):
        if (message is None):
            message = "Not implemented"
        super().__init__(message,previous,pos)


class haxe_iterators_ArrayIterator:
    _hx_class_name = "haxe.iterators.ArrayIterator"
    __slots__ = ("array", "current")
    _hx_fields = ["array", "current"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return python_internal_ArrayImpl._get(self.array, _hx_local_2())
        return _hx_local_3()



class haxe_iterators_ArrayKeyValueIterator:
    _hx_class_name = "haxe.iterators.ArrayKeyValueIterator"
    __slots__ = ("current", "array")
    _hx_fields = ["current", "array"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return _hx_AnonObject({'value': python_internal_ArrayImpl._get(self.array, self.current), 'key': _hx_local_2()})
        return _hx_local_3()



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except BaseException as _g:
                None
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except BaseException as _g:
            None
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except BaseException as _g:
                    None
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o1 = o
                l = len(o1.params)
                hasParams = (l > 0)
                if hasParams:
                    paramsStr = ""
                    _g = 0
                    _g1 = l
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        prefix = ""
                        if (i > 0):
                            prefix = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1(o1.params[i],s))))))
                    return (((HxOverrides.stringOrNull(o1.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o1.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields = python_Boot.getInstanceFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
                else:
                    fields = python_Boot.getClassFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
            if ((type(o) == type) and (o == str)):
                return "#String"
            if ((type(o) == type) and (o == list)):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except BaseException as _g:
                None
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d = o.__dict__
                keys1 = d.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        if isinstance(o,str):
            field1 = field
            _hx_local_0 = len(field1)
            if (_hx_local_0 == 10):
                if (field1 == "charCodeAt"):
                    return python_internal_MethodClosure(o,HxString.charCodeAt)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,HxString.lastIndexOf)
                elif (field1 == "toLowerCase"):
                    return python_internal_MethodClosure(o,HxString.toLowerCase)
                elif (field1 == "toUpperCase"):
                    return python_internal_MethodClosure(o,HxString.toUpperCase)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 9):
                if (field1 == "substring"):
                    return python_internal_MethodClosure(o,HxString.substring)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 5):
                if (field1 == "split"):
                    return python_internal_MethodClosure(o,HxString.split)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,HxString.indexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 8):
                if (field1 == "toString"):
                    return python_internal_MethodClosure(o,HxString.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 6):
                if (field1 == "charAt"):
                    return python_internal_MethodClosure(o,HxString.charAt)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "substr"):
                    return python_internal_MethodClosure(o,HxString.substr)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        elif isinstance(o,list):
            field1 = field
            _hx_local_1 = len(field1)
            if (_hx_local_1 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.lastIndexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 4):
                if (field1 == "copy"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.copy)
                elif (field1 == "join"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.join)
                elif (field1 == "push"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.push)
                elif (field1 == "sort"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.sort)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 5):
                if (field1 == "shift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.shift)
                elif (field1 == "slice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.slice)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.indexOf)
                elif (field1 == "reverse"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.reverse)
                elif (field1 == "unshift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.unshift)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 3):
                if (field1 == "map"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.map)
                elif (field1 == "pop"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.pop)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 8):
                if (field1 == "contains"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.contains)
                elif (field1 == "iterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.iterator)
                elif (field1 == "toString"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 16):
                if (field1 == "keyValueIterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.keyValueIterator)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 6):
                if (field1 == "concat"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.concat)
                elif (field1 == "filter"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.filter)
                elif (field1 == "insert"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.insert)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "remove"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.remove)
                elif (field1 == "splice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.splice)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        else:
            field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
            return (getattr(o,field1) if (hasattr(o,field1)) else None)

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except BaseException as _g:
            None
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except BaseException as _g:
                None
                if Std.isOfType(haxe_Exception.caught(_g).unwrap(),StopIteration):
                    self.has = False
                    self.x = None
                else:
                    raise _g
            self.checked = True
        return self.has



class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "copy", "iterator", "keyValueIterator", "indexOf", "lastIndexOf", "join", "toString", "pop", "push", "unshift", "remove", "contains", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get", "_set"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def copy(x):
        return list(x)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def keyValueIterator(x):
        return haxe_iterators_ArrayKeyValueIterator(x)

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if HxOverrides.eq(a[l],x):
                return l
        return -1

    @staticmethod
    def join(x,sep):
        return sep.join([python_Boot.toString1(x1,'') for x1 in x])

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except BaseException as _g:
            None
            return False

    @staticmethod
    def contains(x,e):
        return (e in x)

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "modf", "mod"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def modf(a,b):
        if (b == 0.0):
            return float('nan')
        elif (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b

    @staticmethod
    def mod(a,b):
        if (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "indexOfImpl", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        elif (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return HxString.indexOfImpl(s,_hx_str,startIndex)

    @staticmethod
    def indexOfImpl(s,_hx_str,startIndex):
        if (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

Mode.major_intervals = [2, 2, 1, 2, 2, 2, 1]
Mode.minor_intervals = [2, 1, 2, 2, 1, 2, 2]
_Mode_Mode_Fields_.MAJOR = Mode.getMajorMode()
_Mode_Mode_Fields_.MINOR = Mode.getMinorMode()
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")