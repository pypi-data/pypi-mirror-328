# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.offboarding_tracker_id_get200_response_data_contract_eor import OffboardingTrackerIdGet200ResponseDataContractEor
from typing import Optional, Set
from typing_extensions import Self

class OffboardingTrackerIdGet200ResponseDataContract(BaseModel):
    """
    OffboardingTrackerIdGet200ResponseDataContract
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the contract.")
    eor: Optional[OffboardingTrackerIdGet200ResponseDataContractEor] = None
    oid: Optional[StrictStr] = Field(default=None, description="The object ID for the contract, which might be the same as the contract ID.")
    name: Optional[StrictStr] = Field(default=None, description="The name or title of the contract.")
    timezone: Optional[StrictStr] = Field(default=None, description="The timezone associated with the contract (e.g., Europe/Belgrade).")
    contract_type: Optional[StrictStr] = Field(default=None, description="The type of the contract (e.g., payg_tasks).")
    __properties: ClassVar[List[str]] = ["id", "eor", "oid", "name", "timezone", "contract_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OffboardingTrackerIdGet200ResponseDataContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of eor
        if self.eor:
            _dict['eor'] = self.eor.to_dict()
        # set to None if eor (nullable) is None
        # and model_fields_set contains the field
        if self.eor is None and "eor" in self.model_fields_set:
            _dict['eor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OffboardingTrackerIdGet200ResponseDataContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "eor": OffboardingTrackerIdGet200ResponseDataContractEor.from_dict(obj["eor"]) if obj.get("eor") is not None else None,
            "oid": obj.get("oid"),
            "name": obj.get("name"),
            "timezone": obj.get("timezone"),
            "contract_type": obj.get("contract_type")
        })
        return _obj


