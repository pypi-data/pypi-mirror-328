# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_test_sdk.models.client_legal_entity import ClientLegalEntity
from dima_test_sdk.models.team_of_contract import TeamOfContract
from typing import Optional, Set
from typing_extensions import Self

class ClientOfContract(BaseModel):
    """
    ClientOfContract
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this resource.")
    full_name: Optional[StrictStr] = None
    email: Optional[Annotated[str, Field(min_length=5, strict=True)]] = Field(default=None, description="User's email address.")
    team: TeamOfContract
    legal_entity: Optional[ClientLegalEntity]
    __properties: ClassVar[List[str]] = ["id", "full_name", "email", "team", "legal_entity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientOfContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_entity
        if self.legal_entity:
            _dict['legal_entity'] = self.legal_entity.to_dict()
        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if legal_entity (nullable) is None
        # and model_fields_set contains the field
        if self.legal_entity is None and "legal_entity" in self.model_fields_set:
            _dict['legal_entity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientOfContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "full_name": obj.get("full_name"),
            "email": obj.get("email"),
            "team": TeamOfContract.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "legal_entity": ClientLegalEntity.from_dict(obj["legal_entity"]) if obj.get("legal_entity") is not None else None
        })
        return _obj


