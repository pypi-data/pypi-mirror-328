# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_test_sdk.models.eor_termination_request_request_used_time_off_time_offs_inner_tracking_periods_inner import EorTerminationRequestRequestUsedTimeOffTimeOffsInnerTrackingPeriodsInner
from typing import Optional, Set
from typing_extensions import Self

class EorTerminationRequestRequestUsedTimeOffTimeOffsInner(BaseModel):
    """
    EorTerminationRequestRequestUsedTimeOffTimeOffsInner
    """ # noqa: E501
    unit: StrictStr = Field(description="Time off unit")
    policy_type: Optional[StrictStr] = Field(default=None, description="Time off policy type")
    tracking_periods: Optional[List[EorTerminationRequestRequestUsedTimeOffTimeOffsInnerTrackingPeriodsInner]] = None
    scheduled_until_end_date: Optional[Union[Annotated[float, Field(le=365, strict=True, ge=0)], Annotated[int, Field(le=365, strict=True, ge=0)]]] = Field(default=None, description="Time off escheduled until contract end date")
    __properties: ClassVar[List[str]] = ["unit", "policy_type", "tracking_periods", "scheduled_until_end_date"]

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BUSINESS_DAY', 'CALENDAR_DAY', 'HOUR', 'WEEK', 'MONTH', 'YEAR']):
            raise ValueError("must be one of enum values ('BUSINESS_DAY', 'CALENDAR_DAY', 'HOUR', 'WEEK', 'MONTH', 'YEAR')")
        return value

    @field_validator('policy_type')
    def policy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Vacation', 'Sick leave', 'Maternity leave', 'Paternity leave', 'Parental leave', 'Bereavement leave', 'Childcare leave', 'Civic/public duty leave', 'Personal leave', 'Adoption leave', 'Blood donation leave', 'Childbirth leave', 'Disability leave', 'Doctor\'s appointment leave', 'Family & domestic violence leave', 'Hajj leave', 'Marriage/wedding leave', 'Military leave', 'Moving leave', 'Pregnancy leave', 'Study leave', 'Volunteer leave', 'Unpaid leave', 'Paid leave', 'Other leave', 'RTT', 'Regional holiday', 'Breastfeeding leave', 'Advanced vacation', 'Supplementary Leave', 'Floating Holiday Allowance']):
            raise ValueError("must be one of enum values ('Vacation', 'Sick leave', 'Maternity leave', 'Paternity leave', 'Parental leave', 'Bereavement leave', 'Childcare leave', 'Civic/public duty leave', 'Personal leave', 'Adoption leave', 'Blood donation leave', 'Childbirth leave', 'Disability leave', 'Doctor\'s appointment leave', 'Family & domestic violence leave', 'Hajj leave', 'Marriage/wedding leave', 'Military leave', 'Moving leave', 'Pregnancy leave', 'Study leave', 'Volunteer leave', 'Unpaid leave', 'Paid leave', 'Other leave', 'RTT', 'Regional holiday', 'Breastfeeding leave', 'Advanced vacation', 'Supplementary Leave', 'Floating Holiday Allowance')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorTerminationRequestRequestUsedTimeOffTimeOffsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tracking_periods (list)
        _items = []
        if self.tracking_periods:
            for _item_tracking_periods in self.tracking_periods:
                if _item_tracking_periods:
                    _items.append(_item_tracking_periods.to_dict())
            _dict['tracking_periods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorTerminationRequestRequestUsedTimeOffTimeOffsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unit": obj.get("unit"),
            "policy_type": obj.get("policy_type"),
            "tracking_periods": [EorTerminationRequestRequestUsedTimeOffTimeOffsInnerTrackingPeriodsInner.from_dict(_item) for _item in obj["tracking_periods"]] if obj.get("tracking_periods") is not None else None,
            "scheduled_until_end_date": obj.get("scheduled_until_end_date")
        })
        return _obj


