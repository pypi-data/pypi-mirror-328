# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.calculate_eor_employment_cost200_response_additional_data import CalculateEorEmploymentCost200ResponseAdditionalData
from dima_test_sdk.models.calculate_eor_employment_cost200_response_benefits_data_inner import CalculateEorEmploymentCost200ResponseBenefitsDataInner
from dima_test_sdk.models.calculate_eor_employment_cost200_response_costs_inner import CalculateEorEmploymentCost200ResponseCostsInner
from typing import Optional, Set
from typing_extensions import Self

class CalculateEorEmploymentCost200Response(BaseModel):
    """
    CalculateEorEmploymentCost200Response
    """ # noqa: E501
    costs: Optional[List[CalculateEorEmploymentCost200ResponseCostsInner]] = None
    salary: Optional[StrictStr] = Field(default=None, description="The base salary for the employee.")
    country: Optional[StrictStr] = Field(default=None, description="The country where the employee is based.")
    currency: Optional[StrictStr] = Field(default=None, description="The currency used for cost calculation.")
    deel_fee: Optional[StrictStr] = Field(default=None, description="The Deel fee for managing the employee.")
    frequency: Optional[StrictStr] = Field(default=None, description="Frequency of the salary payment (e.g., monthly).")
    total_costs: Optional[StrictStr] = Field(default=None, description="Total employment costs.")
    country_code: Optional[StrictStr] = Field(default=None, description="ISO Alpha-2 code of the country.")
    benefits_data: Optional[List[CalculateEorEmploymentCost200ResponseBenefitsDataInner]] = None
    employer_costs: Optional[StrictStr] = Field(default=None, description="Costs incurred by the employer.")
    additional_data: Optional[CalculateEorEmploymentCost200ResponseAdditionalData] = None
    severance_accural: Optional[StrictStr] = Field(default=None, description="Severance accrual costs.")
    __properties: ClassVar[List[str]] = ["costs", "salary", "country", "currency", "deel_fee", "frequency", "total_costs", "country_code", "benefits_data", "employer_costs", "additional_data", "severance_accural"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalculateEorEmploymentCost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in costs (list)
        _items = []
        if self.costs:
            for _item_costs in self.costs:
                if _item_costs:
                    _items.append(_item_costs.to_dict())
            _dict['costs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in benefits_data (list)
        _items = []
        if self.benefits_data:
            for _item_benefits_data in self.benefits_data:
                if _item_benefits_data:
                    _items.append(_item_benefits_data.to_dict())
            _dict['benefits_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of additional_data
        if self.additional_data:
            _dict['additional_data'] = self.additional_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalculateEorEmploymentCost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "costs": [CalculateEorEmploymentCost200ResponseCostsInner.from_dict(_item) for _item in obj["costs"]] if obj.get("costs") is not None else None,
            "salary": obj.get("salary"),
            "country": obj.get("country"),
            "currency": obj.get("currency"),
            "deel_fee": obj.get("deel_fee"),
            "frequency": obj.get("frequency"),
            "total_costs": obj.get("total_costs"),
            "country_code": obj.get("country_code"),
            "benefits_data": [CalculateEorEmploymentCost200ResponseBenefitsDataInner.from_dict(_item) for _item in obj["benefits_data"]] if obj.get("benefits_data") is not None else None,
            "employer_costs": obj.get("employer_costs"),
            "additional_data": CalculateEorEmploymentCost200ResponseAdditionalData.from_dict(obj["additional_data"]) if obj.get("additional_data") is not None else None,
            "severance_accural": obj.get("severance_accural")
        })
        return _obj


