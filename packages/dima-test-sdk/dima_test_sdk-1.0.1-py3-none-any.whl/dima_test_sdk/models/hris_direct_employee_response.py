# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.hris_compensation import HrisCompensation
from dima_test_sdk.models.hris_direct_employee_contract import HrisDirectEmployeeContract
from dima_test_sdk.models.hris_direct_employee_details import HrisDirectEmployeeDetails
from dima_test_sdk.models.hris_direct_employee_job_information import HrisDirectEmployeeJobInformation
from dima_test_sdk.models.hris_direct_employee_vacation_info import HrisDirectEmployeeVacationInfo
from dima_test_sdk.models.hris_team_information import HrisTeamInformation
from typing import Optional, Set
from typing_extensions import Self

class HrisDirectEmployeeResponse(BaseModel):
    """
    HrisDirectEmployeeResponse
    """ # noqa: E501
    employee_details: HrisDirectEmployeeDetails
    team_information: HrisTeamInformation
    job_information: HrisDirectEmployeeJobInformation
    compensation: HrisCompensation
    contract: HrisDirectEmployeeContract
    vacation_info: Optional[HrisDirectEmployeeVacationInfo] = None
    id: Optional[StrictStr] = Field(default=None, description="The Hris Direct employee ID")
    __properties: ClassVar[List[str]] = ["employee_details", "team_information", "job_information", "compensation", "contract", "vacation_info", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HrisDirectEmployeeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employee_details
        if self.employee_details:
            _dict['employee_details'] = self.employee_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_information
        if self.team_information:
            _dict['team_information'] = self.team_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_information
        if self.job_information:
            _dict['job_information'] = self.job_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensation
        if self.compensation:
            _dict['compensation'] = self.compensation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vacation_info
        if self.vacation_info:
            _dict['vacation_info'] = self.vacation_info.to_dict()
        # set to None if vacation_info (nullable) is None
        # and model_fields_set contains the field
        if self.vacation_info is None and "vacation_info" in self.model_fields_set:
            _dict['vacation_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HrisDirectEmployeeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "employee_details": HrisDirectEmployeeDetails.from_dict(obj["employee_details"]) if obj.get("employee_details") is not None else None,
            "team_information": HrisTeamInformation.from_dict(obj["team_information"]) if obj.get("team_information") is not None else None,
            "job_information": HrisDirectEmployeeJobInformation.from_dict(obj["job_information"]) if obj.get("job_information") is not None else None,
            "compensation": HrisCompensation.from_dict(obj["compensation"]) if obj.get("compensation") is not None else None,
            "contract": HrisDirectEmployeeContract.from_dict(obj["contract"]) if obj.get("contract") is not None else None,
            "vacation_info": HrisDirectEmployeeVacationInfo.from_dict(obj["vacation_info"]) if obj.get("vacation_info") is not None else None,
            "id": obj.get("id")
        })
        return _obj


