# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_test_sdk.models.eor_termination_request200_response_request_data_termination_impact import EorTerminationRequest200ResponseRequestDataTerminationImpact
from typing import Optional, Set
from typing_extensions import Self

class EorTerminationRequest200ResponseRequestData(BaseModel):
    """
    EorTerminationRequest200ResponseRequestData
    """ # noqa: E501
    reason: Optional[StrictStr] = None
    end_date: Optional[datetime] = Field(default=None, description="The definitive contract end date")
    reason_detail: Optional[StrictStr] = Field(default=None, description="Optional field to describe the reason behind the resignation request")
    desired_end_date: Optional[datetime] = Field(default=None, description="The desired end date. If the date is not provided, it will be selected by HRX the closest date possible")
    termination_impact: Optional[EorTerminationRequest200ResponseRequestDataTerminationImpact] = None
    eligible_for_rehire: Optional[StrictStr] = Field(default=None, description="Parameter to inform whether it would be possible for the client to hire the employee again")
    eligible_for_rehire_reason: Optional[StrictStr] = Field(default=None, description="Describe if the option DONT_KNOW was selected on eligibleForRehire")
    custom_termination_reason_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Custom termination reason ID. A custom termination reason can be added on Client HR module")
    __properties: ClassVar[List[str]] = ["reason", "end_date", "reason_detail", "desired_end_date", "termination_impact", "eligible_for_rehire", "eligible_for_rehire_reason", "custom_termination_reason_id"]

    @field_validator('eligible_for_rehire')
    def eligible_for_rehire_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['YES', 'NO', 'DONT_KNOW']):
            raise ValueError("must be one of enum values ('YES', 'NO', 'DONT_KNOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorTerminationRequest200ResponseRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of termination_impact
        if self.termination_impact:
            _dict['termination_impact'] = self.termination_impact.to_dict()
        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        # set to None if reason_detail (nullable) is None
        # and model_fields_set contains the field
        if self.reason_detail is None and "reason_detail" in self.model_fields_set:
            _dict['reason_detail'] = None

        # set to None if desired_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.desired_end_date is None and "desired_end_date" in self.model_fields_set:
            _dict['desired_end_date'] = None

        # set to None if termination_impact (nullable) is None
        # and model_fields_set contains the field
        if self.termination_impact is None and "termination_impact" in self.model_fields_set:
            _dict['termination_impact'] = None

        # set to None if eligible_for_rehire (nullable) is None
        # and model_fields_set contains the field
        if self.eligible_for_rehire is None and "eligible_for_rehire" in self.model_fields_set:
            _dict['eligible_for_rehire'] = None

        # set to None if eligible_for_rehire_reason (nullable) is None
        # and model_fields_set contains the field
        if self.eligible_for_rehire_reason is None and "eligible_for_rehire_reason" in self.model_fields_set:
            _dict['eligible_for_rehire_reason'] = None

        # set to None if custom_termination_reason_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_termination_reason_id is None and "custom_termination_reason_id" in self.model_fields_set:
            _dict['custom_termination_reason_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorTerminationRequest200ResponseRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reason": obj.get("reason"),
            "end_date": obj.get("end_date"),
            "reason_detail": obj.get("reason_detail"),
            "desired_end_date": obj.get("desired_end_date"),
            "termination_impact": EorTerminationRequest200ResponseRequestDataTerminationImpact.from_dict(obj["termination_impact"]) if obj.get("termination_impact") is not None else None,
            "eligible_for_rehire": obj.get("eligible_for_rehire"),
            "eligible_for_rehire_reason": obj.get("eligible_for_rehire_reason"),
            "custom_termination_reason_id": obj.get("custom_termination_reason_id")
        })
        return _obj


