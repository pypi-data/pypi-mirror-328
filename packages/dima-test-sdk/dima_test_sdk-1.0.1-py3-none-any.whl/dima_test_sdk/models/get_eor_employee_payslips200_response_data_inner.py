# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class GetEorEmployeePayslips200ResponseDataInner(BaseModel):
    """
    GetEorEmployeePayslips200ResponseDataInner
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the payslip record.")
    to: datetime = Field(description="End date of the payment period.")
    url: StrictStr = Field(description="URL")
    var_from: datetime = Field(description="Start date of the payment period.", alias="from")
    status: StrictStr = Field(description="Status of the payslip (e.g., 'Pending', 'Processed').")
    created_at: datetime = Field(description="Creation date")
    updated_at: datetime = Field(description="Last update date")
    rejected_at: datetime = Field(description="Rejection date")
    uploaded_at: datetime = Field(description="Upload date")
    published_at: datetime = Field(description="Publish date")
    reject_reason: StrictStr = Field(description="Rejection reason")
    schedule_publishing_date: datetime = Field(description="Scheduled for publishing date")
    __properties: ClassVar[List[str]] = ["id", "to", "url", "from", "status", "created_at", "updated_at", "rejected_at", "uploaded_at", "published_at", "reject_reason", "schedule_publishing_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetEorEmployeePayslips200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetEorEmployeePayslips200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "to": obj.get("to"),
            "url": obj.get("url"),
            "from": obj.get("from"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "rejected_at": obj.get("rejected_at"),
            "uploaded_at": obj.get("uploaded_at"),
            "published_at": obj.get("published_at"),
            "reject_reason": obj.get("reject_reason"),
            "schedule_publishing_date": obj.get("schedule_publishing_date")
        })
        return _obj


