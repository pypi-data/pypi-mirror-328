# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_test_sdk.models.get401k_enrollments_definition200_response_inner_details import Get401kEnrollmentsDefinition200ResponseInnerDetails
from typing import Optional, Set
from typing_extensions import Self

class Put401kEnrollmentsDefinitionRequest(BaseModel):
    """
    Schema for the 401K Guideline Plan request body.
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="Type of the contribution for 401k.")
    details: Optional[Get401kEnrollmentsDefinition200ResponseInnerDetails] = None
    contribution_type: Optional[StrictStr] = Field(default=None, description="Type of contribution.")
    contribution_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum limit of contribution.")
    contribution_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value of the contribution.")
    __properties: ClassVar[List[str]] = ["type", "details", "contribution_type", "contribution_limit", "contribution_value"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROTH', 'TRAD', 'LOAN', 'NEC']):
            raise ValueError("must be one of enum values ('ROTH', 'TRAD', 'LOAN', 'NEC')")
        return value

    @field_validator('contribution_type')
    def contribution_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERCENTAGE', 'FIXED_AMOUNT']):
            raise ValueError("must be one of enum values ('PERCENTAGE', 'FIXED_AMOUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Put401kEnrollmentsDefinitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Put401kEnrollmentsDefinitionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "details": Get401kEnrollmentsDefinition200ResponseInnerDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "contribution_type": obj.get("contribution_type"),
            "contribution_limit": obj.get("contribution_limit"),
            "contribution_value": obj.get("contribution_value")
        })
        return _obj


