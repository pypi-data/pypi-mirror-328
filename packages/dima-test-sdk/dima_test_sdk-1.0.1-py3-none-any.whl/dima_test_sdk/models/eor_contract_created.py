# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.contract_status_enum import ContractStatusEnum
from dima_test_sdk.models.contract_type_enum import ContractTypeEnum
from dima_test_sdk.models.create_gp_contract201_response_data_client import CreateGPContract201ResponseDataClient
from dima_test_sdk.models.eor_contract_created_compensation_details import EorContractCreatedCompensationDetails
from dima_test_sdk.models.eor_contract_created_employee import EorContractCreatedEmployee
from dima_test_sdk.models.eor_contract_created_employment import EorContractCreatedEmployment
from dima_test_sdk.models.eor_contract_created_health_plan import EorContractCreatedHealthPlan
from dima_test_sdk.models.seniority import Seniority
from typing import Optional, Set
from typing_extensions import Self

class EorContractCreated(BaseModel):
    """
    EorContractCreated
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the contract quote created")
    type: Optional[ContractTypeEnum] = None
    created_at: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    status: Optional[ContractStatusEnum] = None
    job_title: Optional[StrictStr] = Field(default=None, description="Employee's job title.")
    employment: Optional[EorContractCreatedEmployment] = None
    client: Optional[CreateGPContract201ResponseDataClient] = None
    compensation_details: Optional[EorContractCreatedCompensationDetails] = None
    employee: Optional[EorContractCreatedEmployee] = None
    health_plan: Optional[EorContractCreatedHealthPlan] = None
    seniority: Optional[Seniority] = None
    __properties: ClassVar[List[str]] = ["id", "type", "created_at", "status", "job_title", "employment", "client", "compensation_details", "employee", "health_plan", "seniority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorContractCreated from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of employment
        if self.employment:
            _dict['employment'] = self.employment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensation_details
        if self.compensation_details:
            _dict['compensation_details'] = self.compensation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_plan
        if self.health_plan:
            _dict['health_plan'] = self.health_plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seniority
        if self.seniority:
            _dict['seniority'] = self.seniority.to_dict()
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if health_plan (nullable) is None
        # and model_fields_set contains the field
        if self.health_plan is None and "health_plan" in self.model_fields_set:
            _dict['health_plan'] = None

        # set to None if seniority (nullable) is None
        # and model_fields_set contains the field
        if self.seniority is None and "seniority" in self.model_fields_set:
            _dict['seniority'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorContractCreated from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "created_at": obj.get("created_at"),
            "status": obj.get("status"),
            "job_title": obj.get("job_title"),
            "employment": EorContractCreatedEmployment.from_dict(obj["employment"]) if obj.get("employment") is not None else None,
            "client": CreateGPContract201ResponseDataClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "compensation_details": EorContractCreatedCompensationDetails.from_dict(obj["compensation_details"]) if obj.get("compensation_details") is not None else None,
            "employee": EorContractCreatedEmployee.from_dict(obj["employee"]) if obj.get("employee") is not None else None,
            "health_plan": EorContractCreatedHealthPlan.from_dict(obj["health_plan"]) if obj.get("health_plan") is not None else None,
            "seniority": Seniority.from_dict(obj["seniority"]) if obj.get("seniority") is not None else None
        })
        return _obj


