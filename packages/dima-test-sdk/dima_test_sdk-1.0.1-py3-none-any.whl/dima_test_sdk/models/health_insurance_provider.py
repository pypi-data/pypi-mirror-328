# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.health_insurance_provider_attachments_inner import HealthInsuranceProviderAttachmentsInner
from dima_test_sdk.models.health_insurance_provider_plans_inner import HealthInsuranceProviderPlansInner
from typing import Optional, Set
from typing_extensions import Self

class HealthInsuranceProvider(BaseModel):
    """
    Health insurance provider.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="Name of insurance provider.")
    is_unisure: Optional[StrictBool] = None
    home_page_url: Optional[StrictStr] = Field(default=None, description="Insurance provider's home page url.")
    currency: Optional[StrictStr] = Field(default=None, description="Payment currency.")
    type: Optional[StrictStr] = Field(default=None, description="Insurance type.")
    ending_rule: Optional[StrictStr] = Field(default=None, description="Insurance cycle ending rule.")
    days_to_cancel: Optional[StrictStr] = Field(default=None, description="Days to cancel the insurance.")
    pricing_info_link: Optional[StrictStr] = Field(default=None, description="URL to price info.")
    fixed_price: Optional[StrictBool] = Field(default=None, description="URL to price info.")
    attachments: Optional[List[HealthInsuranceProviderAttachmentsInner]] = Field(default=None, description="File attachments.")
    client_info_banner: Optional[StrictStr] = Field(default=None, description="Health insurance info banner.")
    is_available_for_new_quotes: Optional[StrictBool] = None
    plans: Optional[List[HealthInsuranceProviderPlansInner]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "is_unisure", "home_page_url", "currency", "type", "ending_rule", "days_to_cancel", "pricing_info_link", "fixed_price", "attachments", "client_info_banner", "is_available_for_new_quotes", "plans"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthInsuranceProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plans (list)
        _items = []
        if self.plans:
            for _item_plans in self.plans:
                if _item_plans:
                    _items.append(_item_plans.to_dict())
            _dict['plans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthInsuranceProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "is_unisure": obj.get("is_unisure"),
            "home_page_url": obj.get("home_page_url"),
            "currency": obj.get("currency"),
            "type": obj.get("type"),
            "ending_rule": obj.get("ending_rule"),
            "days_to_cancel": obj.get("days_to_cancel"),
            "pricing_info_link": obj.get("pricing_info_link"),
            "fixed_price": obj.get("fixed_price"),
            "attachments": [HealthInsuranceProviderAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "client_info_banner": obj.get("client_info_banner"),
            "is_available_for_new_quotes": obj.get("is_available_for_new_quotes"),
            "plans": [HealthInsuranceProviderPlansInner.from_dict(_item) for _item in obj["plans"]] if obj.get("plans") is not None else None
        })
        return _obj


