# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_test_sdk.models.compensation_details_of_contract_to_create_shared import CompensationDetailsOfContractToCreateShared
from dima_test_sdk.models.contract_to_create_shared_client import ContractToCreateSharedClient
from dima_test_sdk.models.contract_to_create_shared_job_title import ContractToCreateSharedJobTitle
from dima_test_sdk.models.contract_to_create_shared_seniority import ContractToCreateSharedSeniority
from dima_test_sdk.models.contract_to_create_shared_worker import ContractToCreateSharedWorker
from dima_test_sdk.models.contract_who_reports_enum import ContractWhoReportsEnum
from dima_test_sdk.models.meta_data_of_contract_to_create import MetaDataOfContractToCreate
from typing import Optional, Set
from typing_extensions import Self

class ContractToCreatePaygMilestones(BaseModel):
    """
    ContractToCreatePaygMilestones
    """ # noqa: E501
    title: StrictStr = Field(description="The title of the contract.")
    country_code: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = Field(default=None, description="Country code.")
    state_code: Optional[StrictStr] = Field(default=None, description="The state or province code. Use country lookup endpoint to retrieve state codes.")
    scope_of_work: Optional[StrictStr] = Field(default=None, description="Describe the work to be performed.")
    special_clause: Optional[StrictStr] = Field(default=None, description="Enter any special clause you may have.")
    termination_date: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example 2022-12-31.")
    client: ContractToCreateSharedClient
    job_title: ContractToCreateSharedJobTitle
    seniority: Optional[ContractToCreateSharedSeniority] = None
    notice_period: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=0, description="Days before to notice the termination of contract for eather party.")
    who_reports: Optional[ContractWhoReportsEnum] = None
    meta: MetaDataOfContractToCreate
    external_id: Optional[StrictStr] = Field(default=None, description="External Id.")
    worker: Optional[ContractToCreateSharedWorker] = None
    type: StrictStr
    start_date: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example 2022-12-31.")
    compensation_details: CompensationDetailsOfContractToCreateShared
    __properties: ClassVar[List[str]] = ["title", "country_code", "state_code", "scope_of_work", "special_clause", "termination_date", "client", "job_title", "seniority", "notice_period", "who_reports", "meta", "external_id", "worker", "type", "start_date", "compensation_details"]

    @field_validator('country_code')
    def country_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['payg_milestones']):
            raise ValueError("must be one of enum values ('payg_milestones')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractToCreatePaygMilestones from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_title
        if self.job_title:
            _dict['job_title'] = self.job_title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seniority
        if self.seniority:
            _dict['seniority'] = self.seniority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict['worker'] = self.worker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensation_details
        if self.compensation_details:
            _dict['compensation_details'] = self.compensation_details.to_dict()
        # set to None if state_code (nullable) is None
        # and model_fields_set contains the field
        if self.state_code is None and "state_code" in self.model_fields_set:
            _dict['state_code'] = None

        # set to None if scope_of_work (nullable) is None
        # and model_fields_set contains the field
        if self.scope_of_work is None and "scope_of_work" in self.model_fields_set:
            _dict['scope_of_work'] = None

        # set to None if special_clause (nullable) is None
        # and model_fields_set contains the field
        if self.special_clause is None and "special_clause" in self.model_fields_set:
            _dict['special_clause'] = None

        # set to None if termination_date (nullable) is None
        # and model_fields_set contains the field
        if self.termination_date is None and "termination_date" in self.model_fields_set:
            _dict['termination_date'] = None

        # set to None if seniority (nullable) is None
        # and model_fields_set contains the field
        if self.seniority is None and "seniority" in self.model_fields_set:
            _dict['seniority'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if worker (nullable) is None
        # and model_fields_set contains the field
        if self.worker is None and "worker" in self.model_fields_set:
            _dict['worker'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractToCreatePaygMilestones from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "country_code": obj.get("country_code"),
            "state_code": obj.get("state_code"),
            "scope_of_work": obj.get("scope_of_work"),
            "special_clause": obj.get("special_clause"),
            "termination_date": obj.get("termination_date"),
            "client": ContractToCreateSharedClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "job_title": ContractToCreateSharedJobTitle.from_dict(obj["job_title"]) if obj.get("job_title") is not None else None,
            "seniority": ContractToCreateSharedSeniority.from_dict(obj["seniority"]) if obj.get("seniority") is not None else None,
            "notice_period": obj.get("notice_period") if obj.get("notice_period") is not None else 0,
            "who_reports": obj.get("who_reports"),
            "meta": MetaDataOfContractToCreate.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "external_id": obj.get("external_id"),
            "worker": ContractToCreateSharedWorker.from_dict(obj["worker"]) if obj.get("worker") is not None else None,
            "type": obj.get("type"),
            "start_date": obj.get("start_date"),
            "compensation_details": CompensationDetailsOfContractToCreateShared.from_dict(obj["compensation_details"]) if obj.get("compensation_details") is not None else None
        })
        return _obj


