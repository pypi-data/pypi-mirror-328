# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UpdateEorContractRequestDataBenefitsInner(BaseModel):
    """
    Benefit plan details
    """ # noqa: E501
    plan_id: Optional[StrictStr] = Field(default=None, description="Benefit plan ID")
    cover_all: Optional[StrictBool] = Field(default=None, description="Indicates if benefit covers all")
    provider_id: Optional[StrictStr] = Field(default=None, description="Benefit provider ID")
    contribution: Optional[Union[Annotated[float, Field(le=9999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="Contribution amount")
    cover_dependents: Optional[StrictBool] = Field(default=None, description="Indicates if benefit covers dependents")
    __properties: ClassVar[List[str]] = ["plan_id", "cover_all", "provider_id", "contribution", "cover_dependents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateEorContractRequestDataBenefitsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if plan_id (nullable) is None
        # and model_fields_set contains the field
        if self.plan_id is None and "plan_id" in self.model_fields_set:
            _dict['plan_id'] = None

        # set to None if provider_id (nullable) is None
        # and model_fields_set contains the field
        if self.provider_id is None and "provider_id" in self.model_fields_set:
            _dict['provider_id'] = None

        # set to None if contribution (nullable) is None
        # and model_fields_set contains the field
        if self.contribution is None and "contribution" in self.model_fields_set:
            _dict['contribution'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateEorContractRequestDataBenefitsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plan_id": obj.get("plan_id"),
            "cover_all": obj.get("cover_all"),
            "provider_id": obj.get("provider_id"),
            "contribution": obj.get("contribution"),
            "cover_dependents": obj.get("cover_dependents")
        })
        return _obj


