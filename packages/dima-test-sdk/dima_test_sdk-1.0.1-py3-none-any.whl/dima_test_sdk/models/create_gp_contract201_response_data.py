# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.create_gp_contract201_response_data_client import CreateGPContract201ResponseDataClient
from dima_test_sdk.models.create_gp_contract201_response_data_compensation_details import CreateGPContract201ResponseDataCompensationDetails
from dima_test_sdk.models.create_gp_contract201_response_data_employee import CreateGPContract201ResponseDataEmployee
from dima_test_sdk.models.create_gp_contract201_response_data_employment import CreateGPContract201ResponseDataEmployment
from typing import Optional, Set
from typing_extensions import Self

class CreateGPContract201ResponseData(BaseModel):
    """
    CreateGPContract201ResponseData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the contract created.")
    type: Optional[StrictStr] = Field(default=None, description="Type of a contract")
    client: Optional[CreateGPContract201ResponseDataClient] = None
    status: Optional[StrictStr] = Field(default=None, description="Status of a contract in Deel workflow")
    employee: Optional[CreateGPContract201ResponseDataEmployee] = None
    job_title: Optional[StrictStr] = Field(default=None, description="Employee's job title.")
    created_at: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    employment: Optional[CreateGPContract201ResponseDataEmployment] = None
    compensation_details: Optional[CreateGPContract201ResponseDataCompensationDetails] = None
    __properties: ClassVar[List[str]] = ["id", "type", "client", "status", "employee", "job_title", "created_at", "employment", "compensation_details"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ongoing_time_based', 'milestones', 'time_based', 'pay_as_you_go_time_based', 'commission', 'payg_milestones', 'payg_tasks', 'eor', 'unknown', 'employee', 'global_payroll', 'shield_msa', 'hris_direct_employee', 'peo']):
            raise ValueError("must be one of enum values ('ongoing_time_based', 'milestones', 'time_based', 'pay_as_you_go_time_based', 'commission', 'payg_milestones', 'payg_tasks', 'eor', 'unknown', 'employee', 'global_payroll', 'shield_msa', 'hris_direct_employee', 'peo')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['new', 'under_review', 'waiting_for_employee_contract', 'waiting_for_client_sign', 'processing_payment', 'waiting_for_contractor_sign', 'waiting_for_eor_sign', 'waiting_for_employee_sign', 'awaiting_deposit_payment', 'in_progress', 'completed', 'cancelled', 'user_cancelled', 'rejected', 'waiting_for_client_payment', 'onboarding']):
            raise ValueError("must be one of enum values ('new', 'under_review', 'waiting_for_employee_contract', 'waiting_for_client_sign', 'processing_payment', 'waiting_for_contractor_sign', 'waiting_for_eor_sign', 'waiting_for_employee_sign', 'awaiting_deposit_payment', 'in_progress', 'completed', 'cancelled', 'user_cancelled', 'rejected', 'waiting_for_client_payment', 'onboarding')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateGPContract201ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employee
        if self.employee:
            _dict['employee'] = self.employee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employment
        if self.employment:
            _dict['employment'] = self.employment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compensation_details
        if self.compensation_details:
            _dict['compensation_details'] = self.compensation_details.to_dict()
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateGPContract201ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "client": CreateGPContract201ResponseDataClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "status": obj.get("status"),
            "employee": CreateGPContract201ResponseDataEmployee.from_dict(obj["employee"]) if obj.get("employee") is not None else None,
            "job_title": obj.get("job_title"),
            "created_at": obj.get("created_at"),
            "employment": CreateGPContract201ResponseDataEmployment.from_dict(obj["employment"]) if obj.get("employment") is not None else None,
            "compensation_details": CreateGPContract201ResponseDataCompensationDetails.from_dict(obj["compensation_details"]) if obj.get("compensation_details") is not None else None
        })
        return _obj


