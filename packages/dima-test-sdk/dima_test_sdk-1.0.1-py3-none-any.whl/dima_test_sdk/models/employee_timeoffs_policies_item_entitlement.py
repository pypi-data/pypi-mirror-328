# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EmployeeTimeoffsPoliciesItemEntitlement(BaseModel):
    """
    EmployeeTimeoffsPoliciesItemEntitlement
    """ # noqa: E501
    accrual_amount: Optional[StrictStr] = Field(default=None, description="Accrual amount of the time off policy.")
    accrual_unit: Optional[StrictStr] = Field(default=None, description="Accrual unit of the time off policy.")
    total: Optional[StrictStr] = Field(default=None, description="Total time off policy.")
    unit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unit amount of the time off policy.")
    unit: Optional[StrictStr] = Field(default=None, description="Unit of the time off policy.")
    accrued: Optional[StrictStr] = Field(default=None, description="Accrued time off policy.")
    __properties: ClassVar[List[str]] = ["accrual_amount", "accrual_unit", "total", "unit_amount", "unit", "accrued"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmployeeTimeoffsPoliciesItemEntitlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if accrual_amount (nullable) is None
        # and model_fields_set contains the field
        if self.accrual_amount is None and "accrual_amount" in self.model_fields_set:
            _dict['accrual_amount'] = None

        # set to None if accrual_unit (nullable) is None
        # and model_fields_set contains the field
        if self.accrual_unit is None and "accrual_unit" in self.model_fields_set:
            _dict['accrual_unit'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if unit_amount (nullable) is None
        # and model_fields_set contains the field
        if self.unit_amount is None and "unit_amount" in self.model_fields_set:
            _dict['unit_amount'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if accrued (nullable) is None
        # and model_fields_set contains the field
        if self.accrued is None and "accrued" in self.model_fields_set:
            _dict['accrued'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmployeeTimeoffsPoliciesItemEntitlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accrual_amount": obj.get("accrual_amount"),
            "accrual_unit": obj.get("accrual_unit"),
            "total": obj.get("total"),
            "unit_amount": obj.get("unit_amount"),
            "unit": obj.get("unit"),
            "accrued": obj.get("accrued")
        })
        return _obj


