# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_test_sdk.models.contract_search_form_without_cursor_countries import ContractSearchFormWithoutCursorCountries
from dima_test_sdk.models.contract_search_form_without_cursor_currencies import ContractSearchFormWithoutCursorCurrencies
from dima_test_sdk.models.contract_search_form_without_cursor_statuses import ContractSearchFormWithoutCursorStatuses
from dima_test_sdk.models.contract_search_form_without_cursor_types import ContractSearchFormWithoutCursorTypes
from dima_test_sdk.models.contracts_sort_by_enum import ContractsSortByEnum
from dima_test_sdk.models.identifier_value_for_filter import IdentifierValueForFilter
from dima_test_sdk.models.sort_dir_enum import SortDirEnum
from typing import Optional, Set
from typing_extensions import Self

class ContractSearchFormWithoutCursor(BaseModel):
    """
    This is a model to make it easier to understand and restrict search parameters
    """ # noqa: E501
    limit: Optional[Annotated[str, Field(strict=True)]] = Field(default='10', description="Return a page of results with given number of records.")
    order_direction: Optional[SortDirEnum] = None
    types: Optional[ContractSearchFormWithoutCursorTypes] = None
    statuses: Optional[ContractSearchFormWithoutCursorStatuses] = None
    team_id: Optional[IdentifierValueForFilter] = None
    external_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Filter contracts for given external ID")
    countries: Optional[ContractSearchFormWithoutCursorCountries] = None
    currencies: Optional[ContractSearchFormWithoutCursorCurrencies] = None
    search: Optional[StrictStr] = Field(default=None, description="Include a contract if by name or contractor name contains given search term.")
    sort_by: Optional[ContractsSortByEnum] = None
    __properties: ClassVar[List[str]] = ["limit", "order_direction", "types", "statuses", "team_id", "external_id", "countries", "currencies", "search", "sort_by"]

    @field_validator('limit')
    def limit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{1,5}$", value):
            raise ValueError(r"must validate the regular expression /^\d{1,5}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractSearchFormWithoutCursor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of types
        if self.types:
            _dict['types'] = self.types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statuses
        if self.statuses:
            _dict['statuses'] = self.statuses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_id
        if self.team_id:
            _dict['team_id'] = self.team_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of countries
        if self.countries:
            _dict['countries'] = self.countries.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currencies
        if self.currencies:
            _dict['currencies'] = self.currencies.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractSearchFormWithoutCursor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "limit": obj.get("limit") if obj.get("limit") is not None else '10',
            "order_direction": obj.get("order_direction"),
            "types": ContractSearchFormWithoutCursorTypes.from_dict(obj["types"]) if obj.get("types") is not None else None,
            "statuses": ContractSearchFormWithoutCursorStatuses.from_dict(obj["statuses"]) if obj.get("statuses") is not None else None,
            "team_id": IdentifierValueForFilter.from_dict(obj["team_id"]) if obj.get("team_id") is not None else None,
            "external_id": obj.get("external_id"),
            "countries": ContractSearchFormWithoutCursorCountries.from_dict(obj["countries"]) if obj.get("countries") is not None else None,
            "currencies": ContractSearchFormWithoutCursorCurrencies.from_dict(obj["currencies"]) if obj.get("currencies") is not None else None,
            "search": obj.get("search"),
            "sort_by": obj.get("sort_by")
        })
        return _obj


