# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictStr, field_validator
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from dima_test_sdk.models.create_manual_verification_screening201_response import CreateManualVerificationScreening201Response
from dima_test_sdk.models.create_veriff_session201_response import CreateVeriffSession201Response
from dima_test_sdk.models.create_veriff_session_request import CreateVeriffSessionRequest
from dima_test_sdk.models.get_verification_method200_response import GetVerificationMethod200Response

from dima_test_sdk.api_client import ApiClient, RequestSerialized
from dima_test_sdk.api_response import ApiResponse
from dima_test_sdk.rest import RESTResponseType


class ScreeningsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_manual_verification_screening(
        self,
        front: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The front side of the document")],
        document_type: Annotated[StrictStr, Field(description="The type of document to be verified")],
        operation_type: Annotated[StrictStr, Field(description="The type of KYC operation to perform")],
        selfie_with_id: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="A selfie of the user holding the ID document")],
        document_country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The issuing country code of the document to be verified (ISO 3166-1 alpha-2)")],
        translation_required: Annotated[StrictBool, Field(description="Indicates whether the document requires translation")],
        back: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The back side of the document")] = None,
        additional: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="An additional document")] = None,
        proof_of_residence: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="A proof of residence document")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateManualVerificationScreening201Response:
        """Create manual verification screening

        Create manual verification screening  **Token scopes**: `worker:write`, `screenings:write`

        :param front: The front side of the document (required)
        :type front: bytearray
        :param document_type: The type of document to be verified (required)
        :type document_type: str
        :param operation_type: The type of KYC operation to perform (required)
        :type operation_type: str
        :param selfie_with_id: A selfie of the user holding the ID document (required)
        :type selfie_with_id: bytearray
        :param document_country: The issuing country code of the document to be verified (ISO 3166-1 alpha-2) (required)
        :type document_country: str
        :param translation_required: Indicates whether the document requires translation (required)
        :type translation_required: bool
        :param back: The back side of the document
        :type back: bytearray
        :param additional: An additional document
        :type additional: bytearray
        :param proof_of_residence: A proof of residence document
        :type proof_of_residence: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_manual_verification_screening_serialize(
            front=front,
            document_type=document_type,
            operation_type=operation_type,
            selfie_with_id=selfie_with_id,
            document_country=document_country,
            translation_required=translation_required,
            back=back,
            additional=additional,
            proof_of_residence=proof_of_residence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateManualVerificationScreening201Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_manual_verification_screening_with_http_info(
        self,
        front: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The front side of the document")],
        document_type: Annotated[StrictStr, Field(description="The type of document to be verified")],
        operation_type: Annotated[StrictStr, Field(description="The type of KYC operation to perform")],
        selfie_with_id: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="A selfie of the user holding the ID document")],
        document_country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The issuing country code of the document to be verified (ISO 3166-1 alpha-2)")],
        translation_required: Annotated[StrictBool, Field(description="Indicates whether the document requires translation")],
        back: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The back side of the document")] = None,
        additional: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="An additional document")] = None,
        proof_of_residence: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="A proof of residence document")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateManualVerificationScreening201Response]:
        """Create manual verification screening

        Create manual verification screening  **Token scopes**: `worker:write`, `screenings:write`

        :param front: The front side of the document (required)
        :type front: bytearray
        :param document_type: The type of document to be verified (required)
        :type document_type: str
        :param operation_type: The type of KYC operation to perform (required)
        :type operation_type: str
        :param selfie_with_id: A selfie of the user holding the ID document (required)
        :type selfie_with_id: bytearray
        :param document_country: The issuing country code of the document to be verified (ISO 3166-1 alpha-2) (required)
        :type document_country: str
        :param translation_required: Indicates whether the document requires translation (required)
        :type translation_required: bool
        :param back: The back side of the document
        :type back: bytearray
        :param additional: An additional document
        :type additional: bytearray
        :param proof_of_residence: A proof of residence document
        :type proof_of_residence: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_manual_verification_screening_serialize(
            front=front,
            document_type=document_type,
            operation_type=operation_type,
            selfie_with_id=selfie_with_id,
            document_country=document_country,
            translation_required=translation_required,
            back=back,
            additional=additional,
            proof_of_residence=proof_of_residence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateManualVerificationScreening201Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_manual_verification_screening_without_preload_content(
        self,
        front: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The front side of the document")],
        document_type: Annotated[StrictStr, Field(description="The type of document to be verified")],
        operation_type: Annotated[StrictStr, Field(description="The type of KYC operation to perform")],
        selfie_with_id: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="A selfie of the user holding the ID document")],
        document_country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The issuing country code of the document to be verified (ISO 3166-1 alpha-2)")],
        translation_required: Annotated[StrictBool, Field(description="Indicates whether the document requires translation")],
        back: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The back side of the document")] = None,
        additional: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="An additional document")] = None,
        proof_of_residence: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="A proof of residence document")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create manual verification screening

        Create manual verification screening  **Token scopes**: `worker:write`, `screenings:write`

        :param front: The front side of the document (required)
        :type front: bytearray
        :param document_type: The type of document to be verified (required)
        :type document_type: str
        :param operation_type: The type of KYC operation to perform (required)
        :type operation_type: str
        :param selfie_with_id: A selfie of the user holding the ID document (required)
        :type selfie_with_id: bytearray
        :param document_country: The issuing country code of the document to be verified (ISO 3166-1 alpha-2) (required)
        :type document_country: str
        :param translation_required: Indicates whether the document requires translation (required)
        :type translation_required: bool
        :param back: The back side of the document
        :type back: bytearray
        :param additional: An additional document
        :type additional: bytearray
        :param proof_of_residence: A proof of residence document
        :type proof_of_residence: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_manual_verification_screening_serialize(
            front=front,
            document_type=document_type,
            operation_type=operation_type,
            selfie_with_id=selfie_with_id,
            document_country=document_country,
            translation_required=translation_required,
            back=back,
            additional=additional,
            proof_of_residence=proof_of_residence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateManualVerificationScreening201Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_manual_verification_screening_serialize(
        self,
        front,
        document_type,
        operation_type,
        selfie_with_id,
        document_country,
        translation_required,
        back,
        additional,
        proof_of_residence,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if back is not None:
            _files['back'] = back
        if front is not None:
            _files['front'] = front
        if additional is not None:
            _files['additional'] = additional
        if document_type is not None:
            _form_params.append(('document_type', document_type))
        if operation_type is not None:
            _form_params.append(('operation_type', operation_type))
        if selfie_with_id is not None:
            _files['selfie_with_id'] = selfie_with_id
        if document_country is not None:
            _form_params.append(('document_country', document_country))
        if proof_of_residence is not None:
            _files['proof_of_residence'] = proof_of_residence
        if translation_required is not None:
            _form_params.append(('translation_required', translation_required))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/screenings/manual-verification',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_veriff_session(
        self,
        create_veriff_session_request: CreateVeriffSessionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateVeriffSession201Response:
        """Create Veriff session

        Create Veriff session  **Token scopes**: `screenings:write`, `worker:write`

        :param create_veriff_session_request: (required)
        :type create_veriff_session_request: CreateVeriffSessionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_veriff_session_serialize(
            create_veriff_session_request=create_veriff_session_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateVeriffSession201Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_veriff_session_with_http_info(
        self,
        create_veriff_session_request: CreateVeriffSessionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateVeriffSession201Response]:
        """Create Veriff session

        Create Veriff session  **Token scopes**: `screenings:write`, `worker:write`

        :param create_veriff_session_request: (required)
        :type create_veriff_session_request: CreateVeriffSessionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_veriff_session_serialize(
            create_veriff_session_request=create_veriff_session_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateVeriffSession201Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_veriff_session_without_preload_content(
        self,
        create_veriff_session_request: CreateVeriffSessionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Veriff session

        Create Veriff session  **Token scopes**: `screenings:write`, `worker:write`

        :param create_veriff_session_request: (required)
        :type create_veriff_session_request: CreateVeriffSessionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_veriff_session_serialize(
            create_veriff_session_request=create_veriff_session_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateVeriffSession201Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_veriff_session_serialize(
        self,
        create_veriff_session_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_veriff_session_request is not None:
            _body_params = create_veriff_session_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/veriff/session',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_verification_method(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The document's issuing country code (ISO 3166-1 alpha-2)")],
        document_type: Annotated[StrictStr, Field(description="The document to be provided during KYC")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVerificationMethod200Response:
        """Get verification method

        Get verification method by provided country and document type  **Token scopes**: `screenings:read`, `worker:read`

        :param country: The document's issuing country code (ISO 3166-1 alpha-2) (required)
        :type country: str
        :param document_type: The document to be provided during KYC (required)
        :type document_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_verification_method_serialize(
            country=country,
            document_type=document_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVerificationMethod200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_verification_method_with_http_info(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The document's issuing country code (ISO 3166-1 alpha-2)")],
        document_type: Annotated[StrictStr, Field(description="The document to be provided during KYC")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVerificationMethod200Response]:
        """Get verification method

        Get verification method by provided country and document type  **Token scopes**: `screenings:read`, `worker:read`

        :param country: The document's issuing country code (ISO 3166-1 alpha-2) (required)
        :type country: str
        :param document_type: The document to be provided during KYC (required)
        :type document_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_verification_method_serialize(
            country=country,
            document_type=document_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVerificationMethod200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_verification_method_without_preload_content(
        self,
        country: Annotated[str, Field(min_length=2, strict=True, max_length=2, description="The document's issuing country code (ISO 3166-1 alpha-2)")],
        document_type: Annotated[StrictStr, Field(description="The document to be provided during KYC")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get verification method

        Get verification method by provided country and document type  **Token scopes**: `screenings:read`, `worker:read`

        :param country: The document's issuing country code (ISO 3166-1 alpha-2) (required)
        :type country: str
        :param document_type: The document to be provided during KYC (required)
        :type document_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_verification_method_serialize(
            country=country,
            document_type=document_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVerificationMethod200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_verification_method_serialize(
        self,
        country,
        document_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country is not None:
            
            _query_params.append(('country', country))
            
        if document_type is not None:
            
            _query_params.append(('document_type', document_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/screenings/verification-method',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


