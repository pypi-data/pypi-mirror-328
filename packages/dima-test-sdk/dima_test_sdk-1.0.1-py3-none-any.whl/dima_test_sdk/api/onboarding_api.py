# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from dima_test_sdk.models.list_onboarding_tracker200_response import ListOnboardingTracker200Response
from dima_test_sdk.models.list_onboarding_tracker_pagination_parameter import ListOnboardingTrackerPaginationParameter
from dima_test_sdk.models.onboarding_tracker_hris_profile_oid_get200_response import OnboardingTrackerHrisProfileOidGet200Response

from dima_test_sdk.api_client import ApiClient, RequestSerialized
from dima_test_sdk.api_response import ApiResponse
from dima_test_sdk.rest import RESTResponseType


class OnboardingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def list_onboarding_tracker(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Search term to filter contracts by name or other attributes")] = None,
        contract_oid: Optional[List[StrictStr]] = None,
        hiring_types: Optional[List[StrictStr]] = None,
        progress_statuses: Optional[List[StrictStr]] = None,
        countries: Optional[List[StrictStr]] = None,
        teams: Optional[List[StrictStr]] = None,
        legal_entities: Optional[List[StrictStr]] = None,
        hris_direct_managers: Optional[List[StrictStr]] = None,
        from_date: Annotated[Optional[datetime], Field(description="Start date for filtering contracts")] = None,
        to_date: Annotated[Optional[datetime], Field(description="End date for filtering contracts")] = None,
        actions: Annotated[Optional[List[StrictStr]], Field(description="Onboarding actions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Number of results to return per page")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Field to sort by")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sorting order")] = None,
        pagination: Optional[ListOnboardingTrackerPaginationParameter] = None,
        include_overview: Annotated[Optional[StrictBool], Field(description="Include an overview of the contract")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListOnboardingTracker200Response:
        """List onboarding employees

        List all onboarding  **Token scopes**: `contracts:read`, `people:read`

        :param search: Search term to filter contracts by name or other attributes
        :type search: str
        :param contract_oid:
        :type contract_oid: List[str]
        :param hiring_types:
        :type hiring_types: List[str]
        :param progress_statuses:
        :type progress_statuses: List[str]
        :param countries:
        :type countries: List[str]
        :param teams:
        :type teams: List[str]
        :param legal_entities:
        :type legal_entities: List[str]
        :param hris_direct_managers:
        :type hris_direct_managers: List[str]
        :param from_date: Start date for filtering contracts
        :type from_date: datetime
        :param to_date: End date for filtering contracts
        :type to_date: datetime
        :param actions: Onboarding actions
        :type actions: List[str]
        :param limit: Number of results to return per page
        :type limit: int
        :param sort_by: Field to sort by
        :type sort_by: str
        :param sort_order: Sorting order
        :type sort_order: str
        :param pagination:
        :type pagination: ListOnboardingTrackerPaginationParameter
        :param include_overview: Include an overview of the contract
        :type include_overview: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_onboarding_tracker_serialize(
            search=search,
            contract_oid=contract_oid,
            hiring_types=hiring_types,
            progress_statuses=progress_statuses,
            countries=countries,
            teams=teams,
            legal_entities=legal_entities,
            hris_direct_managers=hris_direct_managers,
            from_date=from_date,
            to_date=to_date,
            actions=actions,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            pagination=pagination,
            include_overview=include_overview,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListOnboardingTracker200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_onboarding_tracker_with_http_info(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Search term to filter contracts by name or other attributes")] = None,
        contract_oid: Optional[List[StrictStr]] = None,
        hiring_types: Optional[List[StrictStr]] = None,
        progress_statuses: Optional[List[StrictStr]] = None,
        countries: Optional[List[StrictStr]] = None,
        teams: Optional[List[StrictStr]] = None,
        legal_entities: Optional[List[StrictStr]] = None,
        hris_direct_managers: Optional[List[StrictStr]] = None,
        from_date: Annotated[Optional[datetime], Field(description="Start date for filtering contracts")] = None,
        to_date: Annotated[Optional[datetime], Field(description="End date for filtering contracts")] = None,
        actions: Annotated[Optional[List[StrictStr]], Field(description="Onboarding actions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Number of results to return per page")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Field to sort by")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sorting order")] = None,
        pagination: Optional[ListOnboardingTrackerPaginationParameter] = None,
        include_overview: Annotated[Optional[StrictBool], Field(description="Include an overview of the contract")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListOnboardingTracker200Response]:
        """List onboarding employees

        List all onboarding  **Token scopes**: `contracts:read`, `people:read`

        :param search: Search term to filter contracts by name or other attributes
        :type search: str
        :param contract_oid:
        :type contract_oid: List[str]
        :param hiring_types:
        :type hiring_types: List[str]
        :param progress_statuses:
        :type progress_statuses: List[str]
        :param countries:
        :type countries: List[str]
        :param teams:
        :type teams: List[str]
        :param legal_entities:
        :type legal_entities: List[str]
        :param hris_direct_managers:
        :type hris_direct_managers: List[str]
        :param from_date: Start date for filtering contracts
        :type from_date: datetime
        :param to_date: End date for filtering contracts
        :type to_date: datetime
        :param actions: Onboarding actions
        :type actions: List[str]
        :param limit: Number of results to return per page
        :type limit: int
        :param sort_by: Field to sort by
        :type sort_by: str
        :param sort_order: Sorting order
        :type sort_order: str
        :param pagination:
        :type pagination: ListOnboardingTrackerPaginationParameter
        :param include_overview: Include an overview of the contract
        :type include_overview: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_onboarding_tracker_serialize(
            search=search,
            contract_oid=contract_oid,
            hiring_types=hiring_types,
            progress_statuses=progress_statuses,
            countries=countries,
            teams=teams,
            legal_entities=legal_entities,
            hris_direct_managers=hris_direct_managers,
            from_date=from_date,
            to_date=to_date,
            actions=actions,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            pagination=pagination,
            include_overview=include_overview,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListOnboardingTracker200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_onboarding_tracker_without_preload_content(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Search term to filter contracts by name or other attributes")] = None,
        contract_oid: Optional[List[StrictStr]] = None,
        hiring_types: Optional[List[StrictStr]] = None,
        progress_statuses: Optional[List[StrictStr]] = None,
        countries: Optional[List[StrictStr]] = None,
        teams: Optional[List[StrictStr]] = None,
        legal_entities: Optional[List[StrictStr]] = None,
        hris_direct_managers: Optional[List[StrictStr]] = None,
        from_date: Annotated[Optional[datetime], Field(description="Start date for filtering contracts")] = None,
        to_date: Annotated[Optional[datetime], Field(description="End date for filtering contracts")] = None,
        actions: Annotated[Optional[List[StrictStr]], Field(description="Onboarding actions")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Number of results to return per page")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Field to sort by")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="Sorting order")] = None,
        pagination: Optional[ListOnboardingTrackerPaginationParameter] = None,
        include_overview: Annotated[Optional[StrictBool], Field(description="Include an overview of the contract")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List onboarding employees

        List all onboarding  **Token scopes**: `contracts:read`, `people:read`

        :param search: Search term to filter contracts by name or other attributes
        :type search: str
        :param contract_oid:
        :type contract_oid: List[str]
        :param hiring_types:
        :type hiring_types: List[str]
        :param progress_statuses:
        :type progress_statuses: List[str]
        :param countries:
        :type countries: List[str]
        :param teams:
        :type teams: List[str]
        :param legal_entities:
        :type legal_entities: List[str]
        :param hris_direct_managers:
        :type hris_direct_managers: List[str]
        :param from_date: Start date for filtering contracts
        :type from_date: datetime
        :param to_date: End date for filtering contracts
        :type to_date: datetime
        :param actions: Onboarding actions
        :type actions: List[str]
        :param limit: Number of results to return per page
        :type limit: int
        :param sort_by: Field to sort by
        :type sort_by: str
        :param sort_order: Sorting order
        :type sort_order: str
        :param pagination:
        :type pagination: ListOnboardingTrackerPaginationParameter
        :param include_overview: Include an overview of the contract
        :type include_overview: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_onboarding_tracker_serialize(
            search=search,
            contract_oid=contract_oid,
            hiring_types=hiring_types,
            progress_statuses=progress_statuses,
            countries=countries,
            teams=teams,
            legal_entities=legal_entities,
            hris_direct_managers=hris_direct_managers,
            from_date=from_date,
            to_date=to_date,
            actions=actions,
            limit=limit,
            sort_by=sort_by,
            sort_order=sort_order,
            pagination=pagination,
            include_overview=include_overview,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListOnboardingTracker200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_onboarding_tracker_serialize(
        self,
        search,
        contract_oid,
        hiring_types,
        progress_statuses,
        countries,
        teams,
        legal_entities,
        hris_direct_managers,
        from_date,
        to_date,
        actions,
        limit,
        sort_by,
        sort_order,
        pagination,
        include_overview,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'contractOid': 'multi',
            'hiringTypes': 'multi',
            'progressStatuses': 'multi',
            'countries': 'multi',
            'teams': 'multi',
            'legalEntities': 'multi',
            'hrisDirectManagers': 'multi',
            'actions': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if search is not None:
            
            _query_params.append(('search', search))
            
        if contract_oid is not None:
            
            _query_params.append(('contractOid', contract_oid))
            
        if hiring_types is not None:
            
            _query_params.append(('hiringTypes', hiring_types))
            
        if progress_statuses is not None:
            
            _query_params.append(('progressStatuses', progress_statuses))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if teams is not None:
            
            _query_params.append(('teams', teams))
            
        if legal_entities is not None:
            
            _query_params.append(('legalEntities', legal_entities))
            
        if hris_direct_managers is not None:
            
            _query_params.append(('hrisDirectManagers', hris_direct_managers))
            
        if from_date is not None:
            if isinstance(from_date, datetime):
                _query_params.append(
                    (
                        'fromDate',
                        from_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromDate', from_date))
            
        if to_date is not None:
            if isinstance(to_date, datetime):
                _query_params.append(
                    (
                        'toDate',
                        to_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toDate', to_date))
            
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if pagination is not None:
            
            _query_params.append(('pagination', pagination))
            
        if include_overview is not None:
            
            _query_params.append(('include_overview', include_overview))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/onboarding/tracker',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def onboarding_tracker_hris_profile_oid_get(
        self,
        oid: Annotated[StrictStr, Field(description="Unique hris profile oid")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnboardingTrackerHrisProfileOidGet200Response:
        """Get onboarding details by onboarding hris profile oid

        Get onboarding overview  **Token scopes**: `contracts:read`, `people:read`

        :param oid: Unique hris profile oid (required)
        :type oid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onboarding_tracker_hris_profile_oid_get_serialize(
            oid=oid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingTrackerHrisProfileOidGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def onboarding_tracker_hris_profile_oid_get_with_http_info(
        self,
        oid: Annotated[StrictStr, Field(description="Unique hris profile oid")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnboardingTrackerHrisProfileOidGet200Response]:
        """Get onboarding details by onboarding hris profile oid

        Get onboarding overview  **Token scopes**: `contracts:read`, `people:read`

        :param oid: Unique hris profile oid (required)
        :type oid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onboarding_tracker_hris_profile_oid_get_serialize(
            oid=oid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingTrackerHrisProfileOidGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def onboarding_tracker_hris_profile_oid_get_without_preload_content(
        self,
        oid: Annotated[StrictStr, Field(description="Unique hris profile oid")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get onboarding details by onboarding hris profile oid

        Get onboarding overview  **Token scopes**: `contracts:read`, `people:read`

        :param oid: Unique hris profile oid (required)
        :type oid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onboarding_tracker_hris_profile_oid_get_serialize(
            oid=oid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingTrackerHrisProfileOidGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _onboarding_tracker_hris_profile_oid_get_serialize(
        self,
        oid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if oid is not None:
            _path_params['oid'] = oid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/onboarding/tracker/hris_profile/{oid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def onboarding_tracker_id_get(
        self,
        id: Annotated[StrictStr, Field(description="Unique onboarding tracker identifier")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnboardingTrackerHrisProfileOidGet200Response:
        """Get onboarding details by onboarding tracker ID

        Get onboarding overview  **Token scopes**: `contracts:read`, `people:read`

        :param id: Unique onboarding tracker identifier (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onboarding_tracker_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingTrackerHrisProfileOidGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def onboarding_tracker_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Unique onboarding tracker identifier")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnboardingTrackerHrisProfileOidGet200Response]:
        """Get onboarding details by onboarding tracker ID

        Get onboarding overview  **Token scopes**: `contracts:read`, `people:read`

        :param id: Unique onboarding tracker identifier (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onboarding_tracker_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingTrackerHrisProfileOidGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def onboarding_tracker_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Unique onboarding tracker identifier")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get onboarding details by onboarding tracker ID

        Get onboarding overview  **Token scopes**: `contracts:read`, `people:read`

        :param id: Unique onboarding tracker identifier (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._onboarding_tracker_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnboardingTrackerHrisProfileOidGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _onboarding_tracker_id_get_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/onboarding/tracker/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


