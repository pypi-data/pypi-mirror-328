# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from dima_test_sdk.models.get_pay_stub200_response import GetPayStub200Response
from dima_test_sdk.models.get_year_to_date_pay200_response import GetYearToDatePay200Response

from dima_test_sdk.api_client import ApiClient, RequestSerialized
from dima_test_sdk.api_response import ApiResponse
from dima_test_sdk.rest import RESTResponseType


class PayrollApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_pay_stub(
        self,
        id: Annotated[StrictStr, Field(description="Id from the legal entity to fetch data")],
        payroll_start_date: Annotated[Optional[StrictStr], Field(description="Payroll start date")] = None,
        payroll_end_date: Annotated[Optional[StrictStr], Field(description="Payroll end date")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Payroll status")] = None,
        items_per_page: Annotated[Optional[StrictInt], Field(description="Items per page")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Items to be skipped when searching")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPayStub200Response:
        """Get pay stub from employees from organization integrated with external benefits vendor

        Get pay stub from employees from organization integrated with external benefits vendor  **Token scopes**: `organizations:read`

        :param id: Id from the legal entity to fetch data (required)
        :type id: str
        :param payroll_start_date: Payroll start date
        :type payroll_start_date: str
        :param payroll_end_date: Payroll end date
        :type payroll_end_date: str
        :param status: Payroll status
        :type status: str
        :param items_per_page: Items per page
        :type items_per_page: int
        :param offset: Items to be skipped when searching
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_stub_serialize(
            id=id,
            payroll_start_date=payroll_start_date,
            payroll_end_date=payroll_end_date,
            status=status,
            items_per_page=items_per_page,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayStub200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_pay_stub_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Id from the legal entity to fetch data")],
        payroll_start_date: Annotated[Optional[StrictStr], Field(description="Payroll start date")] = None,
        payroll_end_date: Annotated[Optional[StrictStr], Field(description="Payroll end date")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Payroll status")] = None,
        items_per_page: Annotated[Optional[StrictInt], Field(description="Items per page")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Items to be skipped when searching")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPayStub200Response]:
        """Get pay stub from employees from organization integrated with external benefits vendor

        Get pay stub from employees from organization integrated with external benefits vendor  **Token scopes**: `organizations:read`

        :param id: Id from the legal entity to fetch data (required)
        :type id: str
        :param payroll_start_date: Payroll start date
        :type payroll_start_date: str
        :param payroll_end_date: Payroll end date
        :type payroll_end_date: str
        :param status: Payroll status
        :type status: str
        :param items_per_page: Items per page
        :type items_per_page: int
        :param offset: Items to be skipped when searching
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_stub_serialize(
            id=id,
            payroll_start_date=payroll_start_date,
            payroll_end_date=payroll_end_date,
            status=status,
            items_per_page=items_per_page,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayStub200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_pay_stub_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Id from the legal entity to fetch data")],
        payroll_start_date: Annotated[Optional[StrictStr], Field(description="Payroll start date")] = None,
        payroll_end_date: Annotated[Optional[StrictStr], Field(description="Payroll end date")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Payroll status")] = None,
        items_per_page: Annotated[Optional[StrictInt], Field(description="Items per page")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Items to be skipped when searching")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get pay stub from employees from organization integrated with external benefits vendor

        Get pay stub from employees from organization integrated with external benefits vendor  **Token scopes**: `organizations:read`

        :param id: Id from the legal entity to fetch data (required)
        :type id: str
        :param payroll_start_date: Payroll start date
        :type payroll_start_date: str
        :param payroll_end_date: Payroll end date
        :type payroll_end_date: str
        :param status: Payroll status
        :type status: str
        :param items_per_page: Items per page
        :type items_per_page: int
        :param offset: Items to be skipped when searching
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_pay_stub_serialize(
            id=id,
            payroll_start_date=payroll_start_date,
            payroll_end_date=payroll_end_date,
            status=status,
            items_per_page=items_per_page,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPayStub200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_pay_stub_serialize(
        self,
        id,
        payroll_start_date,
        payroll_end_date,
        status,
        items_per_page,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if payroll_start_date is not None:
            
            _query_params.append(('payroll_start_date', payroll_start_date))
            
        if payroll_end_date is not None:
            
            _query_params.append(('payroll_end_date', payroll_end_date))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if items_per_page is not None:
            
            _query_params.append(('items_per_page', items_per_page))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/benefits/legal-entities/{id}/pay-stub',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_year_to_date_pay(
        self,
        id: Annotated[StrictStr, Field(description="Id from the legal entity to fetch data")],
        date_start: Annotated[StrictStr, Field(description="Start date to fetch aggregated pay data")],
        date_end: Annotated[StrictStr, Field(description="End date to fetch aggregated pay data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetYearToDatePay200Response:
        """Get year to date payment for benefits 401k.

        Get year to date from employees from organization integrated with external benefits vendor  **Token scopes**: `organizations:read`

        :param id: Id from the legal entity to fetch data (required)
        :type id: str
        :param date_start: Start date to fetch aggregated pay data (required)
        :type date_start: str
        :param date_end: End date to fetch aggregated pay data (required)
        :type date_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_year_to_date_pay_serialize(
            id=id,
            date_start=date_start,
            date_end=date_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetYearToDatePay200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_year_to_date_pay_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Id from the legal entity to fetch data")],
        date_start: Annotated[StrictStr, Field(description="Start date to fetch aggregated pay data")],
        date_end: Annotated[StrictStr, Field(description="End date to fetch aggregated pay data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetYearToDatePay200Response]:
        """Get year to date payment for benefits 401k.

        Get year to date from employees from organization integrated with external benefits vendor  **Token scopes**: `organizations:read`

        :param id: Id from the legal entity to fetch data (required)
        :type id: str
        :param date_start: Start date to fetch aggregated pay data (required)
        :type date_start: str
        :param date_end: End date to fetch aggregated pay data (required)
        :type date_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_year_to_date_pay_serialize(
            id=id,
            date_start=date_start,
            date_end=date_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetYearToDatePay200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_year_to_date_pay_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Id from the legal entity to fetch data")],
        date_start: Annotated[StrictStr, Field(description="Start date to fetch aggregated pay data")],
        date_end: Annotated[StrictStr, Field(description="End date to fetch aggregated pay data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get year to date payment for benefits 401k.

        Get year to date from employees from organization integrated with external benefits vendor  **Token scopes**: `organizations:read`

        :param id: Id from the legal entity to fetch data (required)
        :type id: str
        :param date_start: Start date to fetch aggregated pay data (required)
        :type date_start: str
        :param date_end: End date to fetch aggregated pay data (required)
        :type date_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_year_to_date_pay_serialize(
            id=id,
            date_start=date_start,
            date_end=date_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetYearToDatePay200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_year_to_date_pay_serialize(
        self,
        id,
        date_start,
        date_end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if date_start is not None:
            
            _query_params.append(('date_start', date_start))
            
        if date_end is not None:
            
            _query_params.append(('date_end', date_end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/benefits/legal-entities/{id}/year-to-date-pay',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


