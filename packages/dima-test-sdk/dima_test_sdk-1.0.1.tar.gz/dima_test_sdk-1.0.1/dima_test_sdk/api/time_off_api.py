# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictStr, field_validator
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from dima_test_sdk.models.create_time_off201_response import CreateTimeOff201Response
from dima_test_sdk.models.create_time_off_request import CreateTimeOffRequest
from dima_test_sdk.models.get_policies_for_profile200_response import GetPoliciesForProfile200Response
from dima_test_sdk.models.get_profile_entitlements200_response import GetProfileEntitlements200Response
from dima_test_sdk.models.get_time_offs_query200_response import GetTimeOffsQuery200Response
from dima_test_sdk.models.get_time_offs_query_for_organization200_response import GetTimeOffsQueryForOrganization200Response
from dima_test_sdk.models.update_time_off200_response import UpdateTimeOff200Response
from dima_test_sdk.models.update_time_off_request import UpdateTimeOffRequest

from dima_test_sdk.api_client import ApiClient, RequestSerialized
from dima_test_sdk.api_response import ApiResponse
from dima_test_sdk.rest import RESTResponseType


class TimeOffApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_time_off(
        self,
        create_time_off_request: Annotated[CreateTimeOffRequest, Field(description="The time off request data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateTimeOff201Response:
        """Create time-off request

        Create time-off request  **Token scopes**: `time-off:write`

        :param create_time_off_request: The time off request data (required)
        :type create_time_off_request: CreateTimeOffRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_time_off_serialize(
            create_time_off_request=create_time_off_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTimeOff201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_time_off_with_http_info(
        self,
        create_time_off_request: Annotated[CreateTimeOffRequest, Field(description="The time off request data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateTimeOff201Response]:
        """Create time-off request

        Create time-off request  **Token scopes**: `time-off:write`

        :param create_time_off_request: The time off request data (required)
        :type create_time_off_request: CreateTimeOffRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_time_off_serialize(
            create_time_off_request=create_time_off_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTimeOff201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_time_off_without_preload_content(
        self,
        create_time_off_request: Annotated[CreateTimeOffRequest, Field(description="The time off request data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create time-off request

        Create time-off request  **Token scopes**: `time-off:write`

        :param create_time_off_request: The time off request data (required)
        :type create_time_off_request: CreateTimeOffRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_time_off_serialize(
            create_time_off_request=create_time_off_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTimeOff201Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_time_off_serialize(
        self,
        create_time_off_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_time_off_request is not None:
            _body_params = create_time_off_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/time_offs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_time_off(
        self,
        time_off_id: Annotated[StrictStr, Field(description="Time off request id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Delete time-off request

        Delete time-off request  **Token scopes**: `time-off:write`

        :param time_off_id: Time off request id (required)
        :type time_off_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_time_off_serialize(
            time_off_id=time_off_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_time_off_with_http_info(
        self,
        time_off_id: Annotated[StrictStr, Field(description="Time off request id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Delete time-off request

        Delete time-off request  **Token scopes**: `time-off:write`

        :param time_off_id: Time off request id (required)
        :type time_off_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_time_off_serialize(
            time_off_id=time_off_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_time_off_without_preload_content(
        self,
        time_off_id: Annotated[StrictStr, Field(description="Time off request id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete time-off request

        Delete time-off request  **Token scopes**: `time-off:write`

        :param time_off_id: Time off request id (required)
        :type time_off_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_time_off_serialize(
            time_off_id=time_off_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_time_off_serialize(
        self,
        time_off_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if time_off_id is not None:
            _path_params['time_off_id'] = time_off_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/time_offs/{time_off_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_policies_for_profile(
        self,
        hris_profile_id: Annotated[StrictStr, Field(description="hrisProfileId id.")],
        policy_type_name: Annotated[Optional[StrictStr], Field(description="Policy type name.")] = None,
        policy_type_id: Annotated[Optional[StrictStr], Field(description="policy type id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPoliciesForProfile200Response:
        """List policies

        List policies  **Token scopes**: `time-off:read`

        :param hris_profile_id: hrisProfileId id. (required)
        :type hris_profile_id: str
        :param policy_type_name: Policy type name.
        :type policy_type_name: str
        :param policy_type_id: policy type id
        :type policy_type_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policies_for_profile_serialize(
            hris_profile_id=hris_profile_id,
            policy_type_name=policy_type_name,
            policy_type_id=policy_type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPoliciesForProfile200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_policies_for_profile_with_http_info(
        self,
        hris_profile_id: Annotated[StrictStr, Field(description="hrisProfileId id.")],
        policy_type_name: Annotated[Optional[StrictStr], Field(description="Policy type name.")] = None,
        policy_type_id: Annotated[Optional[StrictStr], Field(description="policy type id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPoliciesForProfile200Response]:
        """List policies

        List policies  **Token scopes**: `time-off:read`

        :param hris_profile_id: hrisProfileId id. (required)
        :type hris_profile_id: str
        :param policy_type_name: Policy type name.
        :type policy_type_name: str
        :param policy_type_id: policy type id
        :type policy_type_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policies_for_profile_serialize(
            hris_profile_id=hris_profile_id,
            policy_type_name=policy_type_name,
            policy_type_id=policy_type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPoliciesForProfile200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_policies_for_profile_without_preload_content(
        self,
        hris_profile_id: Annotated[StrictStr, Field(description="hrisProfileId id.")],
        policy_type_name: Annotated[Optional[StrictStr], Field(description="Policy type name.")] = None,
        policy_type_id: Annotated[Optional[StrictStr], Field(description="policy type id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List policies

        List policies  **Token scopes**: `time-off:read`

        :param hris_profile_id: hrisProfileId id. (required)
        :type hris_profile_id: str
        :param policy_type_name: Policy type name.
        :type policy_type_name: str
        :param policy_type_id: policy type id
        :type policy_type_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_policies_for_profile_serialize(
            hris_profile_id=hris_profile_id,
            policy_type_name=policy_type_name,
            policy_type_id=policy_type_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPoliciesForProfile200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_policies_for_profile_serialize(
        self,
        hris_profile_id,
        policy_type_name,
        policy_type_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hris_profile_id is not None:
            _path_params['hris_profile_id'] = hris_profile_id
        # process the query parameters
        if policy_type_name is not None:
            
            _query_params.append(('policy_type_name', policy_type_name))
            
        if policy_type_id is not None:
            
            _query_params.append(('policy_type_id', policy_type_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/time_offs/profile/{hris_profile_id}/policies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_profile_entitlements(
        self,
        hris_profile_id: Annotated[str, Field(strict=True, description="HRIS profile ID")],
        policy_type_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None,
        tracking_period_date: Annotated[Optional[date], Field(description="Tracking period date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetProfileEntitlements200Response:
        """Get Profile Entitlements

        List time-off entitlements.  **Token scopes**: `time-off:read`

        :param hris_profile_id: HRIS profile ID (required)
        :type hris_profile_id: str
        :param policy_type_name:
        :type policy_type_name: str
        :param tracking_period_date: Tracking period date
        :type tracking_period_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_profile_entitlements_serialize(
            hris_profile_id=hris_profile_id,
            policy_type_name=policy_type_name,
            tracking_period_date=tracking_period_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetProfileEntitlements200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_profile_entitlements_with_http_info(
        self,
        hris_profile_id: Annotated[str, Field(strict=True, description="HRIS profile ID")],
        policy_type_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None,
        tracking_period_date: Annotated[Optional[date], Field(description="Tracking period date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetProfileEntitlements200Response]:
        """Get Profile Entitlements

        List time-off entitlements.  **Token scopes**: `time-off:read`

        :param hris_profile_id: HRIS profile ID (required)
        :type hris_profile_id: str
        :param policy_type_name:
        :type policy_type_name: str
        :param tracking_period_date: Tracking period date
        :type tracking_period_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_profile_entitlements_serialize(
            hris_profile_id=hris_profile_id,
            policy_type_name=policy_type_name,
            tracking_period_date=tracking_period_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetProfileEntitlements200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_profile_entitlements_without_preload_content(
        self,
        hris_profile_id: Annotated[str, Field(strict=True, description="HRIS profile ID")],
        policy_type_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None,
        tracking_period_date: Annotated[Optional[date], Field(description="Tracking period date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Profile Entitlements

        List time-off entitlements.  **Token scopes**: `time-off:read`

        :param hris_profile_id: HRIS profile ID (required)
        :type hris_profile_id: str
        :param policy_type_name:
        :type policy_type_name: str
        :param tracking_period_date: Tracking period date
        :type tracking_period_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_profile_entitlements_serialize(
            hris_profile_id=hris_profile_id,
            policy_type_name=policy_type_name,
            tracking_period_date=tracking_period_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetProfileEntitlements200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_profile_entitlements_serialize(
        self,
        hris_profile_id,
        policy_type_name,
        tracking_period_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hris_profile_id is not None:
            _path_params['hris_profile_id'] = hris_profile_id
        # process the query parameters
        if policy_type_name is not None:
            
            _query_params.append(('policy_type_name', policy_type_name))
            
        if tracking_period_date is not None:
            if isinstance(tracking_period_date, date):
                _query_params.append(
                    (
                        'tracking_period_date',
                        tracking_period_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('tracking_period_date', tracking_period_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/time_offs/profile/{hris_profile_id}/entitlements',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_time_offs_query(
        self,
        hris_profile_id: Annotated[StrictStr, Field(description="HRIS profile id")],
        organization_id: Annotated[Optional[StrictStr], Field(description="Organization id")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Time off status")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Start date of time off")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of time off")] = None,
        approval_start_date: Annotated[Optional[datetime], Field(description="Approval start date")] = None,
        approval_end_date: Annotated[Optional[datetime], Field(description="Approval end date")] = None,
        updated_start_date: Annotated[Optional[datetime], Field(description="Updated start date")] = None,
        updated_end_date: Annotated[Optional[datetime], Field(description="Updated end date")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=5)]], Field(description="Page size")] = None,
        policy_types: Annotated[Optional[List[StrictStr]], Field(description="Policy types")] = None,
        next: Annotated[Optional[StrictStr], Field(description="Next page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTimeOffsQuery200Response:
        """List time-off requests

        List time-off requests  **Token scopes**: `time-off:read`

        :param hris_profile_id: HRIS profile id (required)
        :type hris_profile_id: str
        :param organization_id: Organization id
        :type organization_id: str
        :param status: Time off status
        :type status: List[str]
        :param start_date: Start date of time off
        :type start_date: datetime
        :param end_date: End date of time off
        :type end_date: datetime
        :param approval_start_date: Approval start date
        :type approval_start_date: datetime
        :param approval_end_date: Approval end date
        :type approval_end_date: datetime
        :param updated_start_date: Updated start date
        :type updated_start_date: datetime
        :param updated_end_date: Updated end date
        :type updated_end_date: datetime
        :param page_size: Page size
        :type page_size: int
        :param policy_types: Policy types
        :type policy_types: List[str]
        :param next: Next page
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_offs_query_serialize(
            hris_profile_id=hris_profile_id,
            organization_id=organization_id,
            status=status,
            start_date=start_date,
            end_date=end_date,
            approval_start_date=approval_start_date,
            approval_end_date=approval_end_date,
            updated_start_date=updated_start_date,
            updated_end_date=updated_end_date,
            page_size=page_size,
            policy_types=policy_types,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimeOffsQuery200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_time_offs_query_with_http_info(
        self,
        hris_profile_id: Annotated[StrictStr, Field(description="HRIS profile id")],
        organization_id: Annotated[Optional[StrictStr], Field(description="Organization id")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Time off status")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Start date of time off")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of time off")] = None,
        approval_start_date: Annotated[Optional[datetime], Field(description="Approval start date")] = None,
        approval_end_date: Annotated[Optional[datetime], Field(description="Approval end date")] = None,
        updated_start_date: Annotated[Optional[datetime], Field(description="Updated start date")] = None,
        updated_end_date: Annotated[Optional[datetime], Field(description="Updated end date")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=5)]], Field(description="Page size")] = None,
        policy_types: Annotated[Optional[List[StrictStr]], Field(description="Policy types")] = None,
        next: Annotated[Optional[StrictStr], Field(description="Next page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTimeOffsQuery200Response]:
        """List time-off requests

        List time-off requests  **Token scopes**: `time-off:read`

        :param hris_profile_id: HRIS profile id (required)
        :type hris_profile_id: str
        :param organization_id: Organization id
        :type organization_id: str
        :param status: Time off status
        :type status: List[str]
        :param start_date: Start date of time off
        :type start_date: datetime
        :param end_date: End date of time off
        :type end_date: datetime
        :param approval_start_date: Approval start date
        :type approval_start_date: datetime
        :param approval_end_date: Approval end date
        :type approval_end_date: datetime
        :param updated_start_date: Updated start date
        :type updated_start_date: datetime
        :param updated_end_date: Updated end date
        :type updated_end_date: datetime
        :param page_size: Page size
        :type page_size: int
        :param policy_types: Policy types
        :type policy_types: List[str]
        :param next: Next page
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_offs_query_serialize(
            hris_profile_id=hris_profile_id,
            organization_id=organization_id,
            status=status,
            start_date=start_date,
            end_date=end_date,
            approval_start_date=approval_start_date,
            approval_end_date=approval_end_date,
            updated_start_date=updated_start_date,
            updated_end_date=updated_end_date,
            page_size=page_size,
            policy_types=policy_types,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimeOffsQuery200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_time_offs_query_without_preload_content(
        self,
        hris_profile_id: Annotated[StrictStr, Field(description="HRIS profile id")],
        organization_id: Annotated[Optional[StrictStr], Field(description="Organization id")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Time off status")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Start date of time off")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of time off")] = None,
        approval_start_date: Annotated[Optional[datetime], Field(description="Approval start date")] = None,
        approval_end_date: Annotated[Optional[datetime], Field(description="Approval end date")] = None,
        updated_start_date: Annotated[Optional[datetime], Field(description="Updated start date")] = None,
        updated_end_date: Annotated[Optional[datetime], Field(description="Updated end date")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=5)]], Field(description="Page size")] = None,
        policy_types: Annotated[Optional[List[StrictStr]], Field(description="Policy types")] = None,
        next: Annotated[Optional[StrictStr], Field(description="Next page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List time-off requests

        List time-off requests  **Token scopes**: `time-off:read`

        :param hris_profile_id: HRIS profile id (required)
        :type hris_profile_id: str
        :param organization_id: Organization id
        :type organization_id: str
        :param status: Time off status
        :type status: List[str]
        :param start_date: Start date of time off
        :type start_date: datetime
        :param end_date: End date of time off
        :type end_date: datetime
        :param approval_start_date: Approval start date
        :type approval_start_date: datetime
        :param approval_end_date: Approval end date
        :type approval_end_date: datetime
        :param updated_start_date: Updated start date
        :type updated_start_date: datetime
        :param updated_end_date: Updated end date
        :type updated_end_date: datetime
        :param page_size: Page size
        :type page_size: int
        :param policy_types: Policy types
        :type policy_types: List[str]
        :param next: Next page
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_offs_query_serialize(
            hris_profile_id=hris_profile_id,
            organization_id=organization_id,
            status=status,
            start_date=start_date,
            end_date=end_date,
            approval_start_date=approval_start_date,
            approval_end_date=approval_end_date,
            updated_start_date=updated_start_date,
            updated_end_date=updated_end_date,
            page_size=page_size,
            policy_types=policy_types,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimeOffsQuery200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_time_offs_query_serialize(
        self,
        hris_profile_id,
        organization_id,
        status,
        start_date,
        end_date,
        approval_start_date,
        approval_end_date,
        updated_start_date,
        updated_end_date,
        page_size,
        policy_types,
        next,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'status': 'multi',
            'policy_types': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if hris_profile_id is not None:
            _path_params['hris_profile_id'] = hris_profile_id
        # process the query parameters
        if organization_id is not None:
            
            _query_params.append(('organization_id', organization_id))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if approval_start_date is not None:
            if isinstance(approval_start_date, datetime):
                _query_params.append(
                    (
                        'approval_start_date',
                        approval_start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('approval_start_date', approval_start_date))
            
        if approval_end_date is not None:
            if isinstance(approval_end_date, datetime):
                _query_params.append(
                    (
                        'approval_end_date',
                        approval_end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('approval_end_date', approval_end_date))
            
        if updated_start_date is not None:
            if isinstance(updated_start_date, datetime):
                _query_params.append(
                    (
                        'updated_start_date',
                        updated_start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_start_date', updated_start_date))
            
        if updated_end_date is not None:
            if isinstance(updated_end_date, datetime):
                _query_params.append(
                    (
                        'updated_end_date',
                        updated_end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_end_date', updated_end_date))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if policy_types is not None:
            
            _query_params.append(('policy_types', policy_types))
            
        if next is not None:
            
            _query_params.append(('next', next))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/time_offs/profile/{hris_profile_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_time_offs_query_for_organization(
        self,
        status: Annotated[Optional[List[StrictStr]], Field(description="Time off status")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Start date of time off")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of time off")] = None,
        approval_start_date: Annotated[Optional[datetime], Field(description="Approval start date")] = None,
        approval_end_date: Annotated[Optional[datetime], Field(description="Approval end date")] = None,
        updated_start_date: Annotated[Optional[datetime], Field(description="Updated start date")] = None,
        updated_end_date: Annotated[Optional[datetime], Field(description="Updated end date")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=5)]], Field(description="Page size")] = None,
        policy_types: Annotated[Optional[List[StrictStr]], Field(description="Policy types")] = None,
        next: Annotated[Optional[StrictStr], Field(description="Next page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTimeOffsQueryForOrganization200Response:
        """List time-off requests for Organization

        List time-off requests for Organization  **Token scopes**: `time-off:read`

        :param status: Time off status
        :type status: List[str]
        :param start_date: Start date of time off
        :type start_date: datetime
        :param end_date: End date of time off
        :type end_date: datetime
        :param approval_start_date: Approval start date
        :type approval_start_date: datetime
        :param approval_end_date: Approval end date
        :type approval_end_date: datetime
        :param updated_start_date: Updated start date
        :type updated_start_date: datetime
        :param updated_end_date: Updated end date
        :type updated_end_date: datetime
        :param page_size: Page size
        :type page_size: int
        :param policy_types: Policy types
        :type policy_types: List[str]
        :param next: Next page
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_offs_query_for_organization_serialize(
            status=status,
            start_date=start_date,
            end_date=end_date,
            approval_start_date=approval_start_date,
            approval_end_date=approval_end_date,
            updated_start_date=updated_start_date,
            updated_end_date=updated_end_date,
            page_size=page_size,
            policy_types=policy_types,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimeOffsQueryForOrganization200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_time_offs_query_for_organization_with_http_info(
        self,
        status: Annotated[Optional[List[StrictStr]], Field(description="Time off status")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Start date of time off")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of time off")] = None,
        approval_start_date: Annotated[Optional[datetime], Field(description="Approval start date")] = None,
        approval_end_date: Annotated[Optional[datetime], Field(description="Approval end date")] = None,
        updated_start_date: Annotated[Optional[datetime], Field(description="Updated start date")] = None,
        updated_end_date: Annotated[Optional[datetime], Field(description="Updated end date")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=5)]], Field(description="Page size")] = None,
        policy_types: Annotated[Optional[List[StrictStr]], Field(description="Policy types")] = None,
        next: Annotated[Optional[StrictStr], Field(description="Next page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTimeOffsQueryForOrganization200Response]:
        """List time-off requests for Organization

        List time-off requests for Organization  **Token scopes**: `time-off:read`

        :param status: Time off status
        :type status: List[str]
        :param start_date: Start date of time off
        :type start_date: datetime
        :param end_date: End date of time off
        :type end_date: datetime
        :param approval_start_date: Approval start date
        :type approval_start_date: datetime
        :param approval_end_date: Approval end date
        :type approval_end_date: datetime
        :param updated_start_date: Updated start date
        :type updated_start_date: datetime
        :param updated_end_date: Updated end date
        :type updated_end_date: datetime
        :param page_size: Page size
        :type page_size: int
        :param policy_types: Policy types
        :type policy_types: List[str]
        :param next: Next page
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_offs_query_for_organization_serialize(
            status=status,
            start_date=start_date,
            end_date=end_date,
            approval_start_date=approval_start_date,
            approval_end_date=approval_end_date,
            updated_start_date=updated_start_date,
            updated_end_date=updated_end_date,
            page_size=page_size,
            policy_types=policy_types,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimeOffsQueryForOrganization200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_time_offs_query_for_organization_without_preload_content(
        self,
        status: Annotated[Optional[List[StrictStr]], Field(description="Time off status")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Start date of time off")] = None,
        end_date: Annotated[Optional[datetime], Field(description="End date of time off")] = None,
        approval_start_date: Annotated[Optional[datetime], Field(description="Approval start date")] = None,
        approval_end_date: Annotated[Optional[datetime], Field(description="Approval end date")] = None,
        updated_start_date: Annotated[Optional[datetime], Field(description="Updated start date")] = None,
        updated_end_date: Annotated[Optional[datetime], Field(description="Updated end date")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=200, strict=True, ge=5)]], Field(description="Page size")] = None,
        policy_types: Annotated[Optional[List[StrictStr]], Field(description="Policy types")] = None,
        next: Annotated[Optional[StrictStr], Field(description="Next page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List time-off requests for Organization

        List time-off requests for Organization  **Token scopes**: `time-off:read`

        :param status: Time off status
        :type status: List[str]
        :param start_date: Start date of time off
        :type start_date: datetime
        :param end_date: End date of time off
        :type end_date: datetime
        :param approval_start_date: Approval start date
        :type approval_start_date: datetime
        :param approval_end_date: Approval end date
        :type approval_end_date: datetime
        :param updated_start_date: Updated start date
        :type updated_start_date: datetime
        :param updated_end_date: Updated end date
        :type updated_end_date: datetime
        :param page_size: Page size
        :type page_size: int
        :param policy_types: Policy types
        :type policy_types: List[str]
        :param next: Next page
        :type next: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_time_offs_query_for_organization_serialize(
            status=status,
            start_date=start_date,
            end_date=end_date,
            approval_start_date=approval_start_date,
            approval_end_date=approval_end_date,
            updated_start_date=updated_start_date,
            updated_end_date=updated_end_date,
            page_size=page_size,
            policy_types=policy_types,
            next=next,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTimeOffsQueryForOrganization200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_time_offs_query_for_organization_serialize(
        self,
        status,
        start_date,
        end_date,
        approval_start_date,
        approval_end_date,
        updated_start_date,
        updated_end_date,
        page_size,
        policy_types,
        next,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'status': 'multi',
            'policy_types': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if status is not None:
            
            _query_params.append(('status', status))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if approval_start_date is not None:
            if isinstance(approval_start_date, datetime):
                _query_params.append(
                    (
                        'approval_start_date',
                        approval_start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('approval_start_date', approval_start_date))
            
        if approval_end_date is not None:
            if isinstance(approval_end_date, datetime):
                _query_params.append(
                    (
                        'approval_end_date',
                        approval_end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('approval_end_date', approval_end_date))
            
        if updated_start_date is not None:
            if isinstance(updated_start_date, datetime):
                _query_params.append(
                    (
                        'updated_start_date',
                        updated_start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_start_date', updated_start_date))
            
        if updated_end_date is not None:
            if isinstance(updated_end_date, datetime):
                _query_params.append(
                    (
                        'updated_end_date',
                        updated_end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_end_date', updated_end_date))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if policy_types is not None:
            
            _query_params.append(('policy_types', policy_types))
            
        if next is not None:
            
            _query_params.append(('next', next))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/time_offs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_time_off(
        self,
        time_off_id: Annotated[StrictStr, Field(description="Time off request id")],
        update_time_off_request: Annotated[UpdateTimeOffRequest, Field(description="Time off request data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateTimeOff200Response:
        """Update time-off request

        Update time-off request  **Token scopes**: `time-off:write`

        :param time_off_id: Time off request id (required)
        :type time_off_id: str
        :param update_time_off_request: Time off request data (required)
        :type update_time_off_request: UpdateTimeOffRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_time_off_serialize(
            time_off_id=time_off_id,
            update_time_off_request=update_time_off_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateTimeOff200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_time_off_with_http_info(
        self,
        time_off_id: Annotated[StrictStr, Field(description="Time off request id")],
        update_time_off_request: Annotated[UpdateTimeOffRequest, Field(description="Time off request data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateTimeOff200Response]:
        """Update time-off request

        Update time-off request  **Token scopes**: `time-off:write`

        :param time_off_id: Time off request id (required)
        :type time_off_id: str
        :param update_time_off_request: Time off request data (required)
        :type update_time_off_request: UpdateTimeOffRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_time_off_serialize(
            time_off_id=time_off_id,
            update_time_off_request=update_time_off_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateTimeOff200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_time_off_without_preload_content(
        self,
        time_off_id: Annotated[StrictStr, Field(description="Time off request id")],
        update_time_off_request: Annotated[UpdateTimeOffRequest, Field(description="Time off request data")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update time-off request

        Update time-off request  **Token scopes**: `time-off:write`

        :param time_off_id: Time off request id (required)
        :type time_off_id: str
        :param update_time_off_request: Time off request data (required)
        :type update_time_off_request: UpdateTimeOffRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_time_off_serialize(
            time_off_id=time_off_id,
            update_time_off_request=update_time_off_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateTimeOff200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_time_off_serialize(
        self,
        time_off_id,
        update_time_off_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if time_off_id is not None:
            _path_params['time_off_id'] = time_off_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_time_off_request is not None:
            _body_params = update_time_off_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/time_offs/{time_off_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


