# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from dima_test_sdk.models.create_contract_pgo_tak201_response import CreateContractPgoTak201Response
from dima_test_sdk.models.create_contract_pgo_tak_request import CreateContractPgoTakRequest
from dima_test_sdk.models.create_task_many_review201_response import CreateTaskManyReview201Response
from dima_test_sdk.models.create_task_many_review_request import CreateTaskManyReviewRequest
from dima_test_sdk.models.create_task_review_by_id201_response import CreateTaskReviewById201Response
from dima_test_sdk.models.create_task_review_by_id_request import CreateTaskReviewByIdRequest
from dima_test_sdk.models.delete_contract_task_by_id200_response import DeleteContractTaskById200Response
from dima_test_sdk.models.get_tasks_by_contract200_response import GetTasksByContract200Response

from dima_test_sdk.api_client import ApiClient, RequestSerialized
from dima_test_sdk.api_response import ApiResponse
from dima_test_sdk.rest import RESTResponseType


class TasksApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_contract_pgo_tak(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the task.")],
        create_contract_pgo_tak_request: CreateContractPgoTakRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateContractPgoTak201Response:
        """Create a new task

        Create a new task for a contractor associated with a specific Deel contract. A task can include details like amount, description, submission date.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the task. (required)
        :type contract_id: str
        :param create_contract_pgo_tak_request: (required)
        :type create_contract_pgo_tak_request: CreateContractPgoTakRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_contract_pgo_tak_serialize(
            contract_id=contract_id,
            create_contract_pgo_tak_request=create_contract_pgo_tak_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateContractPgoTak201Response",
            '400': "CreateContractPgoTak400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateContractPgoTak500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_contract_pgo_tak_with_http_info(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the task.")],
        create_contract_pgo_tak_request: CreateContractPgoTakRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateContractPgoTak201Response]:
        """Create a new task

        Create a new task for a contractor associated with a specific Deel contract. A task can include details like amount, description, submission date.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the task. (required)
        :type contract_id: str
        :param create_contract_pgo_tak_request: (required)
        :type create_contract_pgo_tak_request: CreateContractPgoTakRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_contract_pgo_tak_serialize(
            contract_id=contract_id,
            create_contract_pgo_tak_request=create_contract_pgo_tak_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateContractPgoTak201Response",
            '400': "CreateContractPgoTak400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateContractPgoTak500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_contract_pgo_tak_without_preload_content(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the task.")],
        create_contract_pgo_tak_request: CreateContractPgoTakRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new task

        Create a new task for a contractor associated with a specific Deel contract. A task can include details like amount, description, submission date.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the task. (required)
        :type contract_id: str
        :param create_contract_pgo_tak_request: (required)
        :type create_contract_pgo_tak_request: CreateContractPgoTakRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_contract_pgo_tak_serialize(
            contract_id=contract_id,
            create_contract_pgo_tak_request=create_contract_pgo_tak_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateContractPgoTak201Response",
            '400': "CreateContractPgoTak400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateContractPgoTak500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_contract_pgo_tak_serialize(
        self,
        contract_id,
        create_contract_pgo_tak_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contract_id is not None:
            _path_params['contract_id'] = contract_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_contract_pgo_tak_request is not None:
            _body_params = create_contract_pgo_tak_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/contracts/{contract_id}/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_task_many_review(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the tasks.")],
        create_task_many_review_request: CreateTaskManyReviewRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateTaskManyReview201Response:
        """Review multiple tasks

        Review multiple tasks associated with a Deel contract to approve or decline the submitted work. The review includes a status (approved or declined) for each task and an optional reason for declined tasks.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the tasks. (required)
        :type contract_id: str
        :param create_task_many_review_request: (required)
        :type create_task_many_review_request: CreateTaskManyReviewRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_task_many_review_serialize(
            contract_id=contract_id,
            create_task_many_review_request=create_task_many_review_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTaskManyReview201Response",
            '400': "CreateTaskManyReview400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "CreateTaskManyReview404Response",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateTaskManyReview500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_task_many_review_with_http_info(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the tasks.")],
        create_task_many_review_request: CreateTaskManyReviewRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateTaskManyReview201Response]:
        """Review multiple tasks

        Review multiple tasks associated with a Deel contract to approve or decline the submitted work. The review includes a status (approved or declined) for each task and an optional reason for declined tasks.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the tasks. (required)
        :type contract_id: str
        :param create_task_many_review_request: (required)
        :type create_task_many_review_request: CreateTaskManyReviewRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_task_many_review_serialize(
            contract_id=contract_id,
            create_task_many_review_request=create_task_many_review_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTaskManyReview201Response",
            '400': "CreateTaskManyReview400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "CreateTaskManyReview404Response",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateTaskManyReview500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_task_many_review_without_preload_content(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the tasks.")],
        create_task_many_review_request: CreateTaskManyReviewRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Review multiple tasks

        Review multiple tasks associated with a Deel contract to approve or decline the submitted work. The review includes a status (approved or declined) for each task and an optional reason for declined tasks.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the tasks. (required)
        :type contract_id: str
        :param create_task_many_review_request: (required)
        :type create_task_many_review_request: CreateTaskManyReviewRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_task_many_review_serialize(
            contract_id=contract_id,
            create_task_many_review_request=create_task_many_review_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTaskManyReview201Response",
            '400': "CreateTaskManyReview400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "CreateTaskManyReview404Response",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateTaskManyReview500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_task_many_review_serialize(
        self,
        contract_id,
        create_task_many_review_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contract_id is not None:
            _path_params['contract_id'] = contract_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_task_many_review_request is not None:
            _body_params = create_task_many_review_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/contracts/{contract_id}/tasks/many/reviews',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_task_review_by_id(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the task.")],
        task_id: Annotated[StrictStr, Field(description="The unique ID of the task to be reviewed.")],
        create_task_review_by_id_request: CreateTaskReviewByIdRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateTaskReviewById201Response:
        """Review a single task

        Review a specific task associated with a Deel contract to approve or decline the submitted work. The review includes the status (approved or declined) and an optional reason if declined.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the task. (required)
        :type contract_id: str
        :param task_id: The unique ID of the task to be reviewed. (required)
        :type task_id: str
        :param create_task_review_by_id_request: (required)
        :type create_task_review_by_id_request: CreateTaskReviewByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_task_review_by_id_serialize(
            contract_id=contract_id,
            task_id=task_id,
            create_task_review_by_id_request=create_task_review_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTaskReviewById201Response",
            '400': "CreateTaskManyReview400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "CreateTaskReviewById404Response",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateTaskReviewById500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_task_review_by_id_with_http_info(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the task.")],
        task_id: Annotated[StrictStr, Field(description="The unique ID of the task to be reviewed.")],
        create_task_review_by_id_request: CreateTaskReviewByIdRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateTaskReviewById201Response]:
        """Review a single task

        Review a specific task associated with a Deel contract to approve or decline the submitted work. The review includes the status (approved or declined) and an optional reason if declined.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the task. (required)
        :type contract_id: str
        :param task_id: The unique ID of the task to be reviewed. (required)
        :type task_id: str
        :param create_task_review_by_id_request: (required)
        :type create_task_review_by_id_request: CreateTaskReviewByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_task_review_by_id_serialize(
            contract_id=contract_id,
            task_id=task_id,
            create_task_review_by_id_request=create_task_review_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTaskReviewById201Response",
            '400': "CreateTaskManyReview400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "CreateTaskReviewById404Response",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateTaskReviewById500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_task_review_by_id_without_preload_content(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique Deel contract ID associated with the task.")],
        task_id: Annotated[StrictStr, Field(description="The unique ID of the task to be reviewed.")],
        create_task_review_by_id_request: CreateTaskReviewByIdRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Review a single task

        Review a specific task associated with a Deel contract to approve or decline the submitted work. The review includes the status (approved or declined) and an optional reason if declined.  **Token scopes**: `contracts:write`

        :param contract_id: The unique Deel contract ID associated with the task. (required)
        :type contract_id: str
        :param task_id: The unique ID of the task to be reviewed. (required)
        :type task_id: str
        :param create_task_review_by_id_request: (required)
        :type create_task_review_by_id_request: CreateTaskReviewByIdRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_task_review_by_id_serialize(
            contract_id=contract_id,
            task_id=task_id,
            create_task_review_by_id_request=create_task_review_by_id_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateTaskReviewById201Response",
            '400': "CreateTaskManyReview400Response",
            '401': "CreateContractPgoTak401Response",
            '403': "ApiErrorContainer",
            '404': "CreateTaskReviewById404Response",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "CreateTaskReviewById500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_task_review_by_id_serialize(
        self,
        contract_id,
        task_id,
        create_task_review_by_id_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contract_id is not None:
            _path_params['contract_id'] = contract_id
        if task_id is not None:
            _path_params['task_id'] = task_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_task_review_by_id_request is not None:
            _body_params = create_task_review_by_id_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/contracts/{contract_id}/tasks/{task_id}/reviews',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_contract_task_by_id(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique identifier of the Deel contract.")],
        task_id: Annotated[StrictStr, Field(description="The unique identifier of the task to be deleted.")],
        reason: Annotated[Optional[StrictStr], Field(description="The reason for deleting the task. This can be used for auditing purposes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteContractTaskById200Response:
        """Delete task

        Delete a specific task associated with the contract. Optionally, a reason can be provided for auditing or documentation purposes.  **Token scopes**: `contracts:write`

        :param contract_id: The unique identifier of the Deel contract. (required)
        :type contract_id: str
        :param task_id: The unique identifier of the task to be deleted. (required)
        :type task_id: str
        :param reason: The reason for deleting the task. This can be used for auditing purposes.
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_contract_task_by_id_serialize(
            contract_id=contract_id,
            task_id=task_id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteContractTaskById200Response",
            '400': None,
            '401': "ApiErrorContainer",
            '403': None,
            '404': None,
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_contract_task_by_id_with_http_info(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique identifier of the Deel contract.")],
        task_id: Annotated[StrictStr, Field(description="The unique identifier of the task to be deleted.")],
        reason: Annotated[Optional[StrictStr], Field(description="The reason for deleting the task. This can be used for auditing purposes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteContractTaskById200Response]:
        """Delete task

        Delete a specific task associated with the contract. Optionally, a reason can be provided for auditing or documentation purposes.  **Token scopes**: `contracts:write`

        :param contract_id: The unique identifier of the Deel contract. (required)
        :type contract_id: str
        :param task_id: The unique identifier of the task to be deleted. (required)
        :type task_id: str
        :param reason: The reason for deleting the task. This can be used for auditing purposes.
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_contract_task_by_id_serialize(
            contract_id=contract_id,
            task_id=task_id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteContractTaskById200Response",
            '400': None,
            '401': "ApiErrorContainer",
            '403': None,
            '404': None,
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_contract_task_by_id_without_preload_content(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique identifier of the Deel contract.")],
        task_id: Annotated[StrictStr, Field(description="The unique identifier of the task to be deleted.")],
        reason: Annotated[Optional[StrictStr], Field(description="The reason for deleting the task. This can be used for auditing purposes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete task

        Delete a specific task associated with the contract. Optionally, a reason can be provided for auditing or documentation purposes.  **Token scopes**: `contracts:write`

        :param contract_id: The unique identifier of the Deel contract. (required)
        :type contract_id: str
        :param task_id: The unique identifier of the task to be deleted. (required)
        :type task_id: str
        :param reason: The reason for deleting the task. This can be used for auditing purposes.
        :type reason: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_contract_task_by_id_serialize(
            contract_id=contract_id,
            task_id=task_id,
            reason=reason,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteContractTaskById200Response",
            '400': None,
            '401': "ApiErrorContainer",
            '403': None,
            '404': None,
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_contract_task_by_id_serialize(
        self,
        contract_id,
        task_id,
        reason,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contract_id is not None:
            _path_params['contract_id'] = contract_id
        if task_id is not None:
            _path_params['task_id'] = task_id
        # process the query parameters
        if reason is not None:
            
            _query_params.append(('reason', reason))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/contracts/{contract_id}/tasks/{task_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_tasks_by_contract(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique identifier for the Deel contract.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetTasksByContract200Response:
        """List of tasks

        Retrieve a list of tasks associated with a specific contract. Each task contains details such as its ID, amount, submission date, status, and description. This endpoint is useful for tracking the progress and status of tasks related to contracts.  **Token scopes**: `contracts:read`

        :param contract_id: The unique identifier for the Deel contract. (required)
        :type contract_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tasks_by_contract_serialize(
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTasksByContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_tasks_by_contract_with_http_info(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique identifier for the Deel contract.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetTasksByContract200Response]:
        """List of tasks

        Retrieve a list of tasks associated with a specific contract. Each task contains details such as its ID, amount, submission date, status, and description. This endpoint is useful for tracking the progress and status of tasks related to contracts.  **Token scopes**: `contracts:read`

        :param contract_id: The unique identifier for the Deel contract. (required)
        :type contract_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tasks_by_contract_serialize(
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTasksByContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_tasks_by_contract_without_preload_content(
        self,
        contract_id: Annotated[StrictStr, Field(description="The unique identifier for the Deel contract.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of tasks

        Retrieve a list of tasks associated with a specific contract. Each task contains details such as its ID, amount, submission date, status, and description. This endpoint is useful for tracking the progress and status of tasks related to contracts.  **Token scopes**: `contracts:read`

        :param contract_id: The unique identifier for the Deel contract. (required)
        :type contract_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_tasks_by_contract_serialize(
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetTasksByContract200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '405': "ApiErrorContainer",
            '429': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_tasks_by_contract_serialize(
        self,
        contract_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if contract_id is not None:
            _path_params['contract_id'] = contract_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/contracts/{contract_id}/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


