# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.get_bank_transfer_requirements200_response_data_inner_fields_inner_group_inner_values_allowed_inner import GetBankTransferRequirements200ResponseDataInnerFieldsInnerGroupInnerValuesAllowedInner
from typing import Optional, Set
from typing_extensions import Self

class GetBankTransferRequirements200ResponseDataInnerFieldsInnerGroupInner(BaseModel):
    """
    GetBankTransferRequirements200ResponseDataInnerFieldsInnerGroupInner
    """ # noqa: E501
    key: StrictStr = Field(description="The key of the field in the method creaion payload")
    name: StrictStr = Field(description="User facing name of property")
    type: StrictStr = Field(description="The type of the field, such as text, radio, select, or date_local.")
    example: Optional[StrictStr] = Field(default=None, description="Example value for the field")
    required: StrictBool = Field(description="Whether the field is required")
    max_length: Optional[StrictInt] = Field(default=None, description="The maximum length of the field")
    values_allowed: Optional[List[GetBankTransferRequirements200ResponseDataInnerFieldsInnerGroupInnerValuesAllowedInner]] = Field(default=None, description="An array of allowed values with corresponding key and name.")
    validation_regexp: Optional[StrictStr] = Field(default=None, description="The regular expression to validate the field")
    refresh_requirements_on_change: Optional[StrictBool] = Field(default=None, description="Whether to refresh the requirements when the field value changes with field key as query parameter")
    __properties: ClassVar[List[str]] = ["key", "name", "type", "example", "required", "max_length", "values_allowed", "validation_regexp", "refresh_requirements_on_change"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['text', 'radio', 'select', 'date_local']):
            raise ValueError("must be one of enum values ('text', 'radio', 'select', 'date_local')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBankTransferRequirements200ResponseDataInnerFieldsInnerGroupInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values_allowed (list)
        _items = []
        if self.values_allowed:
            for _item_values_allowed in self.values_allowed:
                if _item_values_allowed:
                    _items.append(_item_values_allowed.to_dict())
            _dict['values_allowed'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBankTransferRequirements200ResponseDataInnerFieldsInnerGroupInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "example": obj.get("example"),
            "required": obj.get("required"),
            "max_length": obj.get("max_length"),
            "values_allowed": [GetBankTransferRequirements200ResponseDataInnerFieldsInnerGroupInnerValuesAllowedInner.from_dict(_item) for _item in obj["values_allowed"]] if obj.get("values_allowed") is not None else None,
            "validation_regexp": obj.get("validation_regexp"),
            "refresh_requirements_on_change": obj.get("refresh_requirements_on_change")
        })
        return _obj


