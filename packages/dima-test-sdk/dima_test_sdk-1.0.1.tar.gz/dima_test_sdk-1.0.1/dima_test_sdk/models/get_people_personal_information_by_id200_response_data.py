# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_test_sdk.models.get_people_personal_information_by_id200_response_data_addresses_inner import GetPeoplePersonalInformationById200ResponseDataAddressesInner
from dima_test_sdk.models.get_people_personal_information_by_id200_response_data_demographics import GetPeoplePersonalInformationById200ResponseDataDemographics
from dima_test_sdk.models.get_people_personal_information_by_id200_response_data_emergency_contacts_inner import GetPeoplePersonalInformationById200ResponseDataEmergencyContactsInner
from dima_test_sdk.models.get_people_personal_information_by_id200_response_data_kyc import GetPeoplePersonalInformationById200ResponseDataKyc
from dima_test_sdk.models.get_people_personal_information_by_id200_response_data_nationalities_inner import GetPeoplePersonalInformationById200ResponseDataNationalitiesInner
from dima_test_sdk.models.get_people_personal_information_by_id200_response_data_ooo import GetPeoplePersonalInformationById200ResponseDataOoo
from dima_test_sdk.models.get_people_personal_information_by_id200_response_data_phone_numbers_inner import GetPeoplePersonalInformationById200ResponseDataPhoneNumbersInner
from typing import Optional, Set
from typing_extensions import Self

class GetPeoplePersonalInformationById200ResponseData(BaseModel):
    """
    GetPeoplePersonalInformationById200ResponseData
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the worker.")
    kyc: Optional[GetPeoplePersonalInformationById200ResponseDataKyc] = None
    ooo: Optional[GetPeoplePersonalInformationById200ResponseDataOoo] = None
    addresses: List[GetPeoplePersonalInformationById200ResponseDataAddressesInner]
    worker_id: StrictInt = Field(description="The worker id.")
    work_email: Annotated[str, Field(strict=True, max_length=255)] = Field(description="The work email of the worker.")
    external_id: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="The external id of the worker.")
    demographics: GetPeoplePersonalInformationById200ResponseDataDemographics
    date_of_birth: date = Field(description="The date of birth of the worker.")
    nationalities: List[GetPeoplePersonalInformationById200ResponseDataNationalitiesInner]
    phone_numbers: List[GetPeoplePersonalInformationById200ResponseDataPhoneNumbersInner]
    personal_email: Annotated[str, Field(strict=True, max_length=255)] = Field(description="The personal email of the worker.")
    preferred_name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="The preferred name of the worker.")
    legal_last_name: Annotated[str, Field(strict=True, max_length=100)] = Field(description="The legal last name of the worker.")
    legal_first_name: Annotated[str, Field(strict=True, max_length=100)] = Field(description="The legal first name of the worker.")
    emergency_contacts: List[GetPeoplePersonalInformationById200ResponseDataEmergencyContactsInner]
    __properties: ClassVar[List[str]] = ["id", "kyc", "ooo", "addresses", "worker_id", "work_email", "external_id", "demographics", "date_of_birth", "nationalities", "phone_numbers", "personal_email", "preferred_name", "legal_last_name", "legal_first_name", "emergency_contacts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetPeoplePersonalInformationById200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of kyc
        if self.kyc:
            _dict['kyc'] = self.kyc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ooo
        if self.ooo:
            _dict['ooo'] = self.ooo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of demographics
        if self.demographics:
            _dict['demographics'] = self.demographics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nationalities (list)
        _items = []
        if self.nationalities:
            for _item_nationalities in self.nationalities:
                if _item_nationalities:
                    _items.append(_item_nationalities.to_dict())
            _dict['nationalities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item_phone_numbers in self.phone_numbers:
                if _item_phone_numbers:
                    _items.append(_item_phone_numbers.to_dict())
            _dict['phone_numbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in emergency_contacts (list)
        _items = []
        if self.emergency_contacts:
            for _item_emergency_contacts in self.emergency_contacts:
                if _item_emergency_contacts:
                    _items.append(_item_emergency_contacts.to_dict())
            _dict['emergency_contacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetPeoplePersonalInformationById200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "kyc": GetPeoplePersonalInformationById200ResponseDataKyc.from_dict(obj["kyc"]) if obj.get("kyc") is not None else None,
            "ooo": GetPeoplePersonalInformationById200ResponseDataOoo.from_dict(obj["ooo"]) if obj.get("ooo") is not None else None,
            "addresses": [GetPeoplePersonalInformationById200ResponseDataAddressesInner.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "worker_id": obj.get("worker_id"),
            "work_email": obj.get("work_email"),
            "external_id": obj.get("external_id"),
            "demographics": GetPeoplePersonalInformationById200ResponseDataDemographics.from_dict(obj["demographics"]) if obj.get("demographics") is not None else None,
            "date_of_birth": obj.get("date_of_birth"),
            "nationalities": [GetPeoplePersonalInformationById200ResponseDataNationalitiesInner.from_dict(_item) for _item in obj["nationalities"]] if obj.get("nationalities") is not None else None,
            "phone_numbers": [GetPeoplePersonalInformationById200ResponseDataPhoneNumbersInner.from_dict(_item) for _item in obj["phone_numbers"]] if obj.get("phone_numbers") is not None else None,
            "personal_email": obj.get("personal_email"),
            "preferred_name": obj.get("preferred_name"),
            "legal_last_name": obj.get("legal_last_name"),
            "legal_first_name": obj.get("legal_first_name"),
            "emergency_contacts": [GetPeoplePersonalInformationById200ResponseDataEmergencyContactsInner.from_dict(_item) for _item in obj["emergency_contacts"]] if obj.get("emergency_contacts") is not None else None
        })
        return _obj


