# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.immigration_case_details200_response_data_inner_applicant import ImmigrationCaseDetails200ResponseDataInnerApplicant
from dima_test_sdk.models.immigration_case_details200_response_data_inner_documents_inner import ImmigrationCaseDetails200ResponseDataInnerDocumentsInner
from dima_test_sdk.models.immigration_case_details200_response_data_inner_process import ImmigrationCaseDetails200ResponseDataInnerProcess
from typing import Optional, Set
from typing_extensions import Self

class ImmigrationCaseDetails200ResponseDataInner(BaseModel):
    """
    ImmigrationCaseDetails200ResponseDataInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of immigration case.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the immigration case.")
    process: Optional[ImmigrationCaseDetails200ResponseDataInnerProcess] = None
    applicant: Optional[ImmigrationCaseDetails200ResponseDataInnerApplicant] = None
    case_type: Optional[StrictStr] = Field(default=None, description="Name of the case type")
    documents: Optional[List[ImmigrationCaseDetails200ResponseDataInnerDocumentsInner]] = None
    visa_type: Optional[StrictStr] = Field(default=None, description="The type of the the visa.")
    country_code: Optional[StrictStr] = Field(default=None, description="The country of the immigration case.")
    last_update_at: Optional[datetime] = Field(default=None, description="Last activity on the immigration case.")
    case_created_at: Optional[datetime] = Field(default=None, description="Creation date of the immigration case.")
    estimated_completion_date: Optional[datetime] = Field(default=None, description="Estimated completion date of the immigration case.")
    __properties: ClassVar[List[str]] = ["id", "status", "process", "applicant", "case_type", "documents", "visa_type", "country_code", "last_update_at", "case_created_at", "estimated_completion_date"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPEN', 'CLOSED', 'ON_HOLD']):
            raise ValueError("must be one of enum values ('OPEN', 'CLOSED', 'ON_HOLD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImmigrationCaseDetails200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        # override the default output from pydantic by calling `to_dict()` of applicant
        if self.applicant:
            _dict['applicant'] = self.applicant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        # set to None if applicant (nullable) is None
        # and model_fields_set contains the field
        if self.applicant is None and "applicant" in self.model_fields_set:
            _dict['applicant'] = None

        # set to None if visa_type (nullable) is None
        # and model_fields_set contains the field
        if self.visa_type is None and "visa_type" in self.model_fields_set:
            _dict['visa_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImmigrationCaseDetails200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "process": ImmigrationCaseDetails200ResponseDataInnerProcess.from_dict(obj["process"]) if obj.get("process") is not None else None,
            "applicant": ImmigrationCaseDetails200ResponseDataInnerApplicant.from_dict(obj["applicant"]) if obj.get("applicant") is not None else None,
            "case_type": obj.get("case_type"),
            "documents": [ImmigrationCaseDetails200ResponseDataInnerDocumentsInner.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "visa_type": obj.get("visa_type"),
            "country_code": obj.get("country_code"),
            "last_update_at": obj.get("last_update_at"),
            "case_created_at": obj.get("case_created_at"),
            "estimated_completion_date": obj.get("estimated_completion_date")
        })
        return _obj


