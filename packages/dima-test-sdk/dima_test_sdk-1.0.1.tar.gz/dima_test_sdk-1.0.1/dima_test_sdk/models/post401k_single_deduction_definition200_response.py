# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Post401kSingleDeductionDefinition200Response(BaseModel):
    """
    Post401kSingleDeductionDefinition200Response
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the recurring item.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of the recurring item.")
    end_date: Optional[datetime] = Field(default=None, description="End date of the recurring item, if applicable.")
    is_active: Optional[StrictBool] = Field(default=None, description="Indicates whether the recurring item is active.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the item was created.")
    start_date: Optional[datetime] = Field(default=None, description="Start date of the recurring item.")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp when the item was last updated.")
    employment_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the employment associated with the item.")
    payroll_report_column_id: Optional[StrictStr] = Field(default=None, description="Identifier for the payroll report column related to this item.")
    __properties: ClassVar[List[str]] = ["id", "amount", "end_date", "is_active", "created_at", "start_date", "updated_at", "employment_id", "payroll_report_column_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Post401kSingleDeductionDefinition200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Post401kSingleDeductionDefinition200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "amount": obj.get("amount"),
            "end_date": obj.get("end_date"),
            "is_active": obj.get("is_active"),
            "created_at": obj.get("created_at"),
            "start_date": obj.get("start_date"),
            "updated_at": obj.get("updated_at"),
            "employment_id": obj.get("employment_id"),
            "payroll_report_column_id": obj.get("payroll_report_column_id")
        })
        return _obj


