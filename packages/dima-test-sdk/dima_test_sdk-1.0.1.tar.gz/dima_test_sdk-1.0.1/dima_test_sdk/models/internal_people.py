# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.employment import Employment
from dima_test_sdk.models.monthly_payment import MonthlyPayment
from dima_test_sdk.models.payment import Payment
from dima_test_sdk.models.people_client_legal_entity import PeopleClientLegalEntity
from typing import Optional, Set
from typing_extensions import Self

class InternalPeople(BaseModel):
    """
    People object representing a Deel
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the user")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the user")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the user")
    full_name: Optional[StrictStr] = Field(default=None, description="Full name of the user")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the user")
    work_email: Optional[StrictStr] = Field(default=None, description="Work email address of the user")
    personal_email: Optional[StrictStr] = Field(default=None, description="Personal email address of the user")
    country_name: Optional[StrictStr] = Field(default=None, description="Name of the country where the user is located")
    birth_date: Optional[StrictStr] = Field(default=None, description="Date of birth of the user in ISO format (yyyy-mm-dd)")
    pic_url: Optional[StrictStr] = Field(default=None, description="URL of the user's profile picture")
    start_date: Optional[StrictStr] = Field(default=None, description="Date when the user started their current employment in ISO format (yyyy-mm-dd)")
    payments: Optional[List[Payment]] = Field(default=None, description="List of payment objects representing the user's payment history")
    hourly_report_total: Optional[StrictStr] = Field(default=None, description="Total amount of hours worked by the user in ISO format (hh:mm:ss)")
    client_legal_entity: Optional[PeopleClientLegalEntity] = None
    state: Optional[StrictStr] = Field(default=None, description="State where the user is located")
    seniority: Optional[StrictStr] = Field(default=None, description="Seniority level of the user's role")
    completion_date: Optional[StrictStr] = Field(default=None, description="Date when the user's current employment is expected to end in ISO format (yyyy-mm-ddThh:mm:ss.sssZ)")
    monthly_payment: Optional[MonthlyPayment] = None
    direct_manager: Optional[StrictStr] = Field(default=None, description="Name of the user's direct manager")
    direct_reports: Optional[StrictStr] = Field(default=None, description="Names of the user's direct reports")
    direct_reports_count: Optional[StrictInt] = Field(default=None, description="Number of direct reports that the user has")
    employments: Optional[List[Employment]] = Field(default=None, description="List of employment objects representing the user's employment history")
    hiring_status: Optional[StrictStr] = Field(default=None, description="Hiring status of the user")
    hiring_type: Optional[StrictStr] = Field(default=None, description="Type of employment contract that the user has")
    job_title: Optional[StrictStr] = Field(default=None, description="Title of the user's role")
    country: Optional[StrictStr] = Field(default=None, description="ISO 3166-1 alpha-2 code of the country where the user is located")
    team_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the team that the user belongs to")
    team: Optional[StrictStr] = Field(default=None, description="Name of the team that the user belongs to")
    timezone: Optional[StrictStr] = Field(default=None, description="Time zone of the user's location")
    department: Optional[StrictStr] = Field(default=None, description="Name of the department that the user belongs to")
    work_location: Optional[StrictStr] = Field(default=None, description="Name of the user's work location")
    contract_types: Optional[List[StrictStr]] = Field(default=None, description="List of contract types that the user has had in the past and/or currently has")
    has_deel_user: Optional[StrictBool] = Field(default=None, description="Indicates whether the user has a Deel account or not")
    __properties: ClassVar[List[str]] = ["id", "first_name", "last_name", "full_name", "email", "work_email", "personal_email", "country_name", "birth_date", "pic_url", "start_date", "payments", "hourly_report_total", "client_legal_entity", "state", "seniority", "completion_date", "monthly_payment", "direct_manager", "direct_reports", "direct_reports_count", "employments", "hiring_status", "hiring_type", "job_title", "country", "team_id", "team", "timezone", "department", "work_location", "contract_types", "has_deel_user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InternalPeople from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of client_legal_entity
        if self.client_legal_entity:
            _dict['client_legal_entity'] = self.client_legal_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_payment
        if self.monthly_payment:
            _dict['monthly_payment'] = self.monthly_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in employments (list)
        _items = []
        if self.employments:
            for _item_employments in self.employments:
                if _item_employments:
                    _items.append(_item_employments.to_dict())
            _dict['employments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InternalPeople from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "full_name": obj.get("full_name"),
            "email": obj.get("email"),
            "work_email": obj.get("work_email"),
            "personal_email": obj.get("personal_email"),
            "country_name": obj.get("country_name"),
            "birth_date": obj.get("birth_date"),
            "pic_url": obj.get("pic_url"),
            "start_date": obj.get("start_date"),
            "payments": [Payment.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "hourly_report_total": obj.get("hourly_report_total"),
            "client_legal_entity": PeopleClientLegalEntity.from_dict(obj["client_legal_entity"]) if obj.get("client_legal_entity") is not None else None,
            "state": obj.get("state"),
            "seniority": obj.get("seniority"),
            "completion_date": obj.get("completion_date"),
            "monthly_payment": MonthlyPayment.from_dict(obj["monthly_payment"]) if obj.get("monthly_payment") is not None else None,
            "direct_manager": obj.get("direct_manager"),
            "direct_reports": obj.get("direct_reports"),
            "direct_reports_count": obj.get("direct_reports_count"),
            "employments": [Employment.from_dict(_item) for _item in obj["employments"]] if obj.get("employments") is not None else None,
            "hiring_status": obj.get("hiring_status"),
            "hiring_type": obj.get("hiring_type"),
            "job_title": obj.get("job_title"),
            "country": obj.get("country"),
            "team_id": obj.get("team_id"),
            "team": obj.get("team"),
            "timezone": obj.get("timezone"),
            "department": obj.get("department"),
            "work_location": obj.get("work_location"),
            "contract_types": obj.get("contract_types"),
            "has_deel_user": obj.get("has_deel_user")
        })
        return _obj


