# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_test_sdk.models.update_eor_contract_request_data_benefits_inner import UpdateEorContractRequestDataBenefitsInner
from dima_test_sdk.models.update_eor_contract_request_data_employee_address import UpdateEorContractRequestDataEmployeeAddress
from dima_test_sdk.models.update_eor_contract_request_data_quote_additional_fields import UpdateEorContractRequestDataQuoteAdditionalFields
from dima_test_sdk.models.update_eor_contract_request_data_work_eligibility import UpdateEorContractRequestDataWorkEligibility
from typing import Optional, Set
from typing_extensions import Self

class UpdateEorContractRequestData(BaseModel):
    """
    UpdateEorContractRequestData
    """ # noqa: E501
    scope: Optional[StrictStr] = Field(default=None, description="Job scope description")
    salary: Union[Annotated[float, Field(le=9999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(description="Annual salary amount")
    benefits: Optional[List[UpdateEorContractRequestDataBenefitsInner]] = Field(default=None, description="Array of employee benefits")
    currency: Optional[StrictStr] = Field(default=None, description="Currency code for salary and benefits")
    end_date: Optional[date] = Field(default=None, description="Employment end date")
    holidays: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Number of holiday days per year")
    is_hourly: Optional[StrictBool] = Field(default=None, description="Indicates if compensation is hourly")
    job_title: StrictStr = Field(description="Job title (cannot be C-level position)")
    work_visa: Optional[StrictBool] = Field(default=None, description="Indicates if work visa is required")
    start_date: date = Field(description="Employment start date")
    employee_id: Optional[StrictStr] = Field(default=None, description="Employee's unique identifier")
    hourly_rate: Optional[Union[Annotated[float, Field(le=9999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="Hourly rate (required if is_hourly is true)")
    is_resubmit: Optional[StrictBool] = Field(default=None, description="Indicates if this is a resubmission")
    schedule_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the employee's work schedule")
    seniority_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Seniority level identifier")
    work_pension: Optional[StrictBool] = Field(default=None, description="Indicates if work pension is included")
    signing_bonus: Optional[Union[Annotated[float, Field(le=9999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="Signing bonus amount")
    time_off_type: Optional[StrictStr] = Field(default=None, description="Type of time off")
    employee_email: StrictStr = Field(description="Employee's email address")
    seniority_date: Optional[date] = Field(default=None, description="Employee seniority date")
    employment_type: StrictStr = Field(description="Type of employment")
    sick_leave_days: Optional[Union[Annotated[float, Field(le=90, strict=True, ge=0)], Annotated[int, Field(le=90, strict=True, ge=0)]]] = Field(default=None, description="Number of sick leave days per year")
    employee_address: Optional[UpdateEorContractRequestDataEmployeeAddress] = None
    employment_state: Optional[StrictStr] = Field(default=None, description="State/Province of employment")
    hiring_objective: Optional[StrictStr] = Field(default=None, description="Objective for hiring")
    probation_period: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Probation period duration")
    work_arrangement: Optional[StrictStr] = Field(default=None, description="Work arrangement type")
    work_eligibility: Optional[UpdateEorContractRequestDataWorkEligibility] = None
    medical_insurance: Optional[StrictBool] = Field(default=None, description="Medical insurance coverage")
    contract_term_type: Optional[StrictStr] = Field(default=None, description="Type of contract term")
    employee_last_name: StrictStr = Field(description="Employee's last name")
    employment_country: StrictStr = Field(description="Country of employment")
    notice_period_type: Optional[StrictStr] = Field(default=None, description="Type of notice period")
    employee_first_name: StrictStr = Field(description="Employee's first name")
    work_hours_per_week: Optional[Union[Annotated[float, Field(le=168, strict=True, ge=0)], Annotated[int, Field(le=168, strict=True, ge=0)]]] = Field(default=None, description="Working hours per week")
    employee_nationality: Optional[StrictStr] = Field(default=None, description="Employee's nationality")
    reason_for_fixed_term: Optional[StrictStr] = Field(default=None, description="Reason for fixed-term contract")
    quote_additional_fields: Optional[UpdateEorContractRequestDataQuoteAdditionalFields] = None
    signing_bonus_payout_type: Optional[StrictStr] = Field(default='FIRST_CYCLE', description="Determines when the signing bonus will be paid out")
    hiring_objective_extra_info: Optional[StrictStr] = Field(default=None, description="Additional information about hiring objective")
    notice_period_after_probation: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Notice period after probation (days)")
    notice_period_during_probation: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Notice period during probation (days)")
    is_auto_quote_validation_passed: Optional[StrictBool] = Field(default=None, description="Auto quote validation status")
    probation_period_type_for_definite: Optional[StrictStr] = Field(default=None, description="Unit of time for probation period")
    allow_consultant_equipment_reimbursement: Optional[StrictBool] = Field(default=None, description="Allow equipment reimbursement for consultants")
    __properties: ClassVar[List[str]] = ["scope", "salary", "benefits", "currency", "end_date", "holidays", "is_hourly", "job_title", "work_visa", "start_date", "employee_id", "hourly_rate", "is_resubmit", "schedule_id", "seniority_id", "work_pension", "signing_bonus", "time_off_type", "employee_email", "seniority_date", "employment_type", "sick_leave_days", "employee_address", "employment_state", "hiring_objective", "probation_period", "work_arrangement", "work_eligibility", "medical_insurance", "contract_term_type", "employee_last_name", "employment_country", "notice_period_type", "employee_first_name", "work_hours_per_week", "employee_nationality", "reason_for_fixed_term", "quote_additional_fields", "signing_bonus_payout_type", "hiring_objective_extra_info", "notice_period_after_probation", "notice_period_during_probation", "is_auto_quote_validation_passed", "probation_period_type_for_definite", "allow_consultant_equipment_reimbursement"]

    @field_validator('time_off_type')
    def time_off_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'SPECIFIC', 'PRORATED']):
            raise ValueError("must be one of enum values ('STANDARD', 'SPECIFIC', 'PRORATED')")
        return value

    @field_validator('employment_type')
    def employment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Full-time', 'Part-time']):
            raise ValueError("must be one of enum values ('Full-time', 'Part-time')")
        return value

    @field_validator('hiring_objective')
    def hiring_objective_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPANDING_TO_NEW_COUNTRY', 'TEMP_EOR_OPENING_ENTITY', 'ONE_OFF_HIRE', 'CONVERTING_CONTRACTOR', 'OTHER']):
            raise ValueError("must be one of enum values ('EXPANDING_TO_NEW_COUNTRY', 'TEMP_EOR_OPENING_ENTITY', 'ONE_OFF_HIRE', 'CONVERTING_CONTRACTOR', 'OTHER')")
        return value

    @field_validator('work_arrangement')
    def work_arrangement_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REMOTE', 'ON_SITE_OR_HYBRID']):
            raise ValueError("must be one of enum values ('REMOTE', 'ON_SITE_OR_HYBRID')")
        return value

    @field_validator('contract_term_type')
    def contract_term_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFINITE', 'INDEFINITE']):
            raise ValueError("must be one of enum values ('DEFINITE', 'INDEFINITE')")
        return value

    @field_validator('notice_period_type')
    def notice_period_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'CUSTOM']):
            raise ValueError("must be one of enum values ('STANDARD', 'CUSTOM')")
        return value

    @field_validator('reason_for_fixed_term')
    def reason_for_fixed_term_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEASONAL_OR_TEMPORARY_WORK', 'PROJECT_BASED_EMPLOYMENT', 'REPLACEMENT_FOR_PERMANENT_STAFF', 'TRIAL_PERIODS_FOR_NEW_ROLES_OR_BUSINESSES']):
            raise ValueError("must be one of enum values ('SEASONAL_OR_TEMPORARY_WORK', 'PROJECT_BASED_EMPLOYMENT', 'REPLACEMENT_FOR_PERMANENT_STAFF', 'TRIAL_PERIODS_FOR_NEW_ROLES_OR_BUSINESSES')")
        return value

    @field_validator('signing_bonus_payout_type')
    def signing_bonus_payout_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIRST_CYCLE', 'AFTER_PROBATION', 'AFTER_FIRST_CONTRACT_ANNIVERSARY']):
            raise ValueError("must be one of enum values ('FIRST_CYCLE', 'AFTER_PROBATION', 'AFTER_FIRST_CONTRACT_ANNIVERSARY')")
        return value

    @field_validator('probation_period_type_for_definite')
    def probation_period_type_for_definite_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CUSTOM', 'STANDARD']):
            raise ValueError("must be one of enum values ('CUSTOM', 'STANDARD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateEorContractRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in benefits (list)
        _items = []
        if self.benefits:
            for _item_benefits in self.benefits:
                if _item_benefits:
                    _items.append(_item_benefits.to_dict())
            _dict['benefits'] = _items
        # override the default output from pydantic by calling `to_dict()` of employee_address
        if self.employee_address:
            _dict['employee_address'] = self.employee_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_eligibility
        if self.work_eligibility:
            _dict['work_eligibility'] = self.work_eligibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_additional_fields
        if self.quote_additional_fields:
            _dict['quote_additional_fields'] = self.quote_additional_fields.to_dict()
        # set to None if benefits (nullable) is None
        # and model_fields_set contains the field
        if self.benefits is None and "benefits" in self.model_fields_set:
            _dict['benefits'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        # set to None if holidays (nullable) is None
        # and model_fields_set contains the field
        if self.holidays is None and "holidays" in self.model_fields_set:
            _dict['holidays'] = None

        # set to None if is_hourly (nullable) is None
        # and model_fields_set contains the field
        if self.is_hourly is None and "is_hourly" in self.model_fields_set:
            _dict['is_hourly'] = None

        # set to None if work_visa (nullable) is None
        # and model_fields_set contains the field
        if self.work_visa is None and "work_visa" in self.model_fields_set:
            _dict['work_visa'] = None

        # set to None if hourly_rate (nullable) is None
        # and model_fields_set contains the field
        if self.hourly_rate is None and "hourly_rate" in self.model_fields_set:
            _dict['hourly_rate'] = None

        # set to None if is_resubmit (nullable) is None
        # and model_fields_set contains the field
        if self.is_resubmit is None and "is_resubmit" in self.model_fields_set:
            _dict['is_resubmit'] = None

        # set to None if schedule_id (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_id is None and "schedule_id" in self.model_fields_set:
            _dict['schedule_id'] = None

        # set to None if work_pension (nullable) is None
        # and model_fields_set contains the field
        if self.work_pension is None and "work_pension" in self.model_fields_set:
            _dict['work_pension'] = None

        # set to None if signing_bonus (nullable) is None
        # and model_fields_set contains the field
        if self.signing_bonus is None and "signing_bonus" in self.model_fields_set:
            _dict['signing_bonus'] = None

        # set to None if sick_leave_days (nullable) is None
        # and model_fields_set contains the field
        if self.sick_leave_days is None and "sick_leave_days" in self.model_fields_set:
            _dict['sick_leave_days'] = None

        # set to None if employment_state (nullable) is None
        # and model_fields_set contains the field
        if self.employment_state is None and "employment_state" in self.model_fields_set:
            _dict['employment_state'] = None

        # set to None if probation_period (nullable) is None
        # and model_fields_set contains the field
        if self.probation_period is None and "probation_period" in self.model_fields_set:
            _dict['probation_period'] = None

        # set to None if work_arrangement (nullable) is None
        # and model_fields_set contains the field
        if self.work_arrangement is None and "work_arrangement" in self.model_fields_set:
            _dict['work_arrangement'] = None

        # set to None if reason_for_fixed_term (nullable) is None
        # and model_fields_set contains the field
        if self.reason_for_fixed_term is None and "reason_for_fixed_term" in self.model_fields_set:
            _dict['reason_for_fixed_term'] = None

        # set to None if signing_bonus_payout_type (nullable) is None
        # and model_fields_set contains the field
        if self.signing_bonus_payout_type is None and "signing_bonus_payout_type" in self.model_fields_set:
            _dict['signing_bonus_payout_type'] = None

        # set to None if hiring_objective_extra_info (nullable) is None
        # and model_fields_set contains the field
        if self.hiring_objective_extra_info is None and "hiring_objective_extra_info" in self.model_fields_set:
            _dict['hiring_objective_extra_info'] = None

        # set to None if is_auto_quote_validation_passed (nullable) is None
        # and model_fields_set contains the field
        if self.is_auto_quote_validation_passed is None and "is_auto_quote_validation_passed" in self.model_fields_set:
            _dict['is_auto_quote_validation_passed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateEorContractRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scope": obj.get("scope"),
            "salary": obj.get("salary"),
            "benefits": [UpdateEorContractRequestDataBenefitsInner.from_dict(_item) for _item in obj["benefits"]] if obj.get("benefits") is not None else None,
            "currency": obj.get("currency"),
            "end_date": obj.get("end_date"),
            "holidays": obj.get("holidays"),
            "is_hourly": obj.get("is_hourly"),
            "job_title": obj.get("job_title"),
            "work_visa": obj.get("work_visa"),
            "start_date": obj.get("start_date"),
            "employee_id": obj.get("employee_id"),
            "hourly_rate": obj.get("hourly_rate"),
            "is_resubmit": obj.get("is_resubmit"),
            "schedule_id": obj.get("schedule_id"),
            "seniority_id": obj.get("seniority_id"),
            "work_pension": obj.get("work_pension"),
            "signing_bonus": obj.get("signing_bonus"),
            "time_off_type": obj.get("time_off_type"),
            "employee_email": obj.get("employee_email"),
            "seniority_date": obj.get("seniority_date"),
            "employment_type": obj.get("employment_type"),
            "sick_leave_days": obj.get("sick_leave_days"),
            "employee_address": UpdateEorContractRequestDataEmployeeAddress.from_dict(obj["employee_address"]) if obj.get("employee_address") is not None else None,
            "employment_state": obj.get("employment_state"),
            "hiring_objective": obj.get("hiring_objective"),
            "probation_period": obj.get("probation_period"),
            "work_arrangement": obj.get("work_arrangement"),
            "work_eligibility": UpdateEorContractRequestDataWorkEligibility.from_dict(obj["work_eligibility"]) if obj.get("work_eligibility") is not None else None,
            "medical_insurance": obj.get("medical_insurance"),
            "contract_term_type": obj.get("contract_term_type"),
            "employee_last_name": obj.get("employee_last_name"),
            "employment_country": obj.get("employment_country"),
            "notice_period_type": obj.get("notice_period_type"),
            "employee_first_name": obj.get("employee_first_name"),
            "work_hours_per_week": obj.get("work_hours_per_week"),
            "employee_nationality": obj.get("employee_nationality"),
            "reason_for_fixed_term": obj.get("reason_for_fixed_term"),
            "quote_additional_fields": UpdateEorContractRequestDataQuoteAdditionalFields.from_dict(obj["quote_additional_fields"]) if obj.get("quote_additional_fields") is not None else None,
            "signing_bonus_payout_type": obj.get("signing_bonus_payout_type") if obj.get("signing_bonus_payout_type") is not None else 'FIRST_CYCLE',
            "hiring_objective_extra_info": obj.get("hiring_objective_extra_info"),
            "notice_period_after_probation": obj.get("notice_period_after_probation"),
            "notice_period_during_probation": obj.get("notice_period_during_probation"),
            "is_auto_quote_validation_passed": obj.get("is_auto_quote_validation_passed"),
            "probation_period_type_for_definite": obj.get("probation_period_type_for_definite"),
            "allow_consultant_equipment_reimbursement": obj.get("allow_consultant_equipment_reimbursement")
        })
        return _obj


