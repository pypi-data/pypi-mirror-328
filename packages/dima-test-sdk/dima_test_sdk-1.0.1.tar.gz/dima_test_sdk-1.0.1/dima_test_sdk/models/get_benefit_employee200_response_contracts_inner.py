# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_test_sdk.models.get_benefit_employee200_response_contracts_inner_compensations_inner import GetBenefitEmployee200ResponseContractsInnerCompensationsInner
from typing import Optional, Set
from typing_extensions import Self

class GetBenefitEmployee200ResponseContractsInner(BaseModel):
    """
    GetBenefitEmployee200ResponseContractsInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the contract.")
    flsa: Optional[StrictBool] = Field(default=None, description="Indicates if the contract is compliant with the Fair Labor Standards Act.")
    status: Optional[StrictStr] = Field(default=None, description="The contract status.")
    end_date: Optional[StrictStr] = Field(default=None, description="The end date of the contract, if applicable.")
    job_title: Optional[StrictStr] = Field(default=None, description="Job title or name of the contract.")
    start_date: Optional[StrictStr] = Field(default=None, description="The start date of the contract.")
    compensations: Optional[List[GetBenefitEmployee200ResponseContractsInnerCompensationsInner]] = Field(default=None, description="List of compensations associated with the contract.")
    contract_type: Optional[StrictStr] = Field(default=None, description="The type of contract.")
    employment_type: Optional[StrictStr] = Field(default=None, description="The employment type, e.g., full-time or part-time.")
    estimated_week_working_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated number of working hours per week.")
    __properties: ClassVar[List[str]] = ["id", "flsa", "status", "end_date", "job_title", "start_date", "compensations", "contract_type", "employment_type", "estimated_week_working_hours"]

    @field_validator('contract_type')
    def contract_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['direct_employee', 'contractor']):
            raise ValueError("must be one of enum values ('direct_employee', 'contractor')")
        return value

    @field_validator('employment_type')
    def employment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['full_time', 'part_time']):
            raise ValueError("must be one of enum values ('full_time', 'part_time')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBenefitEmployee200ResponseContractsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in compensations (list)
        _items = []
        if self.compensations:
            for _item_compensations in self.compensations:
                if _item_compensations:
                    _items.append(_item_compensations.to_dict())
            _dict['compensations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBenefitEmployee200ResponseContractsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "flsa": obj.get("flsa"),
            "status": obj.get("status"),
            "end_date": obj.get("end_date"),
            "job_title": obj.get("job_title"),
            "start_date": obj.get("start_date"),
            "compensations": [GetBenefitEmployee200ResponseContractsInnerCompensationsInner.from_dict(_item) for _item in obj["compensations"]] if obj.get("compensations") is not None else None,
            "contract_type": obj.get("contract_type"),
            "employment_type": obj.get("employment_type"),
            "estimated_week_working_hours": obj.get("estimated_week_working_hours")
        })
        return _obj


