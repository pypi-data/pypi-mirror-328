# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.gp_contract_created_employment_holidays import GPContractCreatedEmploymentHolidays
from typing import Optional, Set
from typing_extensions import Self

class GPContractCreatedEmployment(BaseModel):
    """
    GPContractCreatedEmployment
    """ # noqa: E501
    start_date: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    end_date: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    country: Optional[StrictStr] = Field(default=None, description="Country of employment.")
    state: Optional[StrictStr] = Field(default=None, description="State code of the state/province where this person will be employed.")
    type: Optional[StrictStr] = Field(default=None, description="Is it a full-time contract or a part-time contract?")
    work_visa_required: Optional[StrictBool] = Field(default=None, description="Do you require Deel to apply for a work visa for this person?")
    holidays: Optional[GPContractCreatedEmploymentHolidays] = None
    __properties: ClassVar[List[str]] = ["start_date", "end_date", "country", "state", "type", "work_visa_required", "holidays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GPContractCreatedEmployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of holidays
        if self.holidays:
            _dict['holidays'] = self.holidays.to_dict()
        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GPContractCreatedEmployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "country": obj.get("country"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "work_visa_required": obj.get("work_visa_required"),
            "holidays": GPContractCreatedEmploymentHolidays.from_dict(obj["holidays"]) if obj.get("holidays") is not None else None
        })
        return _obj


