# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.custom_field_value import CustomFieldValue
from dima_test_sdk.models.employment_detail_team import EmploymentDetailTeam
from dima_test_sdk.models.people_client_legal_entity import PeopleClientLegalEntity
from dima_test_sdk.models.people_payment import PeoplePayment
from typing import Optional, Set
from typing_extensions import Self

class EmploymentDetail(BaseModel):
    """
    EmploymentDetail
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the employment.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the employee.")
    team: Optional[EmploymentDetailTeam] = None
    custom_field_values: Optional[List[CustomFieldValue]] = Field(default=None, description="when parameter include_custom_fields = true")
    email: Optional[StrictStr] = Field(default=None, description="The work email of the employee.")
    state: Optional[StrictStr] = Field(default=None, description="The state of employment.")
    country: Optional[StrictStr] = Field(default=None, description="The country of employment.")
    payment: Optional[PeoplePayment] = None
    is_ended: Optional[StrictBool] = Field(default=None, description="Whether the employment has ended.")
    termination_last_day: Optional[datetime] = Field(default=None, description="The last day of work mentioned on the termination.")
    timezone: Optional[StrictStr] = Field(default=None, description="The timezone of the employment.")
    job_title: Optional[StrictStr] = Field(default=None, description="The job title of the employment.")
    seniority: Optional[StrictStr] = Field(default=None, description="The seniority level of the employment.")
    start_date: Optional[date] = Field(default=None, description="The start date of the employment.")
    work_email: Optional[StrictStr] = Field(default=None, description="The work email of the employment.")
    hiring_type: Optional[StrictStr] = Field(default=None, description="The type of hiring of the employment.")
    hiring_status: Optional[StrictStr] = Field(default=None, description="The current hiring status of the employment.")
    completion_date: Optional[StrictStr] = Field(default=None, description="The completion date of the employment contract.")
    contract_status: Optional[StrictStr] = Field(default=None, description="The status of the employment contract.")
    voluntarily_left: Optional[StrictStr] = Field(default=None, description="Whether the employee voluntarily left the employment.")
    contract_coverage: Optional[List[StrictStr]] = Field(default=None, description="The coverage of the employment contract.")
    new_hiring_status: Optional[StrictStr] = Field(default=None, description="The new hiring status of the employment.")
    client_legal_entity: Optional[PeopleClientLegalEntity] = None
    has_eor_termination: Optional[StrictStr] = Field(default=None, description="Whether the employment has an EOR termination.")
    contract_is_archived: Optional[StrictBool] = Field(default=None, description="Whether the employment contract is archived.")
    contract_has_contractor: Optional[StrictBool] = Field(default=None, description="Whether the contract has a contractor.")
    is_user_contract_deleted: Optional[StrictBool] = Field(default=None, description="Whether the user contract is deleted.")
    hris_direct_employee_invitation: Optional[StrictStr] = Field(default=None, description="The HRIS direct employee invitation status.")
    __properties: ClassVar[List[str]] = ["id", "name", "team", "custom_field_values", "email", "state", "country", "payment", "is_ended", "termination_last_day", "timezone", "job_title", "seniority", "start_date", "work_email", "hiring_type", "hiring_status", "completion_date", "contract_status", "voluntarily_left", "contract_coverage", "new_hiring_status", "client_legal_entity", "has_eor_termination", "contract_is_archived", "contract_has_contractor", "is_user_contract_deleted", "hris_direct_employee_invitation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmploymentDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_field_values (list)
        _items = []
        if self.custom_field_values:
            for _item_custom_field_values in self.custom_field_values:
                if _item_custom_field_values:
                    _items.append(_item_custom_field_values.to_dict())
            _dict['custom_field_values'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment
        if self.payment:
            _dict['payment'] = self.payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client_legal_entity
        if self.client_legal_entity:
            _dict['client_legal_entity'] = self.client_legal_entity.to_dict()
        # set to None if termination_last_day (nullable) is None
        # and model_fields_set contains the field
        if self.termination_last_day is None and "termination_last_day" in self.model_fields_set:
            _dict['termination_last_day'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmploymentDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "team": EmploymentDetailTeam.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "custom_field_values": [CustomFieldValue.from_dict(_item) for _item in obj["custom_field_values"]] if obj.get("custom_field_values") is not None else None,
            "email": obj.get("email"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "payment": PeoplePayment.from_dict(obj["payment"]) if obj.get("payment") is not None else None,
            "is_ended": obj.get("is_ended"),
            "termination_last_day": obj.get("termination_last_day"),
            "timezone": obj.get("timezone"),
            "job_title": obj.get("job_title"),
            "seniority": obj.get("seniority"),
            "start_date": obj.get("start_date"),
            "work_email": obj.get("work_email"),
            "hiring_type": obj.get("hiring_type"),
            "hiring_status": obj.get("hiring_status"),
            "completion_date": obj.get("completion_date"),
            "contract_status": obj.get("contract_status"),
            "voluntarily_left": obj.get("voluntarily_left"),
            "contract_coverage": obj.get("contract_coverage"),
            "new_hiring_status": obj.get("new_hiring_status"),
            "client_legal_entity": PeopleClientLegalEntity.from_dict(obj["client_legal_entity"]) if obj.get("client_legal_entity") is not None else None,
            "has_eor_termination": obj.get("has_eor_termination"),
            "contract_is_archived": obj.get("contract_is_archived"),
            "contract_has_contractor": obj.get("contract_has_contractor"),
            "is_user_contract_deleted": obj.get("is_user_contract_deleted"),
            "hris_direct_employee_invitation": obj.get("hris_direct_employee_invitation")
        })
        return _obj


