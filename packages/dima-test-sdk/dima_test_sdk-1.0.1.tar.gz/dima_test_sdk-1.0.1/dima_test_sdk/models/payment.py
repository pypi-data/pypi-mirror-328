# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_test_sdk.models.payment_method import PaymentMethod
from dima_test_sdk.models.payment_status_enum import PaymentStatusEnum
from dima_test_sdk.models.payment_worker import PaymentWorker
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    Payment
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt] = Field(description="Unique identifier of the payment.")
    payment_method: PaymentMethod
    status: PaymentStatusEnum
    payment_currency: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="Currency code.")
    label: StrictStr
    paid_at: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    created_at: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    total: StrictStr = Field(description="Total paid.")
    workers: List[PaymentWorker]
    __properties: ClassVar[List[str]] = ["id", "payment_method", "status", "payment_currency", "label", "paid_at", "created_at", "total", "workers"]

    @field_validator('payment_currency')
    def payment_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['payment_method'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in workers (list)
        _items = []
        if self.workers:
            for _item_workers in self.workers:
                if _item_workers:
                    _items.append(_item_workers.to_dict())
            _dict['workers'] = _items
        # set to None if paid_at (nullable) is None
        # and model_fields_set contains the field
        if self.paid_at is None and "paid_at" in self.model_fields_set:
            _dict['paid_at'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "payment_method": PaymentMethod.from_dict(obj["payment_method"]) if obj.get("payment_method") is not None else None,
            "status": obj.get("status"),
            "payment_currency": obj.get("payment_currency"),
            "label": obj.get("label"),
            "paid_at": obj.get("paid_at"),
            "created_at": obj.get("created_at"),
            "total": obj.get("total"),
            "workers": [PaymentWorker.from_dict(_item) for _item in obj["workers"]] if obj.get("workers") is not None else None
        })
        return _obj


