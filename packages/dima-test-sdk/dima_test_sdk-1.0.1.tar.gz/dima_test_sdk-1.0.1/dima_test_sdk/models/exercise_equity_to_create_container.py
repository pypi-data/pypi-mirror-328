# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class ExerciseEquityToCreateContainer(BaseModel):
    """
    ExerciseEquityToCreateContainer
    """ # noqa: E501
    fmv: StrictStr
    quantity: Union[StrictFloat, StrictInt]
    issuer_id: StrictStr
    worker_id: StrictStr
    address_zip: StrictStr
    exercise_id: StrictStr
    address_city: StrictStr
    address_state: StrictStr
    address_street: StrictStr
    stakeholder_id: StrictStr
    address_country: StrictStr
    option_grant_id: StrictStr
    fmv_currency_code: StrictStr
    stakeholder_email: StrictStr
    option_grant_issue: StrictStr
    option_grant_label: StrictStr
    option_grant_currency: StrictStr
    option_grant_issue_date: datetime
    option_grant_expiry_date: datetime
    stakeholder_relationship: StrictStr
    option_grant_strike_price: StrictStr
    __properties: ClassVar[List[str]] = ["fmv", "quantity", "issuer_id", "worker_id", "address_zip", "exercise_id", "address_city", "address_state", "address_street", "stakeholder_id", "address_country", "option_grant_id", "fmv_currency_code", "stakeholder_email", "option_grant_issue", "option_grant_label", "option_grant_currency", "option_grant_issue_date", "option_grant_expiry_date", "stakeholder_relationship", "option_grant_strike_price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExerciseEquityToCreateContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExerciseEquityToCreateContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fmv": obj.get("fmv"),
            "quantity": obj.get("quantity"),
            "issuer_id": obj.get("issuer_id"),
            "worker_id": obj.get("worker_id"),
            "address_zip": obj.get("address_zip"),
            "exercise_id": obj.get("exercise_id"),
            "address_city": obj.get("address_city"),
            "address_state": obj.get("address_state"),
            "address_street": obj.get("address_street"),
            "stakeholder_id": obj.get("stakeholder_id"),
            "address_country": obj.get("address_country"),
            "option_grant_id": obj.get("option_grant_id"),
            "fmv_currency_code": obj.get("fmv_currency_code"),
            "stakeholder_email": obj.get("stakeholder_email"),
            "option_grant_issue": obj.get("option_grant_issue"),
            "option_grant_label": obj.get("option_grant_label"),
            "option_grant_currency": obj.get("option_grant_currency"),
            "option_grant_issue_date": obj.get("option_grant_issue_date"),
            "option_grant_expiry_date": obj.get("option_grant_expiry_date"),
            "stakeholder_relationship": obj.get("stakeholder_relationship"),
            "option_grant_strike_price": obj.get("option_grant_strike_price")
        })
        return _obj


