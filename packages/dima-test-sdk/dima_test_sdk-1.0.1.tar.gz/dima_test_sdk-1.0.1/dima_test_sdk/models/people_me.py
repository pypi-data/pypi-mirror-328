# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_test_sdk.models.profile_type_enum import ProfileTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class PeopleMe(BaseModel):
    """
    People object representing a Deel
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unique identifier for the user profile")
    user_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unique identifier for the user")
    username: Optional[StrictStr] = Field(default=None, description="Username of the user")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the user")
    middle_name: Optional[StrictStr] = Field(default=None, description="Middle name of the user")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the user")
    full_name: Optional[StrictStr] = Field(default=None, description="Full name of the user")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the user")
    avatar_url: Optional[StrictStr] = Field(default=None, description="URL of the user's avatar")
    profile_type: Optional[ProfileTypeEnum] = None
    slack_user_id: Optional[StrictStr] = Field(default=None, description="User's slack id")
    slack_team_id: Optional[StrictStr] = Field(default=None, description="User's team slack id")
    organization_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unique identifier for the organization")
    organization_name: Optional[StrictStr] = Field(default=None, description="Name of the organization")
    client_country: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = Field(default=None, description="Country code.")
    contractor_country: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = Field(default=None, description="Country code.")
    hris_enabled: Optional[StrictBool] = Field(default=None, description="HRIS feature enabled.")
    __properties: ClassVar[List[str]] = ["id", "user_id", "username", "first_name", "middle_name", "last_name", "full_name", "email", "avatar_url", "profile_type", "slack_user_id", "slack_team_id", "organization_id", "organization_name", "client_country", "contractor_country", "hris_enabled"]

    @field_validator('client_country')
    def client_country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    @field_validator('contractor_country')
    def contractor_country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PeopleMe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.middle_name is None and "middle_name" in self.model_fields_set:
            _dict['middle_name'] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict['avatar_url'] = None

        # set to None if slack_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.slack_user_id is None and "slack_user_id" in self.model_fields_set:
            _dict['slack_user_id'] = None

        # set to None if slack_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.slack_team_id is None and "slack_team_id" in self.model_fields_set:
            _dict['slack_team_id'] = None

        # set to None if organization_name (nullable) is None
        # and model_fields_set contains the field
        if self.organization_name is None and "organization_name" in self.model_fields_set:
            _dict['organization_name'] = None

        # set to None if client_country (nullable) is None
        # and model_fields_set contains the field
        if self.client_country is None and "client_country" in self.model_fields_set:
            _dict['client_country'] = None

        # set to None if contractor_country (nullable) is None
        # and model_fields_set contains the field
        if self.contractor_country is None and "contractor_country" in self.model_fields_set:
            _dict['contractor_country'] = None

        # set to None if hris_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.hris_enabled is None and "hris_enabled" in self.model_fields_set:
            _dict['hris_enabled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PeopleMe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "username": obj.get("username"),
            "first_name": obj.get("first_name"),
            "middle_name": obj.get("middle_name"),
            "last_name": obj.get("last_name"),
            "full_name": obj.get("full_name"),
            "email": obj.get("email"),
            "avatar_url": obj.get("avatar_url"),
            "profile_type": obj.get("profile_type"),
            "slack_user_id": obj.get("slack_user_id"),
            "slack_team_id": obj.get("slack_team_id"),
            "organization_id": obj.get("organization_id"),
            "organization_name": obj.get("organization_name"),
            "client_country": obj.get("client_country"),
            "contractor_country": obj.get("contractor_country"),
            "hris_enabled": obj.get("hris_enabled")
        })
        return _obj


