# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.marital_status_enum import MaritalStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class GPEmployeeInformationUpdateData(BaseModel):
    """
    GPEmployeeInformationUpdateData
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the employee.")
    middle_name: Optional[StrictStr] = Field(default=None, description="Middle name of the employee.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the employee.")
    date_of_birth: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example 2022-12-31.")
    gender: Optional[StrictStr] = Field(default=None, description="Employee's gender.")
    marital_status: Optional[MaritalStatusEnum] = None
    employee_number: Optional[StrictStr] = Field(default=None, description="Employee's number.")
    __properties: ClassVar[List[str]] = ["first_name", "middle_name", "last_name", "date_of_birth", "gender", "marital_status", "employee_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GPEmployeeInformationUpdateData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if date_of_birth (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_birth is None and "date_of_birth" in self.model_fields_set:
            _dict['date_of_birth'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GPEmployeeInformationUpdateData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "middle_name": obj.get("middle_name"),
            "last_name": obj.get("last_name"),
            "date_of_birth": obj.get("date_of_birth"),
            "gender": obj.get("gender"),
            "marital_status": obj.get("marital_status"),
            "employee_number": obj.get("employee_number")
        })
        return _obj


