# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dima_test_sdk.models.employee_timeoffs_policies_item_entitlement import EmployeeTimeoffsPoliciesItemEntitlement
from typing import Optional, Set
from typing_extensions import Self

class EmployeeTimeoffsPoliciesItem(BaseModel):
    """
    EmployeeTimeoffsPoliciesItem
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the time off policy.")
    type: StrictStr = Field(description="Type of time off policy.")
    name: StrictStr = Field(description="Name of the time off policy.")
    description: StrictStr = Field(description="Description of the time off policy.")
    unit_amount: Union[StrictFloat, StrictInt] = Field(description="Unit amount of the time off policy.")
    used: Optional[Union[StrictFloat, StrictInt]] = Field(description="Used time off policy.")
    tracking_start_date: Optional[datetime] = Field(description="Start date of the time off policy.")
    tracking_end_date: Optional[Any] = Field(description="End date of the time off policy.")
    entitlement: EmployeeTimeoffsPoliciesItemEntitlement
    __properties: ClassVar[List[str]] = ["id", "type", "name", "description", "unit_amount", "used", "tracking_start_date", "tracking_end_date", "entitlement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmployeeTimeoffsPoliciesItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entitlement
        if self.entitlement:
            _dict['entitlement'] = self.entitlement.to_dict()
        # set to None if used (nullable) is None
        # and model_fields_set contains the field
        if self.used is None and "used" in self.model_fields_set:
            _dict['used'] = None

        # set to None if tracking_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.tracking_start_date is None and "tracking_start_date" in self.model_fields_set:
            _dict['tracking_start_date'] = None

        # set to None if tracking_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.tracking_end_date is None and "tracking_end_date" in self.model_fields_set:
            _dict['tracking_end_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmployeeTimeoffsPoliciesItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "unit_amount": obj.get("unit_amount"),
            "used": obj.get("used"),
            "tracking_start_date": obj.get("tracking_start_date"),
            "tracking_end_date": obj.get("tracking_end_date"),
            "entitlement": EmployeeTimeoffsPoliciesItemEntitlement.from_dict(obj["entitlement"]) if obj.get("entitlement") is not None else None
        })
        return _obj


