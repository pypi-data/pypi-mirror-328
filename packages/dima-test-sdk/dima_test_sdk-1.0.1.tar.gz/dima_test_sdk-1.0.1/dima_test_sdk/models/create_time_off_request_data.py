# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dima_test_sdk.models.create_time_off_request_data_attachments_inner import CreateTimeOffRequestDataAttachmentsInner
from dima_test_sdk.models.create_time_off_request_data_dates_inner import CreateTimeOffRequestDataDatesInner
from typing import Optional, Set
from typing_extensions import Self

class CreateTimeOffRequestData(BaseModel):
    """
    CreateTimeOffRequestData
    """ # noqa: E501
    dates: Optional[List[CreateTimeOffRequestDataDatesInner]] = None
    reason: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="The reason for the time off")
    is_paid: Optional[StrictBool] = Field(default=False, description="Is the time off paid")
    end_date: datetime = Field(description="The end date of the time off")
    start_date: datetime = Field(description="The start date of the time off")
    attachments: Optional[List[CreateTimeOffRequestDataAttachmentsInner]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="The description of the time off")
    contract_oid: Optional[Annotated[str, Field(strict=True, max_length=24)]] = Field(default=None, description="The contract id of the time off")
    deduction_amount: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="The deduction amount of the time off")
    time_off_type_id: StrictStr = Field(description="The time off type id")
    time_off_percentage: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The time off percentage")
    recipient_profile_id: StrictStr = Field(description="The hris profile id of the recipient")
    other_type_description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The other type description")
    __properties: ClassVar[List[str]] = ["dates", "reason", "is_paid", "end_date", "start_date", "attachments", "description", "contract_oid", "deduction_amount", "time_off_type_id", "time_off_percentage", "recipient_profile_id", "other_type_description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTimeOffRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dates (list)
        _items = []
        if self.dates:
            for _item_dates in self.dates:
                if _item_dates:
                    _items.append(_item_dates.to_dict())
            _dict['dates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        # set to None if attachments (nullable) is None
        # and model_fields_set contains the field
        if self.attachments is None and "attachments" in self.model_fields_set:
            _dict['attachments'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if contract_oid (nullable) is None
        # and model_fields_set contains the field
        if self.contract_oid is None and "contract_oid" in self.model_fields_set:
            _dict['contract_oid'] = None

        # set to None if deduction_amount (nullable) is None
        # and model_fields_set contains the field
        if self.deduction_amount is None and "deduction_amount" in self.model_fields_set:
            _dict['deduction_amount'] = None

        # set to None if time_off_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.time_off_percentage is None and "time_off_percentage" in self.model_fields_set:
            _dict['time_off_percentage'] = None

        # set to None if other_type_description (nullable) is None
        # and model_fields_set contains the field
        if self.other_type_description is None and "other_type_description" in self.model_fields_set:
            _dict['other_type_description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTimeOffRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dates": [CreateTimeOffRequestDataDatesInner.from_dict(_item) for _item in obj["dates"]] if obj.get("dates") is not None else None,
            "reason": obj.get("reason"),
            "is_paid": obj.get("is_paid") if obj.get("is_paid") is not None else False,
            "end_date": obj.get("end_date"),
            "start_date": obj.get("start_date"),
            "attachments": [CreateTimeOffRequestDataAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "description": obj.get("description"),
            "contract_oid": obj.get("contract_oid"),
            "deduction_amount": obj.get("deduction_amount"),
            "time_off_type_id": obj.get("time_off_type_id"),
            "time_off_percentage": obj.get("time_off_percentage"),
            "recipient_profile_id": obj.get("recipient_profile_id"),
            "other_type_description": obj.get("other_type_description")
        })
        return _obj


