# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.adjustment_status_enum import AdjustmentStatusEnum
from dima_test_sdk.models.create_adjustment201_response_data_file import CreateAdjustment201ResponseDataFile
from typing import Optional, Set
from typing_extensions import Self

class PayrollAdjustment(BaseModel):
    """
    PayrollAdjustment
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the adjustment")
    contract_id: Optional[StrictStr] = Field(default=None, description="The identifier of the contract associated with the adjustment")
    amount: Optional[StrictStr] = Field(default=None, description="The amount of the adjustment")
    date_of_adjustment: Optional[date] = Field(default=None, description="The date of the adjustment")
    title: Optional[StrictStr] = Field(default=None, description="The title of the adjustment")
    description: Optional[StrictStr] = Field(default=None, description="The description of the adjustment")
    cycle_reference: Optional[StrictStr] = Field(default=None, description="The reference to the cycle associated with the adjustment")
    status: Optional[AdjustmentStatusEnum] = None
    adjustment_category_id: Optional[StrictStr] = Field(default=None, description="The identifier of the adjustment category associated with the adjustment")
    actual_start_cycle_date: Optional[StrictStr] = Field(default=None, description="The date of the actual start cycle date")
    actual_end_cycle_date: Optional[StrictStr] = Field(default=None, description="The date of the actual end cycle date")
    move_next_cycle: Optional[StrictBool] = Field(default=None, description="If an adjustments can belong to another payroll cycle")
    file: Optional[CreateAdjustment201ResponseDataFile] = None
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the adjustment was created")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time when the adjustment was last updated")
    __properties: ClassVar[List[str]] = ["id", "contract_id", "amount", "date_of_adjustment", "title", "description", "cycle_reference", "status", "adjustment_category_id", "actual_start_cycle_date", "actual_end_cycle_date", "move_next_cycle", "file", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayrollAdjustment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        # set to None if cycle_reference (nullable) is None
        # and model_fields_set contains the field
        if self.cycle_reference is None and "cycle_reference" in self.model_fields_set:
            _dict['cycle_reference'] = None

        # set to None if file (nullable) is None
        # and model_fields_set contains the field
        if self.file is None and "file" in self.model_fields_set:
            _dict['file'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayrollAdjustment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "contract_id": obj.get("contract_id"),
            "amount": obj.get("amount"),
            "date_of_adjustment": obj.get("date_of_adjustment"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "cycle_reference": obj.get("cycle_reference"),
            "status": obj.get("status"),
            "adjustment_category_id": obj.get("adjustment_category_id"),
            "actual_start_cycle_date": obj.get("actual_start_cycle_date"),
            "actual_end_cycle_date": obj.get("actual_end_cycle_date"),
            "move_next_cycle": obj.get("move_next_cycle"),
            "file": CreateAdjustment201ResponseDataFile.from_dict(obj["file"]) if obj.get("file") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


