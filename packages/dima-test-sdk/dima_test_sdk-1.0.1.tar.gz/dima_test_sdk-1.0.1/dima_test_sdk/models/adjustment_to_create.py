# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from dima_test_sdk.models.create_adjustment_request_data_amount import CreateAdjustmentRequestDataAmount
from typing import Optional, Set
from typing_extensions import Self

class AdjustmentToCreate(BaseModel):
    """
    Details of adjustment to create
    """ # noqa: E501
    contract_id: Annotated[str, Field(min_length=5, strict=True)] = Field(description="The identifier of the contract associated with the adjustment")
    amount: CreateAdjustmentRequestDataAmount
    date_of_adjustment: Optional[date] = Field(default=None, description="Short date in format ISO-8601 (YYYY-MM-DD). For example 2022-12-31.")
    title: Annotated[str, Field(min_length=3, strict=True, max_length=255)] = Field(description="Title of adjustment.")
    description: Annotated[str, Field(min_length=3, strict=True, max_length=255)] = Field(description="Description of adjustment.")
    cycle_reference: Optional[StrictStr] = Field(default=None, description="Cycle reference of adjustment.")
    file: Union[Annotated[bytes, Field(min_length=1, strict=True)], Annotated[str, Field(min_length=1, strict=True)], Tuple[str, Annotated[bytes, Field(min_length=1, strict=True)]]] = Field(description="File of adjustment.")
    adjustment_category_id: Annotated[str, Field(min_length=25, strict=True)] = Field(description="Adjustment category id.")
    move_next_cycle: Optional[StrictBool] = Field(default=None, description="If an adjustments can belong to another payroll cycle.")
    vendor: Annotated[str, Field(min_length=3, strict=True)] = Field(description="Vendor of adjustment.")
    country: Annotated[str, Field(min_length=2, strict=True, max_length=2)] = Field(description="Country code.")
    __properties: ClassVar[List[str]] = ["contract_id", "amount", "date_of_adjustment", "title", "description", "cycle_reference", "file", "adjustment_category_id", "move_next_cycle", "vendor", "country"]

    @field_validator('country')
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdjustmentToCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # set to None if date_of_adjustment (nullable) is None
        # and model_fields_set contains the field
        if self.date_of_adjustment is None and "date_of_adjustment" in self.model_fields_set:
            _dict['date_of_adjustment'] = None

        # set to None if move_next_cycle (nullable) is None
        # and model_fields_set contains the field
        if self.move_next_cycle is None and "move_next_cycle" in self.model_fields_set:
            _dict['move_next_cycle'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdjustmentToCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contract_id": obj.get("contract_id"),
            "amount": CreateAdjustmentRequestDataAmount.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "date_of_adjustment": obj.get("date_of_adjustment"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "cycle_reference": obj.get("cycle_reference"),
            "file": obj.get("file"),
            "adjustment_category_id": obj.get("adjustment_category_id"),
            "move_next_cycle": obj.get("move_next_cycle"),
            "vendor": obj.get("vendor"),
            "country": obj.get("country")
        })
        return _obj


