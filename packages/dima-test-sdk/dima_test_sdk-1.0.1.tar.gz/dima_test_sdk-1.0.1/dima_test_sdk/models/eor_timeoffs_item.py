# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dima_test_sdk.models.eor_timeoffs_base_item import EorTimeoffsBaseItem
from dima_test_sdk.models.timeoffs_attachments_item import TimeoffsAttachmentsItem
from dima_test_sdk.models.timeoffs_profile import TimeoffsProfile
from dima_test_sdk.models.timeoffs_status_enum import TimeoffsStatusEnum
from dima_test_sdk.models.timeoffs_type_enum import TimeoffsTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class EorTimeoffsItem(BaseModel):
    """
    EorTimeoffsItem
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier of this resource.")
    contract_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    updated_at: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    start_date: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    end_date: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    can_request_changes: Optional[StrictBool] = Field(default=None, description="Indicates if it is possible to make changes to the time off request.")
    is_updated: Optional[StrictBool] = Field(default=None, description="If true, an update to the original time off request was made.")
    change_request: Optional[EorTimeoffsBaseItem] = None
    applied_changes: Optional[List[Optional[EorTimeoffsBaseItem]]] = Field(default=None, description="List of changes applied to the time off.")
    reason: Optional[StrictStr] = Field(default=None, description="Reason for requesting time off.")
    type: TimeoffsTypeEnum
    requested_at: Optional[datetime] = Field(description="Long date-time format following ISO-8601")
    reviewed_at: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    denial_reason: Optional[StrictStr] = Field(default=None, description="Reason why time off was denied.")
    has_multiple_dates: Optional[StrictBool] = Field(default=None, description="Indicates if multiple time off days are requested.")
    status: TimeoffsStatusEnum
    other_timeoff_name: Optional[StrictStr] = Field(default=None, description="Custom title for the time off. Only specify if type is \"OTHER\".")
    requester: Optional[TimeoffsProfile] = None
    reviewer: Optional[TimeoffsProfile] = None
    days_used_start_year: Optional[StrictStr] = Field(default=None, description="Days used at the start year.")
    days_used_end_year: Optional[StrictStr] = Field(default=None, description="Days used at the end year.")
    total_days_used: Optional[StrictStr] = Field(default=None, description="Total number of time off days used.")
    start_date_is_half_day: Optional[StrictBool] = Field(default=None, description="Indicates if the first day of time off is a half day.")
    end_date_is_half_day: Optional[StrictBool] = Field(default=None, description="Indicates if the last day of time off is a half day.")
    single_date: Optional[datetime] = Field(default=None, description="Long date-time format following ISO-8601")
    date_is_half_day: Optional[StrictBool] = Field(default=None, description="If true, only a single date was specified.")
    attachments: Optional[List[TimeoffsAttachmentsItem]] = Field(default=None, description="A list of attachments. 2022-09-08 FE only allows for \"SICK LEAVE\"")
    __properties: ClassVar[List[str]] = ["reason", "type", "requested_at", "reviewed_at", "denial_reason", "has_multiple_dates", "status", "other_timeoff_name", "requester", "reviewer", "days_used_start_year", "days_used_end_year", "total_days_used", "start_date_is_half_day", "end_date_is_half_day", "single_date", "date_is_half_day", "attachments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EorTimeoffsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviewer
        if self.reviewer:
            _dict['reviewer'] = self.reviewer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        # set to None if requested_at (nullable) is None
        # and model_fields_set contains the field
        if self.requested_at is None and "requested_at" in self.model_fields_set:
            _dict['requested_at'] = None

        # set to None if reviewed_at (nullable) is None
        # and model_fields_set contains the field
        if self.reviewed_at is None and "reviewed_at" in self.model_fields_set:
            _dict['reviewed_at'] = None

        # set to None if denial_reason (nullable) is None
        # and model_fields_set contains the field
        if self.denial_reason is None and "denial_reason" in self.model_fields_set:
            _dict['denial_reason'] = None

        # set to None if has_multiple_dates (nullable) is None
        # and model_fields_set contains the field
        if self.has_multiple_dates is None and "has_multiple_dates" in self.model_fields_set:
            _dict['has_multiple_dates'] = None

        # set to None if other_timeoff_name (nullable) is None
        # and model_fields_set contains the field
        if self.other_timeoff_name is None and "other_timeoff_name" in self.model_fields_set:
            _dict['other_timeoff_name'] = None

        # set to None if requester (nullable) is None
        # and model_fields_set contains the field
        if self.requester is None and "requester" in self.model_fields_set:
            _dict['requester'] = None

        # set to None if reviewer (nullable) is None
        # and model_fields_set contains the field
        if self.reviewer is None and "reviewer" in self.model_fields_set:
            _dict['reviewer'] = None

        # set to None if single_date (nullable) is None
        # and model_fields_set contains the field
        if self.single_date is None and "single_date" in self.model_fields_set:
            _dict['single_date'] = None

        # set to None if date_is_half_day (nullable) is None
        # and model_fields_set contains the field
        if self.date_is_half_day is None and "date_is_half_day" in self.model_fields_set:
            _dict['date_is_half_day'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EorTimeoffsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reason": obj.get("reason"),
            "type": obj.get("type"),
            "requested_at": obj.get("requested_at"),
            "reviewed_at": obj.get("reviewed_at"),
            "denial_reason": obj.get("denial_reason"),
            "has_multiple_dates": obj.get("has_multiple_dates"),
            "status": obj.get("status"),
            "other_timeoff_name": obj.get("other_timeoff_name"),
            "requester": TimeoffsProfile.from_dict(obj["requester"]) if obj.get("requester") is not None else None,
            "reviewer": TimeoffsProfile.from_dict(obj["reviewer"]) if obj.get("reviewer") is not None else None,
            "days_used_start_year": obj.get("days_used_start_year"),
            "days_used_end_year": obj.get("days_used_end_year"),
            "total_days_used": obj.get("total_days_used"),
            "start_date_is_half_day": obj.get("start_date_is_half_day"),
            "end_date_is_half_day": obj.get("end_date_is_half_day"),
            "single_date": obj.get("single_date"),
            "date_is_half_day": obj.get("date_is_half_day"),
            "attachments": [TimeoffsAttachmentsItem.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None
        })
        return _obj


