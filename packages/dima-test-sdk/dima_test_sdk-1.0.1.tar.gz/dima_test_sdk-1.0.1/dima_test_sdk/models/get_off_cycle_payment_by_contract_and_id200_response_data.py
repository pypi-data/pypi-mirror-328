# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dima_test_sdk.models.get_off_cycle_payment_by_contract_and_id200_response_data_reported_by import GetOffCyclePaymentByContractAndId200ResponseDataReportedBy
from typing import Optional, Set
from typing_extensions import Self

class GetOffCyclePaymentByContractAndId200ResponseData(BaseModel):
    """
    GetOffCyclePaymentByContractAndId200ResponseData
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the off-cycle payment.")
    amount: StrictStr = Field(description="Amount of the off-cycle payment.")
    status: Optional[StrictStr] = Field(description="Current status of the off-cycle payment.")
    created_at: datetime = Field(description="Timestamp of when the off-cycle payment was created.")
    description: StrictStr = Field(description="Description of the off-cycle payment.")
    reported_by: GetOffCyclePaymentByContractAndId200ResponseDataReportedBy
    currency_code: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="ISO 4217 currency code of the payment.")
    date_submitted: datetime = Field(description="Timestamp of when the payment was submitted.")
    __properties: ClassVar[List[str]] = ["id", "amount", "status", "created_at", "description", "reported_by", "currency_code", "date_submitted"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['approved', 'declined', 'not_payable', 'paid', 'pending', 'processing']):
            raise ValueError("must be one of enum values ('approved', 'declined', 'not_payable', 'paid', 'pending', 'processing')")
        return value

    @field_validator('currency_code')
    def currency_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{3}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOffCyclePaymentByContractAndId200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reported_by
        if self.reported_by:
            _dict['reported_by'] = self.reported_by.to_dict()
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOffCyclePaymentByContractAndId200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "amount": obj.get("amount"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "reported_by": GetOffCyclePaymentByContractAndId200ResponseDataReportedBy.from_dict(obj["reported_by"]) if obj.get("reported_by") is not None else None,
            "currency_code": obj.get("currency_code"),
            "date_submitted": obj.get("date_submitted")
        })
        return _obj


