# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dima_test_sdk.models.payasyougotimebased import PAYASYOUGOTIMEBASED

class TestPAYASYOUGOTIMEBASED(unittest.TestCase):
    """PAYASYOUGOTIMEBASED unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PAYASYOUGOTIMEBASED:
        """Test PAYASYOUGOTIMEBASED
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PAYASYOUGOTIMEBASED`
        """
        model = PAYASYOUGOTIMEBASED()
        if include_optional:
            return PAYASYOUGOTIMEBASED(
                meta = dima_test_sdk.models.pay_as_you_go_time_based_all_of_meta.PAY_AS_YOU_GO_TIME_BASED_allOf_meta(
                    is_main_income = True, 
                    documents_required = True, ),
                title = 'Software Developer',
                client = dima_test_sdk.models.pay_as_you_go_time_based_all_of_client.PAY_AS_YOU_GO_TIME_BASED_allOf_client(
                    team = dima_test_sdk.models.pay_as_you_go_time_based_all_of_client_team.PAY_AS_YOU_GO_TIME_BASED_allOf_client_team(
                        id = [12345678,"00000000-0000-0000-0000-000000000000"], ), 
                    legal_entity = dima_test_sdk.models.pay_as_you_go_time_based_all_of_client_legal_entity.PAY_AS_YOU_GO_TIME_BASED_allOf_client_legal_entity(
                        id = [12345678,"00000000-0000-0000-0000-000000000000"], ), ),
                worker = dima_test_sdk.models.pay_as_you_go_time_based_all_of_worker.PAY_AS_YOU_GO_TIME_BASED_allOf_worker(
                    last_name = 'Doe', 
                    first_name = 'John', 
                    expected_email = 'test@example.com', ),
                job_title = dima_test_sdk.models.pay_as_you_go_time_based_all_of_job_title.PAY_AS_YOU_GO_TIME_BASED_allOf_job_title(
                    id = [12345678,"00000000-0000-0000-0000-000000000000"], 
                    name = 'Software Developer', ),
                seniority = dima_test_sdk.models.pay_as_you_go_time_based_all_of_seniority.PAY_AS_YOU_GO_TIME_BASED_allOf_seniority(
                    id = [12345678,"00000000-0000-0000-0000-000000000000"], ),
                state_code = 'CO',
                external_id = '00000000-0000-0000-0000-000000000000',
                who_reports = 'both',
                country_code = 'US',
                notice_period = 15,
                scope_of_work = 'Software development',
                special_clause = 'Special clause',
                termination_date = 'Fri Dec 31 01:00:00 CET 1999',
                type = 'pay_as_you_go_time_based',
                start_date = 'Fri Dec 31 01:00:00 CET 1999',
                compensation_details = None
            )
        else:
            return PAYASYOUGOTIMEBASED(
                meta = dima_test_sdk.models.pay_as_you_go_time_based_all_of_meta.PAY_AS_YOU_GO_TIME_BASED_allOf_meta(
                    is_main_income = True, 
                    documents_required = True, ),
                title = 'Software Developer',
                client = dima_test_sdk.models.pay_as_you_go_time_based_all_of_client.PAY_AS_YOU_GO_TIME_BASED_allOf_client(
                    team = dima_test_sdk.models.pay_as_you_go_time_based_all_of_client_team.PAY_AS_YOU_GO_TIME_BASED_allOf_client_team(
                        id = [12345678,"00000000-0000-0000-0000-000000000000"], ), 
                    legal_entity = dima_test_sdk.models.pay_as_you_go_time_based_all_of_client_legal_entity.PAY_AS_YOU_GO_TIME_BASED_allOf_client_legal_entity(
                        id = [12345678,"00000000-0000-0000-0000-000000000000"], ), ),
                job_title = dima_test_sdk.models.pay_as_you_go_time_based_all_of_job_title.PAY_AS_YOU_GO_TIME_BASED_allOf_job_title(
                    id = [12345678,"00000000-0000-0000-0000-000000000000"], 
                    name = 'Software Developer', ),
                type = 'pay_as_you_go_time_based',
                start_date = 'Fri Dec 31 01:00:00 CET 1999',
                compensation_details = None,
        )
        """

    def testPAYASYOUGOTIMEBASED(self):
        """Test PAYASYOUGOTIMEBASED"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
