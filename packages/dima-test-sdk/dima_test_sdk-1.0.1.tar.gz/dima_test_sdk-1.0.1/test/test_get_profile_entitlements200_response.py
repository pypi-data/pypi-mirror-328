# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dima_test_sdk.models.get_profile_entitlements200_response import GetProfileEntitlements200Response

class TestGetProfileEntitlements200Response(unittest.TestCase):
    """GetProfileEntitlements200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetProfileEntitlements200Response:
        """Test GetProfileEntitlements200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetProfileEntitlements200Response`
        """
        model = GetProfileEntitlements200Response()
        if include_optional:
            return GetProfileEntitlements200Response(
                entitlements = [
                    dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner.getProfileEntitlements_200_response_entitlements_inner(
                        id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                        used = '0', 
                        events = [
                            dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_events_inner.getProfileEntitlements_200_response_entitlements_inner_events_inner(
                                id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                type = 'ACCRUAL', 
                                amount = 8, 
                                policy_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                created_at = '2022-01-01T00:00Z', 
                                event_date = '2022-01-01T00:00Z', 
                                profile_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                updated_at = '2022-01-01T00:00Z', 
                                description = 'Event description', 
                                time_off_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                accrual_date = '2022-01-01T00:00Z', 
                                expiration_date = '2022-01-01T00:00Z', 
                                tracking_period = '2022-01-01T00:00Z', 
                                rollover_tracking_period = '2022-01-01T00:00Z', )
                            ], 
                        policy = dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_policy.getProfileEntitlements_200_response_entitlements_inner_policy(
                            id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                            name = 'Policy name', 
                            created_at = '2022-01-01T00:00Z', 
                            leave_type = 'SHORT_TERM_LEAVE', 
                            updated_at = '2022-01-01T00:00Z', 
                            description = 'Policy description', 
                            policy_type = dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_policy_policy_type.getProfileEntitlements_200_response_entitlements_inner_policy_policy_type(
                                id = 1, 
                                name = 'Policy type name', ), 
                            tracking_unit = 'HOUR', 
                            policy_type_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                            time_off_types = [
                                dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_policy_time_off_types_inner.getProfileEntitlements_200_response_entitlements_inner_policy_time_off_types_inner(
                                    id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                    name = 'Time off type name', )
                                ], 
                            tracking_cadence = 'FIXED_DAY', 
                            tracking_start_date = '2022-01-01T00:00Z', 
                            tracking_unit_amount = 8, ), 
                        accrued = '0', 
                        expired = '0', 
                        approved = '0', 
                        allowance = '0', 
                        available = '0', 
                        requested = '0', 
                        rollovers = [
                            dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_rollovers_inner.getProfileEntitlements_200_response_entitlements_inner_rollovers_inner(
                                amount = null, 
                                expiration_date = '2022-01-01T00:00Z', 
                                rollover_tracking_period = '2022-01-01T00:00Z', )
                            ], 
                        accrual_unit = 'HOUR', 
                        future_events = [
                            dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_events_inner.getProfileEntitlements_200_response_entitlements_inner_events_inner(
                                id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                type = 'ACCRUAL', 
                                amount = 8, 
                                policy_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                created_at = '2022-01-01T00:00Z', 
                                event_date = '2022-01-01T00:00Z', 
                                profile_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                updated_at = '2022-01-01T00:00Z', 
                                description = 'Event description', 
                                time_off_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                accrual_date = '2022-01-01T00:00Z', 
                                expiration_date = '2022-01-01T00:00Z', 
                                tracking_period = '2022-01-01T00:00Z', 
                                rollover_tracking_period = '2022-01-01T00:00Z', )
                            ], 
                        accrual_amount = '0', 
                        tracking_period = '2022-01-01T00:00:00Z', 
                        balance_adjusted = '0', 
                        time_off_event_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                        upcoming_accruals = '0', 
                        total_entitlements = '0', 
                        past_tracking_periods = [
                            ''
                            ], 
                        tracking_period_end_date = '2022-01-01T00:00:00Z', )
                    ],
                hris_profile_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851'
            )
        else:
            return GetProfileEntitlements200Response(
                entitlements = [
                    dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner.getProfileEntitlements_200_response_entitlements_inner(
                        id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                        used = '0', 
                        events = [
                            dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_events_inner.getProfileEntitlements_200_response_entitlements_inner_events_inner(
                                id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                type = 'ACCRUAL', 
                                amount = 8, 
                                policy_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                created_at = '2022-01-01T00:00Z', 
                                event_date = '2022-01-01T00:00Z', 
                                profile_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                updated_at = '2022-01-01T00:00Z', 
                                description = 'Event description', 
                                time_off_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                accrual_date = '2022-01-01T00:00Z', 
                                expiration_date = '2022-01-01T00:00Z', 
                                tracking_period = '2022-01-01T00:00Z', 
                                rollover_tracking_period = '2022-01-01T00:00Z', )
                            ], 
                        policy = dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_policy.getProfileEntitlements_200_response_entitlements_inner_policy(
                            id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                            name = 'Policy name', 
                            created_at = '2022-01-01T00:00Z', 
                            leave_type = 'SHORT_TERM_LEAVE', 
                            updated_at = '2022-01-01T00:00Z', 
                            description = 'Policy description', 
                            policy_type = dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_policy_policy_type.getProfileEntitlements_200_response_entitlements_inner_policy_policy_type(
                                id = 1, 
                                name = 'Policy type name', ), 
                            tracking_unit = 'HOUR', 
                            policy_type_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                            time_off_types = [
                                dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_policy_time_off_types_inner.getProfileEntitlements_200_response_entitlements_inner_policy_time_off_types_inner(
                                    id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                    name = 'Time off type name', )
                                ], 
                            tracking_cadence = 'FIXED_DAY', 
                            tracking_start_date = '2022-01-01T00:00Z', 
                            tracking_unit_amount = 8, ), 
                        accrued = '0', 
                        expired = '0', 
                        approved = '0', 
                        allowance = '0', 
                        available = '0', 
                        requested = '0', 
                        rollovers = [
                            dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_rollovers_inner.getProfileEntitlements_200_response_entitlements_inner_rollovers_inner(
                                amount = null, 
                                expiration_date = '2022-01-01T00:00Z', 
                                rollover_tracking_period = '2022-01-01T00:00Z', )
                            ], 
                        accrual_unit = 'HOUR', 
                        future_events = [
                            dima_test_sdk.models.get_profile_entitlements_200_response_entitlements_inner_events_inner.getProfileEntitlements_200_response_entitlements_inner_events_inner(
                                id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                type = 'ACCRUAL', 
                                amount = 8, 
                                policy_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                created_at = '2022-01-01T00:00Z', 
                                event_date = '2022-01-01T00:00Z', 
                                profile_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                updated_at = '2022-01-01T00:00Z', 
                                description = 'Event description', 
                                time_off_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                                accrual_date = '2022-01-01T00:00Z', 
                                expiration_date = '2022-01-01T00:00Z', 
                                tracking_period = '2022-01-01T00:00Z', 
                                rollover_tracking_period = '2022-01-01T00:00Z', )
                            ], 
                        accrual_amount = '0', 
                        tracking_period = '2022-01-01T00:00:00Z', 
                        balance_adjusted = '0', 
                        time_off_event_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                        upcoming_accruals = '0', 
                        total_entitlements = '0', 
                        past_tracking_periods = [
                            ''
                            ], 
                        tracking_period_end_date = '2022-01-01T00:00:00Z', )
                    ],
                hris_profile_id = 'd290f1ee-6c54-4b01-90e6-d701748f0851',
        )
        """

    def testGetProfileEntitlements200Response(self):
        """Test GetProfileEntitlements200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
