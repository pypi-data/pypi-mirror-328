# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dima_test_sdk.models.get_custom_field_from_contracts_by_id200_response import GetCustomFieldFromContractsById200Response

class TestGetCustomFieldFromContractsById200Response(unittest.TestCase):
    """GetCustomFieldFromContractsById200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetCustomFieldFromContractsById200Response:
        """Test GetCustomFieldFromContractsById200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetCustomFieldFromContractsById200Response`
        """
        model = GetCustomFieldFromContractsById200Response()
        if include_optional:
            return GetCustomFieldFromContractsById200Response(
                data = dima_test_sdk.models.get_custom_field_from_contracts_by_id_200_response_data.getCustomFieldFromContractsById_200_response_data(
                    id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                    name = 'Custom field name', 
                    type = null, 
                    settings = dima_test_sdk.models.get_custom_field_from_contracts_by_id_200_response_data_settings.getCustomFieldFromContractsById_200_response_data_settings(
                        access = dima_test_sdk.models.get_custom_field_from_contracts_by_id_200_response_data_settings_access.getCustomFieldFromContractsById_200_response_data_settings_access(
                            provided_by = [
                                'organization'
                                ], 
                            is_sensitive = True, ), 
                        required = True, 
                        countries = ["CA","GB","US"], 
                        is_enabled = True, 
                        worker_types = [
                            'eor'
                            ], ), 
                    placement = 'profile', 
                    created_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    description = 'Custom field description', )
            )
        else:
            return GetCustomFieldFromContractsById200Response(
                data = dima_test_sdk.models.get_custom_field_from_contracts_by_id_200_response_data.getCustomFieldFromContractsById_200_response_data(
                    id = 'd290f1ee-6c54-4b01-90e6-d701748f0851', 
                    name = 'Custom field name', 
                    type = null, 
                    settings = dima_test_sdk.models.get_custom_field_from_contracts_by_id_200_response_data_settings.getCustomFieldFromContractsById_200_response_data_settings(
                        access = dima_test_sdk.models.get_custom_field_from_contracts_by_id_200_response_data_settings_access.getCustomFieldFromContractsById_200_response_data_settings_access(
                            provided_by = [
                                'organization'
                                ], 
                            is_sensitive = True, ), 
                        required = True, 
                        countries = ["CA","GB","US"], 
                        is_enabled = True, 
                        worker_types = [
                            'eor'
                            ], ), 
                    placement = 'profile', 
                    created_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    description = 'Custom field description', ),
        )
        """

    def testGetCustomFieldFromContractsById200Response(self):
        """Test GetCustomFieldFromContractsById200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
