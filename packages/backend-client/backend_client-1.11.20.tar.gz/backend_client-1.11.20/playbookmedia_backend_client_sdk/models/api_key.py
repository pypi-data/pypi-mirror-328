# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from playbookmedia_backend_client_sdk.models.v1_status import V1Status
from typing import Optional, Set
from typing_extensions import Self

class APIKey(BaseModel):
    """
    APIKey represents an authentication token for accessing the API. It includes features for rate limiting, permissions, and usage tracking.  Key features: - Unique key identification - Scope-based access control - Rate limiting - Usage tracking - Expiration management - Multi-tenant support  Database considerations: - Uses GORM for ORM mapping - Includes indexes for efficient querying - Supports soft deletes  Usage example: ```go apiKey := &APIKey{     Name: \"Production API Key\",     Scopes: []string{\"leads:read\", \"leads:write\"},     ExpiresAt: timestamppb.New(time.Now().AddDate(1, 0, 0)), } ```
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    key_hash: Optional[StrictStr] = Field(default=None, alias="keyHash")
    key_prefix: Optional[StrictStr] = Field(default=None, alias="keyPrefix")
    scopes: Optional[List[StrictStr]] = None
    allowed_ips: Optional[List[StrictStr]] = Field(default=None, alias="allowedIps")
    allowed_domains: Optional[List[StrictStr]] = Field(default=None, alias="allowedDomains")
    allowed_environments: Optional[List[StrictStr]] = Field(default=None, alias="allowedEnvironments")
    is_test_key: Optional[StrictBool] = Field(default=None, alias="isTestKey")
    requests_per_second: Optional[StrictInt] = Field(default=None, alias="requestsPerSecond")
    requests_per_day: Optional[StrictInt] = Field(default=None, alias="requestsPerDay")
    concurrent_requests: Optional[StrictInt] = Field(default=None, alias="concurrentRequests")
    monthly_request_quota: Optional[StrictStr] = Field(default=None, alias="monthlyRequestQuota")
    cost_per_request: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="costPerRequest")
    billing_tier: Optional[StrictStr] = Field(default=None, alias="billingTier")
    total_requests: Optional[StrictStr] = Field(default=None, alias="totalRequests")
    total_errors: Optional[StrictStr] = Field(default=None, alias="totalErrors")
    last_used_at: Optional[datetime] = Field(default=None, alias="lastUsedAt")
    average_response_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averageResponseTime")
    endpoint_usage_json: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Tracks usage per endpoint", alias="endpointUsageJson")
    error_rates_json: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, alias="errorRatesJson")
    recent_errors: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, alias="recentErrors")
    successful_requests_count: Optional[StrictInt] = Field(default=None, alias="successfulRequestsCount")
    success_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="successRate")
    status: Optional[V1Status] = V1Status.UNSPECIFIED
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    expires_at: Optional[datetime] = Field(default=None, alias="expiresAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    last_rotated_at: Optional[datetime] = Field(default=None, alias="lastRotatedAt")
    last_security_review_at: Optional[datetime] = Field(default=None, alias="lastSecurityReviewAt")
    requires_client_secret: Optional[StrictBool] = Field(default=None, alias="requiresClientSecret")
    client_secret_hash: Optional[StrictStr] = Field(default=None, alias="clientSecretHash")
    enforce_https: Optional[StrictBool] = Field(default=None, alias="enforceHttps")
    enforce_signing: Optional[StrictBool] = Field(default=None, alias="enforceSigning")
    allowed_signature_algorithms: Optional[List[StrictStr]] = Field(default=None, alias="allowedSignatureAlgorithms")
    enforce_mutual_tls: Optional[StrictBool] = Field(default=None, alias="enforceMutualTls")
    client_certificate_hash: Optional[StrictStr] = Field(default=None, alias="clientCertificateHash")
    require_request_signing: Optional[StrictBool] = Field(default=None, alias="requireRequestSigning")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of key usage")
    metadata_json: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, alias="metadataJson")
    tags: Optional[List[StrictStr]] = None
    api_version: Optional[StrictStr] = Field(default=None, alias="apiVersion")
    supported_features: Optional[List[StrictStr]] = Field(default=None, alias="supportedFeatures")
    documentation_url: Optional[StrictStr] = Field(default=None, alias="documentationUrl")
    support_contact: Optional[StrictStr] = Field(default=None, alias="supportContact")
    log_all_requests: Optional[StrictBool] = Field(default=None, alias="logAllRequests")
    last_rotation_reason: Optional[StrictStr] = Field(default=None, alias="lastRotationReason")
    last_rotation_date: Optional[datetime] = Field(default=None, alias="lastRotationDate")
    rotation_frequency_days: Optional[StrictInt] = Field(default=None, alias="rotationFrequencyDays")
    compliance_standards: Optional[List[StrictStr]] = Field(default=None, alias="complianceStandards")
    requires_audit_logging: Optional[StrictBool] = Field(default=None, alias="requiresAuditLogging")
    data_residency: Optional[StrictStr] = Field(default=None, alias="dataResidency")
    approved_integrations: Optional[List[StrictStr]] = Field(default=None, alias="approvedIntegrations")
    alert_emails: Optional[List[StrictStr]] = Field(default=None, alias="alertEmails")
    webhook_url: Optional[StrictStr] = Field(default=None, alias="webhookUrl")
    alert_on_quota_threshold: Optional[StrictBool] = Field(default=None, alias="alertOnQuotaThreshold")
    quota_alert_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="quotaAlertThreshold")
    alert_on_error_spike: Optional[StrictBool] = Field(default=None, alias="alertOnErrorSpike")
    error_alert_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="errorAlertThreshold")
    monitoring_integrations: Optional[List[StrictStr]] = Field(default=None, alias="monitoringIntegrations")
    encrypted: Optional[StrictBool] = None
    data_classification: Optional[StrictStr] = Field(default=None, alias="dataClassification")
    max_uses: Optional[StrictInt] = Field(default=None, alias="maxUses")
    rate_limit: Optional[StrictInt] = Field(default=None, alias="rateLimit")
    __properties: ClassVar[List[str]] = ["id", "name", "keyHash", "keyPrefix", "scopes", "allowedIps", "allowedDomains", "allowedEnvironments", "isTestKey", "requestsPerSecond", "requestsPerDay", "concurrentRequests", "monthlyRequestQuota", "costPerRequest", "billingTier", "totalRequests", "totalErrors", "lastUsedAt", "averageResponseTime", "endpointUsageJson", "errorRatesJson", "recentErrors", "successfulRequestsCount", "successRate", "status", "createdAt", "updatedAt", "expiresAt", "deletedAt", "lastRotatedAt", "lastSecurityReviewAt", "requiresClientSecret", "clientSecretHash", "enforceHttps", "enforceSigning", "allowedSignatureAlgorithms", "enforceMutualTls", "clientCertificateHash", "requireRequestSigning", "description", "metadataJson", "tags", "apiVersion", "supportedFeatures", "documentationUrl", "supportContact", "logAllRequests", "lastRotationReason", "lastRotationDate", "rotationFrequencyDays", "complianceStandards", "requiresAuditLogging", "dataResidency", "approvedIntegrations", "alertEmails", "webhookUrl", "alertOnQuotaThreshold", "quotaAlertThreshold", "alertOnErrorSpike", "errorAlertThreshold", "monitoringIntegrations", "encrypted", "dataClassification", "maxUses", "rateLimit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "keyHash": obj.get("keyHash"),
            "keyPrefix": obj.get("keyPrefix"),
            "scopes": obj.get("scopes"),
            "allowedIps": obj.get("allowedIps"),
            "allowedDomains": obj.get("allowedDomains"),
            "allowedEnvironments": obj.get("allowedEnvironments"),
            "isTestKey": obj.get("isTestKey"),
            "requestsPerSecond": obj.get("requestsPerSecond"),
            "requestsPerDay": obj.get("requestsPerDay"),
            "concurrentRequests": obj.get("concurrentRequests"),
            "monthlyRequestQuota": obj.get("monthlyRequestQuota"),
            "costPerRequest": obj.get("costPerRequest"),
            "billingTier": obj.get("billingTier"),
            "totalRequests": obj.get("totalRequests"),
            "totalErrors": obj.get("totalErrors"),
            "lastUsedAt": obj.get("lastUsedAt"),
            "averageResponseTime": obj.get("averageResponseTime"),
            "endpointUsageJson": obj.get("endpointUsageJson"),
            "errorRatesJson": obj.get("errorRatesJson"),
            "recentErrors": obj.get("recentErrors"),
            "successfulRequestsCount": obj.get("successfulRequestsCount"),
            "successRate": obj.get("successRate"),
            "status": obj.get("status") if obj.get("status") is not None else V1Status.UNSPECIFIED,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "expiresAt": obj.get("expiresAt"),
            "deletedAt": obj.get("deletedAt"),
            "lastRotatedAt": obj.get("lastRotatedAt"),
            "lastSecurityReviewAt": obj.get("lastSecurityReviewAt"),
            "requiresClientSecret": obj.get("requiresClientSecret"),
            "clientSecretHash": obj.get("clientSecretHash"),
            "enforceHttps": obj.get("enforceHttps"),
            "enforceSigning": obj.get("enforceSigning"),
            "allowedSignatureAlgorithms": obj.get("allowedSignatureAlgorithms"),
            "enforceMutualTls": obj.get("enforceMutualTls"),
            "clientCertificateHash": obj.get("clientCertificateHash"),
            "requireRequestSigning": obj.get("requireRequestSigning"),
            "description": obj.get("description"),
            "metadataJson": obj.get("metadataJson"),
            "tags": obj.get("tags"),
            "apiVersion": obj.get("apiVersion"),
            "supportedFeatures": obj.get("supportedFeatures"),
            "documentationUrl": obj.get("documentationUrl"),
            "supportContact": obj.get("supportContact"),
            "logAllRequests": obj.get("logAllRequests"),
            "lastRotationReason": obj.get("lastRotationReason"),
            "lastRotationDate": obj.get("lastRotationDate"),
            "rotationFrequencyDays": obj.get("rotationFrequencyDays"),
            "complianceStandards": obj.get("complianceStandards"),
            "requiresAuditLogging": obj.get("requiresAuditLogging"),
            "dataResidency": obj.get("dataResidency"),
            "approvedIntegrations": obj.get("approvedIntegrations"),
            "alertEmails": obj.get("alertEmails"),
            "webhookUrl": obj.get("webhookUrl"),
            "alertOnQuotaThreshold": obj.get("alertOnQuotaThreshold"),
            "quotaAlertThreshold": obj.get("quotaAlertThreshold"),
            "alertOnErrorSpike": obj.get("alertOnErrorSpike"),
            "errorAlertThreshold": obj.get("errorAlertThreshold"),
            "monitoringIntegrations": obj.get("monitoringIntegrations"),
            "encrypted": obj.get("encrypted"),
            "dataClassification": obj.get("dataClassification"),
            "maxUses": obj.get("maxUses"),
            "rateLimit": obj.get("rateLimit")
        })
        return _obj


