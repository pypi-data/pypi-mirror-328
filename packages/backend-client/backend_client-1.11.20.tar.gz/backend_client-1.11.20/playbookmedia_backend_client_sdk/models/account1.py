# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.compliance_level import ComplianceLevel
from playbookmedia_backend_client_sdk.models.data_profile import DataProfile
from playbookmedia_backend_client_sdk.models.workspace1 import Workspace1
from typing import Optional, Set
from typing_extensions import Self

class Account1(BaseModel):
    """
    Account1
    """ # noqa: E501
    id: Optional[StrictStr] = None
    auth0_user_id: Optional[StrictStr] = Field(default=None, alias="auth0UserId")
    email: Optional[StrictStr] = None
    base_directory: Optional[StrictStr] = Field(default=None, alias="baseDirectory")
    bucket_name: Optional[StrictStr] = Field(default=None, alias="bucketName")
    region: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = Field(default=None, alias="orgId")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    roles: Optional[List[StrictStr]] = None
    permissions: Optional[List[StrictStr]] = None
    mfa_enabled: Optional[StrictBool] = Field(default=None, alias="mfaEnabled")
    compliance_level: Optional[ComplianceLevel] = Field(default=ComplianceLevel.UNSPECIFIED, alias="complianceLevel")
    preferences: Optional[Dict[str, StrictStr]] = None
    api_keys: Optional[List[StrictStr]] = Field(default=None, alias="apiKeys")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    workspaces: Optional[List[Workspace1]] = None
    data_profiles: Optional[List[DataProfile]] = Field(default=None, alias="dataProfiles")
    __properties: ClassVar[List[str]] = ["id", "auth0UserId", "email", "baseDirectory", "bucketName", "region", "orgId", "tenantId", "roles", "permissions", "mfaEnabled", "complianceLevel", "preferences", "apiKeys", "createdAt", "updatedAt", "deletedAt", "workspaces", "dataProfiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in workspaces (list)
        _items = []
        if self.workspaces:
            for _item in self.workspaces:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workspaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_profiles (list)
        _items = []
        if self.data_profiles:
            for _item in self.data_profiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataProfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "auth0UserId": obj.get("auth0UserId"),
            "email": obj.get("email"),
            "baseDirectory": obj.get("baseDirectory"),
            "bucketName": obj.get("bucketName"),
            "region": obj.get("region"),
            "orgId": obj.get("orgId"),
            "tenantId": obj.get("tenantId"),
            "roles": obj.get("roles"),
            "permissions": obj.get("permissions"),
            "mfaEnabled": obj.get("mfaEnabled"),
            "complianceLevel": obj.get("complianceLevel") if obj.get("complianceLevel") is not None else ComplianceLevel.UNSPECIFIED,
            "preferences": obj.get("preferences"),
            "apiKeys": obj.get("apiKeys"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "deletedAt": obj.get("deletedAt"),
            "workspaces": [Workspace1.from_dict(_item) for _item in obj["workspaces"]] if obj.get("workspaces") is not None else None,
            "dataProfiles": [DataProfile.from_dict(_item) for _item in obj["dataProfiles"]] if obj.get("dataProfiles") is not None else None
        })
        return _obj


