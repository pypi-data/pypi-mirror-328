# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from playbookmedia_backend_client_sdk.models.business_hours import BusinessHours
from playbookmedia_backend_client_sdk.models.employee_benefit import EmployeeBenefit
from playbookmedia_backend_client_sdk.models.revenue_range import RevenueRange
from playbookmedia_backend_client_sdk.models.review import Review
from typing import Optional, Set
from typing_extensions import Self

class Lead(BaseModel):
    """
    Lead
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    google_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="googleRating")
    review_count: Optional[StrictInt] = Field(default=None, alias="reviewCount")
    industry: Optional[StrictStr] = None
    employee_count: Optional[StrictInt] = Field(default=None, alias="employeeCount")
    estimated_revenue: Optional[StrictStr] = Field(default=None, alias="estimatedRevenue")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    place_id: Optional[StrictStr] = Field(default=None, alias="placeId")
    google_maps_url: Optional[StrictStr] = Field(default=None, alias="googleMapsUrl")
    business_status: Optional[StrictStr] = Field(default=None, alias="businessStatus")
    regular_hours: Optional[List[BusinessHours]] = Field(default=None, alias="regularHours")
    special_hours: Optional[List[BusinessHours]] = Field(default=None, alias="specialHours")
    photo_references: Optional[List[StrictStr]] = Field(default=None, description="Google Places photo IDs", alias="photoReferences")
    main_photo_url: Optional[StrictStr] = Field(default=None, alias="mainPhotoUrl")
    reviews: Optional[List[Review]] = None
    types: Optional[List[StrictStr]] = Field(default=None, description="Google Places types")
    amenities: Optional[List[StrictStr]] = None
    serves_vegetarian_food: Optional[StrictBool] = Field(default=None, alias="servesVegetarianFood")
    outdoor_seating: Optional[StrictBool] = Field(default=None, alias="outdoorSeating")
    payment_methods: Optional[List[StrictStr]] = Field(default=None, description="visa, amex, cash, etc", alias="paymentMethods")
    wheelchair_accessible: Optional[StrictBool] = Field(default=None, alias="wheelchairAccessible")
    parking_available: Optional[StrictBool] = Field(default=None, alias="parkingAvailable")
    social_media: Optional[Dict[str, StrictStr]] = Field(default=None, description="platform -> url", alias="socialMedia")
    rating_category: Optional[StrictStr] = Field(default=None, alias="ratingCategory")
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    count: Optional[StrictInt] = None
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    data_source_version: Optional[StrictStr] = Field(default=None, alias="dataSourceVersion")
    scraping_session_id: Optional[StrictStr] = Field(default=None, alias="scrapingSessionId")
    alternate_phones: Optional[List[StrictStr]] = Field(default=None, alias="alternatePhones")
    contact_person_name: Optional[StrictStr] = Field(default=None, alias="contactPersonName")
    contact_person_title: Optional[StrictStr] = Field(default=None, alias="contactPersonTitle")
    contact_email: Optional[StrictStr] = Field(default=None, alias="contactEmail")
    founded_year: Optional[StrictInt] = Field(default=None, alias="foundedYear")
    business_type: Optional[StrictStr] = Field(default=None, alias="businessType")
    certifications: Optional[List[StrictStr]] = None
    license_number: Optional[StrictStr] = Field(default=None, alias="licenseNumber")
    revenue_range: Optional[RevenueRange] = Field(default=RevenueRange.UNSPECIFIED, alias="revenueRange")
    funding_stage: Optional[StrictStr] = Field(default=None, alias="fundingStage")
    is_public_company: Optional[StrictBool] = Field(default=None, alias="isPublicCompany")
    website_load_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="In seconds", alias="websiteLoadSpeed")
    has_ssl_certificate: Optional[StrictBool] = Field(default=None, alias="hasSslCertificate")
    cms_used: Optional[StrictStr] = Field(default=None, alias="cmsUsed")
    ecommerce_platforms: Optional[List[StrictStr]] = Field(default=None, alias="ecommercePlatforms")
    timezone: Optional[StrictStr] = None
    neighborhood: Optional[StrictStr] = None
    nearby_landmarks: Optional[List[StrictStr]] = Field(default=None, alias="nearbyLandmarks")
    transportation_access: Optional[StrictStr] = Field(default=None, alias="transportationAccess")
    employee_benefits: Optional[List[EmployeeBenefit]] = Field(default=None, alias="employeeBenefits")
    parent_company: Optional[StrictStr] = Field(default=None, alias="parentCompany")
    subsidiaries: Optional[List[StrictStr]] = None
    is_franchise: Optional[StrictBool] = Field(default=None, alias="isFranchise")
    seo_keywords: Optional[List[StrictStr]] = Field(default=None, alias="seoKeywords")
    uses_google_ads: Optional[StrictBool] = Field(default=None, alias="usesGoogleAds")
    google_my_business_category: Optional[StrictStr] = Field(default=None, alias="googleMyBusinessCategory")
    naics_code: Optional[StrictStr] = Field(default=None, alias="naicsCode")
    sic_code: Optional[StrictStr] = Field(default=None, alias="sicCode")
    unspsc_code: Optional[StrictStr] = Field(default=None, alias="unspscCode")
    is_green_certified: Optional[StrictBool] = Field(default=None, alias="isGreenCertified")
    energy_sources: Optional[List[StrictStr]] = Field(default=None, alias="energySources")
    sustainability_rating: Optional[StrictStr] = Field(default=None, alias="sustainabilityRating")
    recent_announcements: Optional[List[StrictStr]] = Field(default=None, alias="recentAnnouncements")
    last_product_launch: Optional[datetime] = Field(default=None, alias="lastProductLaunch")
    has_litigation_history: Optional[StrictBool] = Field(default=None, alias="hasLitigationHistory")
    export_control_status: Optional[StrictStr] = Field(default=None, alias="exportControlStatus")
    __properties: ClassVar[List[str]] = ["id", "name", "website", "phone", "address", "city", "state", "country", "latitude", "longitude", "googleRating", "reviewCount", "industry", "employeeCount", "estimatedRevenue", "createdAt", "updatedAt", "deletedAt", "placeId", "googleMapsUrl", "businessStatus", "regularHours", "specialHours", "photoReferences", "mainPhotoUrl", "reviews", "types", "amenities", "servesVegetarianFood", "outdoorSeating", "paymentMethods", "wheelchairAccessible", "parkingAvailable", "socialMedia", "ratingCategory", "rating", "count", "lastUpdated", "dataSourceVersion", "scrapingSessionId", "alternatePhones", "contactPersonName", "contactPersonTitle", "contactEmail", "foundedYear", "businessType", "certifications", "licenseNumber", "revenueRange", "fundingStage", "isPublicCompany", "websiteLoadSpeed", "hasSslCertificate", "cmsUsed", "ecommercePlatforms", "timezone", "neighborhood", "nearbyLandmarks", "transportationAccess", "employeeBenefits", "parentCompany", "subsidiaries", "isFranchise", "seoKeywords", "usesGoogleAds", "googleMyBusinessCategory", "naicsCode", "sicCode", "unspscCode", "isGreenCertified", "energySources", "sustainabilityRating", "recentAnnouncements", "lastProductLaunch", "hasLitigationHistory", "exportControlStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Lead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in regular_hours (list)
        _items = []
        if self.regular_hours:
            for _item in self.regular_hours:
                if _item:
                    _items.append(_item.to_dict())
            _dict['regularHours'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_hours (list)
        _items = []
        if self.special_hours:
            for _item in self.special_hours:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specialHours'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviews (list)
        _items = []
        if self.reviews:
            for _item in self.reviews:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reviews'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Lead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "website": obj.get("website"),
            "phone": obj.get("phone"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "googleRating": obj.get("googleRating"),
            "reviewCount": obj.get("reviewCount"),
            "industry": obj.get("industry"),
            "employeeCount": obj.get("employeeCount"),
            "estimatedRevenue": obj.get("estimatedRevenue"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "deletedAt": obj.get("deletedAt"),
            "placeId": obj.get("placeId"),
            "googleMapsUrl": obj.get("googleMapsUrl"),
            "businessStatus": obj.get("businessStatus"),
            "regularHours": [BusinessHours.from_dict(_item) for _item in obj["regularHours"]] if obj.get("regularHours") is not None else None,
            "specialHours": [BusinessHours.from_dict(_item) for _item in obj["specialHours"]] if obj.get("specialHours") is not None else None,
            "photoReferences": obj.get("photoReferences"),
            "mainPhotoUrl": obj.get("mainPhotoUrl"),
            "reviews": [Review.from_dict(_item) for _item in obj["reviews"]] if obj.get("reviews") is not None else None,
            "types": obj.get("types"),
            "amenities": obj.get("amenities"),
            "servesVegetarianFood": obj.get("servesVegetarianFood"),
            "outdoorSeating": obj.get("outdoorSeating"),
            "paymentMethods": obj.get("paymentMethods"),
            "wheelchairAccessible": obj.get("wheelchairAccessible"),
            "parkingAvailable": obj.get("parkingAvailable"),
            "socialMedia": obj.get("socialMedia"),
            "ratingCategory": obj.get("ratingCategory"),
            "rating": obj.get("rating"),
            "count": obj.get("count"),
            "lastUpdated": obj.get("lastUpdated"),
            "dataSourceVersion": obj.get("dataSourceVersion"),
            "scrapingSessionId": obj.get("scrapingSessionId"),
            "alternatePhones": obj.get("alternatePhones"),
            "contactPersonName": obj.get("contactPersonName"),
            "contactPersonTitle": obj.get("contactPersonTitle"),
            "contactEmail": obj.get("contactEmail"),
            "foundedYear": obj.get("foundedYear"),
            "businessType": obj.get("businessType"),
            "certifications": obj.get("certifications"),
            "licenseNumber": obj.get("licenseNumber"),
            "revenueRange": obj.get("revenueRange") if obj.get("revenueRange") is not None else RevenueRange.UNSPECIFIED,
            "fundingStage": obj.get("fundingStage"),
            "isPublicCompany": obj.get("isPublicCompany"),
            "websiteLoadSpeed": obj.get("websiteLoadSpeed"),
            "hasSslCertificate": obj.get("hasSslCertificate"),
            "cmsUsed": obj.get("cmsUsed"),
            "ecommercePlatforms": obj.get("ecommercePlatforms"),
            "timezone": obj.get("timezone"),
            "neighborhood": obj.get("neighborhood"),
            "nearbyLandmarks": obj.get("nearbyLandmarks"),
            "transportationAccess": obj.get("transportationAccess"),
            "employeeBenefits": obj.get("employeeBenefits"),
            "parentCompany": obj.get("parentCompany"),
            "subsidiaries": obj.get("subsidiaries"),
            "isFranchise": obj.get("isFranchise"),
            "seoKeywords": obj.get("seoKeywords"),
            "usesGoogleAds": obj.get("usesGoogleAds"),
            "googleMyBusinessCategory": obj.get("googleMyBusinessCategory"),
            "naicsCode": obj.get("naicsCode"),
            "sicCode": obj.get("sicCode"),
            "unspscCode": obj.get("unspscCode"),
            "isGreenCertified": obj.get("isGreenCertified"),
            "energySources": obj.get("energySources"),
            "sustainabilityRating": obj.get("sustainabilityRating"),
            "recentAnnouncements": obj.get("recentAnnouncements"),
            "lastProductLaunch": obj.get("lastProductLaunch"),
            "hasLitigationHistory": obj.get("hasLitigationHistory"),
            "exportControlStatus": obj.get("exportControlStatus")
        })
        return _obj


