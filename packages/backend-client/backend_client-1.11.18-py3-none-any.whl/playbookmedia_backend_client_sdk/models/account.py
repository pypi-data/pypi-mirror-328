# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.account_settings import AccountSettings
from playbookmedia_backend_client_sdk.models.account_status import AccountStatus
from playbookmedia_backend_client_sdk.models.permission import Permission
from playbookmedia_backend_client_sdk.models.role import Role
from playbookmedia_backend_client_sdk.models.timezone import Timezone
from playbookmedia_backend_client_sdk.models.workspace import Workspace
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Account represents a user account within the workspace service. It serves as the top-level container for all user-specific workspaces and settings.  Key features: - Unique identification via Auth0 - Organization and tenant context - Audit timestamps - Associated scraping jobs  Database considerations: - Uses GORM for ORM mapping - Includes indexes for efficient querying - Supports soft deletes via deleted_at  Usage example: ```go account := &Account{     AuthPlatformUserId: \"auth0|123\",     OrgId: \"org_123\",     TenantId: \"tenant_456\", } ```
    """ # noqa: E501
    id: Optional[StrictStr] = None
    auth_platform_user_id: Optional[StrictStr] = Field(default=None, alias="authPlatformUserId")
    email: Optional[StrictStr] = None
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    account_status: Optional[AccountStatus] = Field(default=AccountStatus.UNSPECIFIED, alias="accountStatus")
    roles: Optional[List[Role]] = None
    permissions: Optional[List[Permission]] = None
    mfa_enabled: Optional[StrictBool] = Field(default=None, alias="mfaEnabled")
    last_login_at: Optional[datetime] = Field(default=None, alias="lastLoginAt")
    timezone: Optional[Timezone] = Timezone.UNSPECIFIED
    total_jobs_run: Optional[StrictInt] = Field(default=None, alias="totalJobsRun")
    monthly_job_limit: Optional[StrictInt] = Field(default=None, alias="monthlyJobLimit")
    concurrent_job_limit: Optional[StrictInt] = Field(default=None, alias="concurrentJobLimit")
    workspaces: Optional[List[Workspace]] = None
    settings: Optional[AccountSettings] = None
    __properties: ClassVar[List[str]] = ["id", "authPlatformUserId", "email", "deletedAt", "createdAt", "accountStatus", "roles", "permissions", "mfaEnabled", "lastLoginAt", "timezone", "totalJobsRun", "monthlyJobLimit", "concurrentJobLimit", "workspaces", "settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in workspaces (list)
        _items = []
        if self.workspaces:
            for _item in self.workspaces:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workspaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "authPlatformUserId": obj.get("authPlatformUserId"),
            "email": obj.get("email"),
            "deletedAt": obj.get("deletedAt"),
            "createdAt": obj.get("createdAt"),
            "accountStatus": obj.get("accountStatus") if obj.get("accountStatus") is not None else AccountStatus.UNSPECIFIED,
            "roles": obj.get("roles"),
            "permissions": obj.get("permissions"),
            "mfaEnabled": obj.get("mfaEnabled"),
            "lastLoginAt": obj.get("lastLoginAt"),
            "timezone": obj.get("timezone") if obj.get("timezone") is not None else Timezone.UNSPECIFIED,
            "totalJobsRun": obj.get("totalJobsRun"),
            "monthlyJobLimit": obj.get("monthlyJobLimit"),
            "concurrentJobLimit": obj.get("concurrentJobLimit"),
            "workspaces": [Workspace.from_dict(_item) for _item in obj["workspaces"]] if obj.get("workspaces") is not None else None,
            "settings": AccountSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None
        })
        return _obj


