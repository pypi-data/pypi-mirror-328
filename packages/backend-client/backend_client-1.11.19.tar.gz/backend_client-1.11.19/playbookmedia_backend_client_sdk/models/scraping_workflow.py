# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from playbookmedia_backend_client_sdk.models.output_format import OutputFormat
from playbookmedia_backend_client_sdk.models.scraping_job import ScrapingJob
from playbookmedia_backend_client_sdk.models.workflow_status import WorkflowStatus
from typing import Optional, Set
from typing_extensions import Self

class ScrapingWorkflow(BaseModel):
    """
    ScrapingWorkflow
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    cron_expression: Optional[StrictStr] = Field(default=None, alias="cronExpression")
    next_run_time: Optional[datetime] = Field(default=None, alias="nextRunTime")
    last_run_time: Optional[datetime] = Field(default=None, alias="lastRunTime")
    status: Optional[WorkflowStatus] = WorkflowStatus.UNSPECIFIED
    retry_count: Optional[StrictInt] = Field(default=None, alias="retryCount")
    max_retries: Optional[StrictInt] = Field(default=None, alias="maxRetries")
    alert_emails: Optional[StrictStr] = Field(default=None, alias="alertEmails")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    jobs: Optional[List[ScrapingJob]] = None
    geo_fencing_radius: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="geoFencingRadius")
    geo_fencing_lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="geoFencingLat")
    geo_fencing_lon: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="geoFencingLon")
    geo_fencing_zoom_min: Optional[StrictInt] = Field(default=None, alias="geoFencingZoomMin")
    geo_fencing_zoom_max: Optional[StrictInt] = Field(default=None, alias="geoFencingZoomMax")
    include_reviews: Optional[StrictBool] = Field(default=None, alias="includeReviews")
    include_photos: Optional[StrictBool] = Field(default=None, alias="includePhotos")
    include_business_hours: Optional[StrictBool] = Field(default=None, alias="includeBusinessHours")
    max_reviews_per_business: Optional[StrictInt] = Field(default=None, alias="maxReviewsPerBusiness")
    output_format: Optional[OutputFormat] = Field(default=OutputFormat.UNSPECIFIED, alias="outputFormat")
    output_destination: Optional[StrictStr] = Field(default=None, alias="outputDestination")
    data_retention: Optional[StrictStr] = Field(default=None, alias="dataRetention")
    anonymize_pii: Optional[StrictBool] = Field(default=None, alias="anonymizePii")
    notification_slack_channel: Optional[StrictStr] = Field(default=None, alias="notificationSlackChannel")
    notification_email_group: Optional[StrictStr] = Field(default=None, alias="notificationEmailGroup")
    notification_notify_on_start: Optional[StrictBool] = Field(default=None, alias="notificationNotifyOnStart")
    notification_notify_on_complete: Optional[StrictBool] = Field(default=None, alias="notificationNotifyOnComplete")
    notification_notify_on_failure: Optional[StrictBool] = Field(default=None, alias="notificationNotifyOnFailure")
    content_filter_allowed_countries: Optional[List[StrictStr]] = Field(default=None, alias="contentFilterAllowedCountries")
    content_filter_excluded_types: Optional[List[StrictStr]] = Field(default=None, alias="contentFilterExcludedTypes")
    content_filter_minimum_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="contentFilterMinimumRating")
    content_filter_minimum_reviews: Optional[StrictInt] = Field(default=None, alias="contentFilterMinimumReviews")
    qos_max_concurrent_requests: Optional[StrictInt] = Field(default=None, alias="qosMaxConcurrentRequests")
    qos_max_retries: Optional[StrictInt] = Field(default=None, alias="qosMaxRetries")
    qos_request_timeout: Optional[StrictStr] = Field(default=None, alias="qosRequestTimeout")
    qos_enable_javascript: Optional[StrictBool] = Field(default=None, alias="qosEnableJavascript")
    respect_robots_txt: Optional[StrictBool] = Field(default=None, alias="respectRobotsTxt")
    accept_terms_of_service: Optional[StrictBool] = Field(default=None, alias="acceptTermsOfService")
    user_agent: Optional[StrictStr] = Field(default=None, alias="userAgent")
    search_terms: Optional[List[StrictStr]] = Field(default=None, alias="searchTerms")
    scheduled_entry_id: Optional[StrictStr] = Field(default=None, alias="scheduledEntryId")
    __properties: ClassVar[List[str]] = ["id", "name", "cronExpression", "nextRunTime", "lastRunTime", "status", "retryCount", "maxRetries", "alertEmails", "createdAt", "updatedAt", "deletedAt", "jobs", "geoFencingRadius", "geoFencingLat", "geoFencingLon", "geoFencingZoomMin", "geoFencingZoomMax", "includeReviews", "includePhotos", "includeBusinessHours", "maxReviewsPerBusiness", "outputFormat", "outputDestination", "dataRetention", "anonymizePii", "notificationSlackChannel", "notificationEmailGroup", "notificationNotifyOnStart", "notificationNotifyOnComplete", "notificationNotifyOnFailure", "contentFilterAllowedCountries", "contentFilterExcludedTypes", "contentFilterMinimumRating", "contentFilterMinimumReviews", "qosMaxConcurrentRequests", "qosMaxRetries", "qosRequestTimeout", "qosEnableJavascript", "respectRobotsTxt", "acceptTermsOfService", "userAgent", "searchTerms", "scheduledEntryId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScrapingWorkflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item in self.jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScrapingWorkflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "cronExpression": obj.get("cronExpression"),
            "nextRunTime": obj.get("nextRunTime"),
            "lastRunTime": obj.get("lastRunTime"),
            "status": obj.get("status") if obj.get("status") is not None else WorkflowStatus.UNSPECIFIED,
            "retryCount": obj.get("retryCount"),
            "maxRetries": obj.get("maxRetries"),
            "alertEmails": obj.get("alertEmails"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "deletedAt": obj.get("deletedAt"),
            "jobs": [ScrapingJob.from_dict(_item) for _item in obj["jobs"]] if obj.get("jobs") is not None else None,
            "geoFencingRadius": obj.get("geoFencingRadius"),
            "geoFencingLat": obj.get("geoFencingLat"),
            "geoFencingLon": obj.get("geoFencingLon"),
            "geoFencingZoomMin": obj.get("geoFencingZoomMin"),
            "geoFencingZoomMax": obj.get("geoFencingZoomMax"),
            "includeReviews": obj.get("includeReviews"),
            "includePhotos": obj.get("includePhotos"),
            "includeBusinessHours": obj.get("includeBusinessHours"),
            "maxReviewsPerBusiness": obj.get("maxReviewsPerBusiness"),
            "outputFormat": obj.get("outputFormat") if obj.get("outputFormat") is not None else OutputFormat.UNSPECIFIED,
            "outputDestination": obj.get("outputDestination"),
            "dataRetention": obj.get("dataRetention"),
            "anonymizePii": obj.get("anonymizePii"),
            "notificationSlackChannel": obj.get("notificationSlackChannel"),
            "notificationEmailGroup": obj.get("notificationEmailGroup"),
            "notificationNotifyOnStart": obj.get("notificationNotifyOnStart"),
            "notificationNotifyOnComplete": obj.get("notificationNotifyOnComplete"),
            "notificationNotifyOnFailure": obj.get("notificationNotifyOnFailure"),
            "contentFilterAllowedCountries": obj.get("contentFilterAllowedCountries"),
            "contentFilterExcludedTypes": obj.get("contentFilterExcludedTypes"),
            "contentFilterMinimumRating": obj.get("contentFilterMinimumRating"),
            "contentFilterMinimumReviews": obj.get("contentFilterMinimumReviews"),
            "qosMaxConcurrentRequests": obj.get("qosMaxConcurrentRequests"),
            "qosMaxRetries": obj.get("qosMaxRetries"),
            "qosRequestTimeout": obj.get("qosRequestTimeout"),
            "qosEnableJavascript": obj.get("qosEnableJavascript"),
            "respectRobotsTxt": obj.get("respectRobotsTxt"),
            "acceptTermsOfService": obj.get("acceptTermsOfService"),
            "userAgent": obj.get("userAgent"),
            "searchTerms": obj.get("searchTerms"),
            "scheduledEntryId": obj.get("scheduledEntryId")
        })
        return _obj


