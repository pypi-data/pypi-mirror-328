# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.ai_assistance_log import AIAssistanceLog
from playbookmedia_backend_client_sdk.models.document_status import DocumentStatus
from playbookmedia_backend_client_sdk.models.document_version import DocumentVersion
from playbookmedia_backend_client_sdk.models.negotiation_history import NegotiationHistory
from playbookmedia_backend_client_sdk.models.signature_request import SignatureRequest
from typing import Optional, Set
from typing_extensions import Self

class DocumentInstance(BaseModel):
    """
    DocumentInstance
    """ # noqa: E501
    id: Optional[StrictStr] = None
    template_id: Optional[StrictStr] = Field(default=None, alias="templateId")
    status: Optional[DocumentStatus] = DocumentStatus.UNSPECIFIED
    field_values: Optional[Dict[str, StrictStr]] = Field(default=None, alias="fieldValues")
    signers: Optional[List[StrictStr]] = None
    language: Optional[StrictStr] = None
    is_completed: Optional[StrictBool] = Field(default=None, alias="isCompleted")
    due_date: Optional[datetime] = Field(default=None, alias="dueDate")
    generated_content: Optional[StrictStr] = Field(default=None, alias="generatedContent")
    attachments: Optional[List[StrictStr]] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    signature_requests: Optional[List[SignatureRequest]] = Field(default=None, alias="signatureRequests")
    ai_assistance: Optional[List[AIAssistanceLog]] = Field(default=None, alias="aiAssistance")
    negotiation: Optional[NegotiationHistory] = None
    versions: Optional[List[DocumentVersion]] = None
    __properties: ClassVar[List[str]] = ["id", "templateId", "status", "fieldValues", "signers", "language", "isCompleted", "dueDate", "generatedContent", "attachments", "createdAt", "updatedAt", "signatureRequests", "aiAssistance", "negotiation", "versions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in signature_requests (list)
        _items = []
        if self.signature_requests:
            for _item in self.signature_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['signatureRequests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ai_assistance (list)
        _items = []
        if self.ai_assistance:
            for _item in self.ai_assistance:
                if _item:
                    _items.append(_item.to_dict())
            _dict['aiAssistance'] = _items
        # override the default output from pydantic by calling `to_dict()` of negotiation
        if self.negotiation:
            _dict['negotiation'] = self.negotiation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in versions (list)
        _items = []
        if self.versions:
            for _item in self.versions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['versions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "templateId": obj.get("templateId"),
            "status": obj.get("status") if obj.get("status") is not None else DocumentStatus.UNSPECIFIED,
            "fieldValues": obj.get("fieldValues"),
            "signers": obj.get("signers"),
            "language": obj.get("language"),
            "isCompleted": obj.get("isCompleted"),
            "dueDate": obj.get("dueDate"),
            "generatedContent": obj.get("generatedContent"),
            "attachments": obj.get("attachments"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "signatureRequests": [SignatureRequest.from_dict(_item) for _item in obj["signatureRequests"]] if obj.get("signatureRequests") is not None else None,
            "aiAssistance": [AIAssistanceLog.from_dict(_item) for _item in obj["aiAssistance"]] if obj.get("aiAssistance") is not None else None,
            "negotiation": NegotiationHistory.from_dict(obj["negotiation"]) if obj.get("negotiation") is not None else None,
            "versions": [DocumentVersion.from_dict(_item) for _item in obj["versions"]] if obj.get("versions") is not None else None
        })
        return _obj


