# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from playbookmedia_backend_client_sdk.models.marketplace_app import MarketplaceApp

class TestMarketplaceApp(unittest.TestCase):
    """MarketplaceApp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MarketplaceApp:
        """Test MarketplaceApp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MarketplaceApp`
        """
        model = MarketplaceApp()
        if include_optional:
            return MarketplaceApp(
                id = '',
                name = '',
                description = '',
                developer_id = '',
                category = 'APP_CATEGORY_UNSPECIFIED',
                supported_contract_types = [
                    ''
                    ],
                features = [
                    ''
                    ],
                pricing_model = 'PRICING_MODEL_UNSPECIFIED',
                pricing_tiers = {
                    'key' : 1.337
                    },
                supported_integrations = [
                    ''
                    ],
                is_verified = True,
                rating = 1.337,
                installation_count = 56,
                required_permissions = [
                    ''
                    ],
                metadata = {
                    'key' : ''
                    },
                documentation_url = '',
                support_email = '',
                screenshots = [
                    ''
                    ],
                privacy_policy_url = '',
                terms_url = '',
                published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                versions = [
                    playbookmedia_backend_client_sdk.models.app_version.AppVersion(
                        id = '', 
                        app_id = '', 
                        version_number = '', 
                        changelog = '', 
                        requirements = {
                            'key' : ''
                            }, 
                        is_public = True, 
                        release_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                installations = [
                    playbookmedia_backend_client_sdk.models.app_installation.AppInstallation(
                        id = '', 
                        app_id = '', 
                        workspace_id = '', 
                        version_installed = '', 
                        configuration = {
                            'key' : ''
                            }, 
                        installation_status = '', 
                        installed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_used = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                analytics = [
                    playbookmedia_backend_client_sdk.models.app_analytics.AppAnalytics(
                        id = '', 
                        app_id = '', 
                        metric_name = '', 
                        metric_value = 1.337, 
                        dimensions = {
                            'key' : ''
                            }, 
                        recorded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                reviews = [
                    playbookmedia_backend_client_sdk.models.app_review.AppReview(
                        id = '', 
                        app_id = '', 
                        reviewer_id = '', 
                        rating = 1.337, 
                        review_text = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                info = playbookmedia_backend_client_sdk.models.app_development_info.AppDevelopmentInfo(
                    id = '', 
                    app_id = '', 
                    supported_languages = [
                        ''
                        ], 
                    sdk_features = [
                        ''
                        ], 
                    test_coverage = {
                        'key' : 1.337
                        }, 
                    security_scans = [
                        ''
                        ], 
                    performance_metrics = {
                        'key' : ''
                        }, 
                    development_status = '', 
                    known_issues = [
                        ''
                        ], 
                    roadmap_url = '', 
                    last_security_audit = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                webhooks = [
                    playbookmedia_backend_client_sdk.models.app_webhook.AppWebhook(
                        id = '', 
                        app_id = '', 
                        url = '', 
                        subscribed_events = [
                            ''
                            ], 
                        secret_key = '', 
                        retry_count = 56, 
                        timeout_seconds = 56, 
                        is_active = True, 
                        headers = {
                            'key' : ''
                            }, 
                        last_triggered = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                permissions = [
                    playbookmedia_backend_client_sdk.models.app_permission.AppPermission(
                        id = '', 
                        app_id = '', 
                        scope = '', 
                        description = '', 
                        is_required = True, 
                        access_levels = [
                            ''
                            ], 
                        constraints = {
                            'key' : ''
                            }, 
                        requires_approval = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return MarketplaceApp(
        )
        """

    def testMarketplaceApp(self):
        """Test MarketplaceApp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
