# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from playbookmedia_backend_client_sdk.models.billing_mode import BillingMode
from playbookmedia_backend_client_sdk.models.interval import Interval
from playbookmedia_backend_client_sdk.models.payment_status import PaymentStatus
from playbookmedia_backend_client_sdk.models.plan_tier import PlanTier
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    Key features: - Stripe integration - Usage-based billing - Metered pricing - Feature flags  Database considerations: - Syncs with Stripe webhooks - Tracks usage for metered billing - Maintains subscription lifecycle
    """ # noqa: E501
    id: Optional[StrictStr] = None
    stripe_customer_id: Optional[StrictStr] = Field(default=None, alias="stripeCustomerId")
    stripe_subscription_id: Optional[StrictStr] = Field(default=None, alias="stripeSubscriptionId")
    stripe_price_id: Optional[StrictStr] = Field(default=None, alias="stripePriceId")
    stripe_product_id: Optional[StrictStr] = Field(default=None, alias="stripeProductId")
    plan_tier: Optional[PlanTier] = Field(default=PlanTier.UNSPECIFIED, alias="planTier")
    billing_mode: Optional[BillingMode] = Field(default=BillingMode.UNSPECIFIED, alias="billingMode")
    included_jobs: Optional[StrictInt] = Field(default=None, description="Jobs included in base price", alias="includedJobs")
    per_job_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="perJobRate")
    max_concurrent_jobs: Optional[StrictInt] = Field(default=None, alias="maxConcurrentJobs")
    included_storage: Optional[StrictStr] = Field(default=None, alias="includedStorage")
    per_gb_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="perGbRate")
    advanced_filtering_enabled: Optional[StrictBool] = Field(default=None, alias="advancedFilteringEnabled")
    priority_support_enabled: Optional[StrictBool] = Field(default=None, alias="prioritySupportEnabled")
    custom_exports_enabled: Optional[StrictBool] = Field(default=None, alias="customExportsEnabled")
    api_access_enabled: Optional[StrictBool] = Field(default=None, alias="apiAccessEnabled")
    custom_proxies_enabled: Optional[StrictBool] = Field(default=None, alias="customProxiesEnabled")
    advanced_analytics_enabled: Optional[StrictBool] = Field(default=None, alias="advancedAnalyticsEnabled")
    retention_days: Optional[StrictInt] = Field(default=None, alias="retentionDays")
    max_results_per_job: Optional[StrictInt] = Field(default=None, alias="maxResultsPerJob")
    current_period_start: Optional[datetime] = Field(default=None, alias="currentPeriodStart")
    current_period_end: Optional[datetime] = Field(default=None, alias="currentPeriodEnd")
    current_period_usage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentPeriodUsage")
    currency: Optional[StrictStr] = Field(default=None, description="e.g., \"usd\"")
    base_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="basePrice")
    billing_interval: Optional[Interval] = Field(default=Interval.UNSPECIFIED, alias="billingInterval")
    auto_renew: Optional[StrictBool] = Field(default=None, alias="autoRenew")
    payment_status: Optional[PaymentStatus] = Field(default=PaymentStatus.UNSPECIFIED, alias="paymentStatus")
    is_trial: Optional[StrictBool] = Field(default=None, alias="isTrial")
    trial_start: Optional[datetime] = Field(default=None, alias="trialStart")
    trial_end: Optional[datetime] = Field(default=None, alias="trialEnd")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    canceled_at: Optional[datetime] = Field(default=None, alias="canceledAt")
    ended_at: Optional[datetime] = Field(default=None, alias="endedAt")
    __properties: ClassVar[List[str]] = ["id", "stripeCustomerId", "stripeSubscriptionId", "stripePriceId", "stripeProductId", "planTier", "billingMode", "includedJobs", "perJobRate", "maxConcurrentJobs", "includedStorage", "perGbRate", "advancedFilteringEnabled", "prioritySupportEnabled", "customExportsEnabled", "apiAccessEnabled", "customProxiesEnabled", "advancedAnalyticsEnabled", "retentionDays", "maxResultsPerJob", "currentPeriodStart", "currentPeriodEnd", "currentPeriodUsage", "currency", "basePrice", "billingInterval", "autoRenew", "paymentStatus", "isTrial", "trialStart", "trialEnd", "createdAt", "updatedAt", "canceledAt", "endedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "stripeCustomerId": obj.get("stripeCustomerId"),
            "stripeSubscriptionId": obj.get("stripeSubscriptionId"),
            "stripePriceId": obj.get("stripePriceId"),
            "stripeProductId": obj.get("stripeProductId"),
            "planTier": obj.get("planTier") if obj.get("planTier") is not None else PlanTier.UNSPECIFIED,
            "billingMode": obj.get("billingMode") if obj.get("billingMode") is not None else BillingMode.UNSPECIFIED,
            "includedJobs": obj.get("includedJobs"),
            "perJobRate": obj.get("perJobRate"),
            "maxConcurrentJobs": obj.get("maxConcurrentJobs"),
            "includedStorage": obj.get("includedStorage"),
            "perGbRate": obj.get("perGbRate"),
            "advancedFilteringEnabled": obj.get("advancedFilteringEnabled"),
            "prioritySupportEnabled": obj.get("prioritySupportEnabled"),
            "customExportsEnabled": obj.get("customExportsEnabled"),
            "apiAccessEnabled": obj.get("apiAccessEnabled"),
            "customProxiesEnabled": obj.get("customProxiesEnabled"),
            "advancedAnalyticsEnabled": obj.get("advancedAnalyticsEnabled"),
            "retentionDays": obj.get("retentionDays"),
            "maxResultsPerJob": obj.get("maxResultsPerJob"),
            "currentPeriodStart": obj.get("currentPeriodStart"),
            "currentPeriodEnd": obj.get("currentPeriodEnd"),
            "currentPeriodUsage": obj.get("currentPeriodUsage"),
            "currency": obj.get("currency"),
            "basePrice": obj.get("basePrice"),
            "billingInterval": obj.get("billingInterval") if obj.get("billingInterval") is not None else Interval.UNSPECIFIED,
            "autoRenew": obj.get("autoRenew"),
            "paymentStatus": obj.get("paymentStatus") if obj.get("paymentStatus") is not None else PaymentStatus.UNSPECIFIED,
            "isTrial": obj.get("isTrial"),
            "trialStart": obj.get("trialStart"),
            "trialEnd": obj.get("trialEnd"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "canceledAt": obj.get("canceledAt"),
            "endedAt": obj.get("endedAt")
        })
        return _obj


