# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.change_set import ChangeSet
from playbookmedia_backend_client_sdk.models.contextual_summary import ContextualSummary
from playbookmedia_backend_client_sdk.models.document_branch import DocumentBranch
from typing import Optional, Set
from typing_extensions import Self

class DocumentVersion(BaseModel):
    """
    DocumentVersion
    """ # noqa: E501
    id: Optional[StrictStr] = None
    version_hash: Optional[StrictStr] = Field(default=None, alias="versionHash")
    parent_hash: Optional[StrictStr] = Field(default=None, alias="parentHash")
    commit_message: Optional[StrictStr] = Field(default=None, alias="commitMessage")
    author_id: Optional[StrictStr] = Field(default=None, alias="authorId")
    branch_name: Optional[StrictStr] = Field(default=None, alias="branchName")
    metadata: Optional[Dict[str, StrictStr]] = None
    tags: Optional[List[StrictStr]] = None
    is_approved: Optional[StrictBool] = Field(default=None, alias="isApproved")
    approval_chain: Optional[StrictStr] = Field(default=None, alias="approvalChain")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    branches: Optional[List[DocumentBranch]] = None
    changes: Optional[List[ChangeSet]] = None
    summaries: Optional[List[ContextualSummary]] = None
    __properties: ClassVar[List[str]] = ["id", "versionHash", "parentHash", "commitMessage", "authorId", "branchName", "metadata", "tags", "isApproved", "approvalChain", "createdAt", "branches", "changes", "summaries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in branches (list)
        _items = []
        if self.branches:
            for _item in self.branches:
                if _item:
                    _items.append(_item.to_dict())
            _dict['branches'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in changes (list)
        _items = []
        if self.changes:
            for _item in self.changes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['changes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in summaries (list)
        _items = []
        if self.summaries:
            for _item in self.summaries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['summaries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "versionHash": obj.get("versionHash"),
            "parentHash": obj.get("parentHash"),
            "commitMessage": obj.get("commitMessage"),
            "authorId": obj.get("authorId"),
            "branchName": obj.get("branchName"),
            "metadata": obj.get("metadata"),
            "tags": obj.get("tags"),
            "isApproved": obj.get("isApproved"),
            "approvalChain": obj.get("approvalChain"),
            "createdAt": obj.get("createdAt"),
            "branches": [DocumentBranch.from_dict(_item) for _item in obj["branches"]] if obj.get("branches") is not None else None,
            "changes": [ChangeSet.from_dict(_item) for _item in obj["changes"]] if obj.get("changes") is not None else None,
            "summaries": [ContextualSummary.from_dict(_item) for _item in obj["summaries"]] if obj.get("summaries") is not None else None
        })
        return _obj


