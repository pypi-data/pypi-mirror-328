# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.billing_plan import BillingPlan
from playbookmedia_backend_client_sdk.models.subscription import Subscription
from playbookmedia_backend_client_sdk.models.tenant import Tenant
from playbookmedia_backend_client_sdk.models.v1_status import V1Status
from typing import Optional, Set
from typing_extensions import Self

class Organization(BaseModel):
    """
    Key features: - Multi-tenant support - Hierarchical structure - Enterprise features - Billing management  Use cases: - Company creates multiple apps/tenants - Enterprise manages business units - Usage tracking across tenants
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    website: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    billing_email: Optional[StrictStr] = Field(default=None, alias="billingEmail")
    technical_email: Optional[StrictStr] = Field(default=None, alias="technicalEmail")
    phone: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    sso_enabled: Optional[StrictBool] = Field(default=None, alias="ssoEnabled")
    sso_provider: Optional[StrictStr] = Field(default=None, alias="ssoProvider")
    sso_domain: Optional[StrictStr] = Field(default=None, alias="ssoDomain")
    allowed_domains: Optional[List[StrictStr]] = Field(default=None, alias="allowedDomains")
    enforce2fa: Optional[StrictBool] = None
    billing_plan: Optional[BillingPlan] = Field(default=BillingPlan.UNSPECIFIED, alias="billingPlan")
    billing_currency: Optional[StrictStr] = Field(default=None, alias="billingCurrency")
    auto_billing: Optional[StrictBool] = Field(default=None, alias="autoBilling")
    tax_id: Optional[StrictStr] = Field(default=None, alias="taxId")
    compliance_frameworks: Optional[List[StrictStr]] = Field(default=None, description="SOC2, GDPR, etc", alias="complianceFrameworks")
    data_processing_agreement: Optional[StrictBool] = Field(default=None, alias="dataProcessingAgreement")
    data_region: Optional[StrictStr] = Field(default=None, alias="dataRegion")
    max_tenants: Optional[StrictInt] = Field(default=None, alias="maxTenants")
    total_storage_limit: Optional[StrictStr] = Field(default=None, alias="totalStorageLimit")
    max_api_keys: Optional[StrictInt] = Field(default=None, alias="maxApiKeys")
    max_users: Optional[StrictInt] = Field(default=None, alias="maxUsers")
    tenants: Optional[List[Tenant]] = None
    subscriptions: Optional[Subscription] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    status: Optional[V1Status] = V1Status.UNSPECIFIED
    __properties: ClassVar[List[str]] = ["id", "name", "displayName", "website", "description", "billingEmail", "technicalEmail", "phone", "address", "ssoEnabled", "ssoProvider", "ssoDomain", "allowedDomains", "enforce2fa", "billingPlan", "billingCurrency", "autoBilling", "taxId", "complianceFrameworks", "dataProcessingAgreement", "dataRegion", "maxTenants", "totalStorageLimit", "maxApiKeys", "maxUsers", "tenants", "subscriptions", "createdAt", "updatedAt", "deletedAt", "createdBy", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tenants (list)
        _items = []
        if self.tenants:
            for _item in self.tenants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tenants'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscriptions
        if self.subscriptions:
            _dict['subscriptions'] = self.subscriptions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "displayName": obj.get("displayName"),
            "website": obj.get("website"),
            "description": obj.get("description"),
            "billingEmail": obj.get("billingEmail"),
            "technicalEmail": obj.get("technicalEmail"),
            "phone": obj.get("phone"),
            "address": obj.get("address"),
            "ssoEnabled": obj.get("ssoEnabled"),
            "ssoProvider": obj.get("ssoProvider"),
            "ssoDomain": obj.get("ssoDomain"),
            "allowedDomains": obj.get("allowedDomains"),
            "enforce2fa": obj.get("enforce2fa"),
            "billingPlan": obj.get("billingPlan") if obj.get("billingPlan") is not None else BillingPlan.UNSPECIFIED,
            "billingCurrency": obj.get("billingCurrency"),
            "autoBilling": obj.get("autoBilling"),
            "taxId": obj.get("taxId"),
            "complianceFrameworks": obj.get("complianceFrameworks"),
            "dataProcessingAgreement": obj.get("dataProcessingAgreement"),
            "dataRegion": obj.get("dataRegion"),
            "maxTenants": obj.get("maxTenants"),
            "totalStorageLimit": obj.get("totalStorageLimit"),
            "maxApiKeys": obj.get("maxApiKeys"),
            "maxUsers": obj.get("maxUsers"),
            "tenants": [Tenant.from_dict(_item) for _item in obj["tenants"]] if obj.get("tenants") is not None else None,
            "subscriptions": Subscription.from_dict(obj["subscriptions"]) if obj.get("subscriptions") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "deletedAt": obj.get("deletedAt"),
            "createdBy": obj.get("createdBy"),
            "status": obj.get("status") if obj.get("status") is not None else V1Status.UNSPECIFIED
        })
        return _obj


