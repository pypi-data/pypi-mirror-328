# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.document_template import DocumentTemplate
from playbookmedia_backend_client_sdk.models.folder_metadata import FolderMetadata
from playbookmedia_backend_client_sdk.models.marketplace_app import MarketplaceApp
from playbookmedia_backend_client_sdk.models.workspace_activity import WorkspaceActivity
from playbookmedia_backend_client_sdk.models.workspace_compliance import WorkspaceCompliance
from playbookmedia_backend_client_sdk.models.workspace_sharing import WorkspaceSharing
from typing import Optional, Set
from typing_extensions import Self

class Workspace1(BaseModel):
    """
    Workspace1
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    unique_identifier: Optional[StrictStr] = Field(default=None, alias="uniqueIdentifier")
    s3_bucket_name: Optional[StrictStr] = Field(default=None, alias="s3BucketName")
    s3_folder_path: Optional[StrictStr] = Field(default=None, alias="s3FolderPath")
    storage_quota: Optional[StrictStr] = Field(default=None, alias="storageQuota")
    used_storage: Optional[StrictStr] = Field(default=None, alias="usedStorage")
    allow_public_sharing: Optional[StrictBool] = Field(default=None, alias="allowPublicSharing")
    require_approval: Optional[StrictBool] = Field(default=None, alias="requireApproval")
    gdpr_compliant: Optional[StrictBool] = Field(default=None, alias="gdprCompliant")
    hipaa_compliant: Optional[StrictBool] = Field(default=None, alias="hipaaCompliant")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    folders: Optional[List[FolderMetadata]] = None
    templates: Optional[List[DocumentTemplate]] = None
    sharing: Optional[List[WorkspaceSharing]] = None
    activities: Optional[List[WorkspaceActivity]] = None
    compliance: Optional[List[WorkspaceCompliance]] = None
    installed_apps: Optional[List[MarketplaceApp]] = Field(default=None, alias="installedApps")
    __properties: ClassVar[List[str]] = ["id", "name", "uniqueIdentifier", "s3BucketName", "s3FolderPath", "storageQuota", "usedStorage", "allowPublicSharing", "requireApproval", "gdprCompliant", "hipaaCompliant", "createdAt", "updatedAt", "deletedAt", "folders", "templates", "sharing", "activities", "compliance", "installedApps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workspace1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in folders (list)
        _items = []
        if self.folders:
            for _item in self.folders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['folders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in templates (list)
        _items = []
        if self.templates:
            for _item in self.templates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['templates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sharing (list)
        _items = []
        if self.sharing:
            for _item in self.sharing:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sharing'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in activities (list)
        _items = []
        if self.activities:
            for _item in self.activities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['activities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in compliance (list)
        _items = []
        if self.compliance:
            for _item in self.compliance:
                if _item:
                    _items.append(_item.to_dict())
            _dict['compliance'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in installed_apps (list)
        _items = []
        if self.installed_apps:
            for _item in self.installed_apps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['installedApps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workspace1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "uniqueIdentifier": obj.get("uniqueIdentifier"),
            "s3BucketName": obj.get("s3BucketName"),
            "s3FolderPath": obj.get("s3FolderPath"),
            "storageQuota": obj.get("storageQuota"),
            "usedStorage": obj.get("usedStorage"),
            "allowPublicSharing": obj.get("allowPublicSharing"),
            "requireApproval": obj.get("requireApproval"),
            "gdprCompliant": obj.get("gdprCompliant"),
            "hipaaCompliant": obj.get("hipaaCompliant"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "deletedAt": obj.get("deletedAt"),
            "folders": [FolderMetadata.from_dict(_item) for _item in obj["folders"]] if obj.get("folders") is not None else None,
            "templates": [DocumentTemplate.from_dict(_item) for _item in obj["templates"]] if obj.get("templates") is not None else None,
            "sharing": [WorkspaceSharing.from_dict(_item) for _item in obj["sharing"]] if obj.get("sharing") is not None else None,
            "activities": [WorkspaceActivity.from_dict(_item) for _item in obj["activities"]] if obj.get("activities") is not None else None,
            "compliance": [WorkspaceCompliance.from_dict(_item) for _item in obj["compliance"]] if obj.get("compliance") is not None else None,
            "installedApps": [MarketplaceApp.from_dict(_item) for _item in obj["installedApps"]] if obj.get("installedApps") is not None else None
        })
        return _obj


