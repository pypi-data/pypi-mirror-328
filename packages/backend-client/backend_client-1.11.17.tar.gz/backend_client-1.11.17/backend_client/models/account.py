# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from backend_client.models.scraping_job import ScrapingJob
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Account represents a user account within the workspace service. It serves as the top-level container for all user-specific workspaces and settings.  Key features: - Unique identification via Auth0 - Organization and tenant context - Audit timestamps - Associated scraping jobs  Database considerations: - Uses GORM for ORM mapping - Includes indexes for efficient querying - Supports soft deletes via deleted_at  Usage example: ```go account := &Account{     AuthPlatformUserId: \"auth0|123\",     OrgId: \"org_123\",     TenantId: \"tenant_456\", } ```
    """ # noqa: E501
    id: Optional[StrictStr] = None
    auth_platform_user_id: Optional[StrictStr] = Field(default=None, alias="authPlatformUserId")
    org_id: Optional[StrictStr] = Field(default=None, alias="orgId")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    email: Optional[StrictStr] = None
    last_modified_at: Optional[datetime] = Field(default=None, alias="lastModifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    scraping_jobs: Optional[List[ScrapingJob]] = Field(default=None, alias="scrapingJobs")
    __properties: ClassVar[List[str]] = ["id", "authPlatformUserId", "orgId", "tenantId", "email", "lastModifiedAt", "deletedAt", "createdAt", "scrapingJobs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scraping_jobs (list)
        _items = []
        if self.scraping_jobs:
            for _item in self.scraping_jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scrapingJobs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "authPlatformUserId": obj.get("authPlatformUserId"),
            "orgId": obj.get("orgId"),
            "tenantId": obj.get("tenantId"),
            "email": obj.get("email"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "createdAt": obj.get("createdAt"),
            "scrapingJobs": [ScrapingJob.from_dict(_item) for _item in obj["scrapingJobs"]] if obj.get("scrapingJobs") is not None else None
        })
        return _obj


