# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from playbookmedia_backend_client_sdk.models.app_analytics import AppAnalytics
from playbookmedia_backend_client_sdk.models.app_category import AppCategory
from playbookmedia_backend_client_sdk.models.app_development_info import AppDevelopmentInfo
from playbookmedia_backend_client_sdk.models.app_installation import AppInstallation
from playbookmedia_backend_client_sdk.models.app_permission import AppPermission
from playbookmedia_backend_client_sdk.models.app_review import AppReview
from playbookmedia_backend_client_sdk.models.app_version import AppVersion
from playbookmedia_backend_client_sdk.models.app_webhook import AppWebhook
from playbookmedia_backend_client_sdk.models.pricing_model import PricingModel
from typing import Optional, Set
from typing_extensions import Self

class MarketplaceApp(BaseModel):
    """
    MarketplaceApp
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    developer_id: Optional[StrictStr] = Field(default=None, alias="developerId")
    category: Optional[AppCategory] = AppCategory.UNSPECIFIED
    supported_contract_types: Optional[List[StrictStr]] = Field(default=None, alias="supportedContractTypes")
    features: Optional[List[StrictStr]] = None
    pricing_model: Optional[PricingModel] = Field(default=PricingModel.UNSPECIFIED, alias="pricingModel")
    pricing_tiers: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, alias="pricingTiers")
    supported_integrations: Optional[List[StrictStr]] = Field(default=None, alias="supportedIntegrations")
    is_verified: Optional[StrictBool] = Field(default=None, alias="isVerified")
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    installation_count: Optional[StrictInt] = Field(default=None, alias="installationCount")
    required_permissions: Optional[List[StrictStr]] = Field(default=None, alias="requiredPermissions")
    metadata: Optional[Dict[str, StrictStr]] = None
    documentation_url: Optional[StrictStr] = Field(default=None, alias="documentationUrl")
    support_email: Optional[StrictStr] = Field(default=None, alias="supportEmail")
    screenshots: Optional[List[StrictStr]] = None
    privacy_policy_url: Optional[StrictStr] = Field(default=None, alias="privacyPolicyUrl")
    terms_url: Optional[StrictStr] = Field(default=None, alias="termsUrl")
    published_at: Optional[datetime] = Field(default=None, alias="publishedAt")
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    versions: Optional[List[AppVersion]] = None
    installations: Optional[List[AppInstallation]] = None
    analytics: Optional[List[AppAnalytics]] = None
    reviews: Optional[List[AppReview]] = None
    info: Optional[AppDevelopmentInfo] = None
    webhooks: Optional[List[AppWebhook]] = None
    permissions: Optional[List[AppPermission]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "developerId", "category", "supportedContractTypes", "features", "pricingModel", "pricingTiers", "supportedIntegrations", "isVerified", "rating", "installationCount", "requiredPermissions", "metadata", "documentationUrl", "supportEmail", "screenshots", "privacyPolicyUrl", "termsUrl", "publishedAt", "lastUpdated", "versions", "installations", "analytics", "reviews", "info", "webhooks", "permissions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketplaceApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in versions (list)
        _items = []
        if self.versions:
            for _item in self.versions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['versions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in installations (list)
        _items = []
        if self.installations:
            for _item in self.installations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['installations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in analytics (list)
        _items = []
        if self.analytics:
            for _item in self.analytics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['analytics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviews (list)
        _items = []
        if self.reviews:
            for _item in self.reviews:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reviews'] = _items
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in webhooks (list)
        _items = []
        if self.webhooks:
            for _item in self.webhooks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['webhooks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item in self.permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketplaceApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "developerId": obj.get("developerId"),
            "category": obj.get("category") if obj.get("category") is not None else AppCategory.UNSPECIFIED,
            "supportedContractTypes": obj.get("supportedContractTypes"),
            "features": obj.get("features"),
            "pricingModel": obj.get("pricingModel") if obj.get("pricingModel") is not None else PricingModel.UNSPECIFIED,
            "pricingTiers": obj.get("pricingTiers"),
            "supportedIntegrations": obj.get("supportedIntegrations"),
            "isVerified": obj.get("isVerified"),
            "rating": obj.get("rating"),
            "installationCount": obj.get("installationCount"),
            "requiredPermissions": obj.get("requiredPermissions"),
            "metadata": obj.get("metadata"),
            "documentationUrl": obj.get("documentationUrl"),
            "supportEmail": obj.get("supportEmail"),
            "screenshots": obj.get("screenshots"),
            "privacyPolicyUrl": obj.get("privacyPolicyUrl"),
            "termsUrl": obj.get("termsUrl"),
            "publishedAt": obj.get("publishedAt"),
            "lastUpdated": obj.get("lastUpdated"),
            "versions": [AppVersion.from_dict(_item) for _item in obj["versions"]] if obj.get("versions") is not None else None,
            "installations": [AppInstallation.from_dict(_item) for _item in obj["installations"]] if obj.get("installations") is not None else None,
            "analytics": [AppAnalytics.from_dict(_item) for _item in obj["analytics"]] if obj.get("analytics") is not None else None,
            "reviews": [AppReview.from_dict(_item) for _item in obj["reviews"]] if obj.get("reviews") is not None else None,
            "info": AppDevelopmentInfo.from_dict(obj["info"]) if obj.get("info") is not None else None,
            "webhooks": [AppWebhook.from_dict(_item) for _item in obj["webhooks"]] if obj.get("webhooks") is not None else None,
            "permissions": [AppPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None
        })
        return _obj


