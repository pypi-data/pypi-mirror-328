# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.compliance_level import ComplianceLevel
from typing import Optional, Set
from typing_extensions import Self

class CreateAccountRequest1(BaseModel):
    """
    CreateAccountRequest1
    """ # noqa: E501
    auth0_user_id: StrictStr = Field(alias="auth0UserId")
    email: StrictStr
    base_directory: Optional[StrictStr] = Field(default=None, alias="baseDirectory")
    region: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = Field(default=None, alias="orgId")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    roles: Optional[List[StrictStr]] = None
    permissions: Optional[List[StrictStr]] = None
    mfa_enabled: Optional[StrictBool] = Field(default=None, alias="mfaEnabled")
    compliance_level: Optional[ComplianceLevel] = Field(default=ComplianceLevel.UNSPECIFIED, alias="complianceLevel")
    preferences: Optional[Dict[str, StrictStr]] = None
    __properties: ClassVar[List[str]] = ["auth0UserId", "email", "baseDirectory", "region", "orgId", "tenantId", "roles", "permissions", "mfaEnabled", "complianceLevel", "preferences"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAccountRequest1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAccountRequest1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth0UserId": obj.get("auth0UserId"),
            "email": obj.get("email"),
            "baseDirectory": obj.get("baseDirectory"),
            "region": obj.get("region"),
            "orgId": obj.get("orgId"),
            "tenantId": obj.get("tenantId"),
            "roles": obj.get("roles"),
            "permissions": obj.get("permissions"),
            "mfaEnabled": obj.get("mfaEnabled"),
            "complianceLevel": obj.get("complianceLevel") if obj.get("complianceLevel") is not None else ComplianceLevel.UNSPECIFIED,
            "preferences": obj.get("preferences")
        })
        return _obj


