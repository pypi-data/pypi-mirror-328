# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from playbookmedia_backend_client_sdk.models.document_branch import DocumentBranch

class TestDocumentBranch(unittest.TestCase):
    """DocumentBranch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentBranch:
        """Test DocumentBranch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DocumentBranch`
        """
        model = DocumentBranch()
        if include_optional:
            return DocumentBranch(
                id = '',
                name = '',
                base_version_hash = '',
                current_head_hash = '',
                purpose = '',
                status = '',
                reviewers = [
                    ''
                    ],
                branch_metadata = {
                    'key' : ''
                    },
                is_locked = True,
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                merges = [
                    playbookmedia_backend_client_sdk.models.branch_merge.BranchMerge(
                        id = '', 
                        branch_id = '', 
                        source_branch = '', 
                        target_branch = '', 
                        merge_status = '', 
                        merge_strategy = '', 
                        conflicts = [
                            ''
                            ], 
                        merger_id = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                policy = playbookmedia_backend_client_sdk.models.enhanced_version_control_entities.Enhanced version control entities(
                    id = '', 
                    branch_id = '', 
                    required_approvers = [
                        ''
                        ], 
                    minimum_approvals = 56, 
                    enforce_linear_history = True, 
                    allow_force_push = True, 
                    protected_paths = [
                        ''
                        ], 
                    merge_rules = {
                        'key' : ''
                        }, 
                    automated_checks = [
                        ''
                        ], 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                merge_requests = [
                    playbookmedia_backend_client_sdk.models.merge_request.MergeRequest(
                        id = '', 
                        source_branch_id = '', 
                        target_branch_id = '', 
                        title = '', 
                        description = '', 
                        author_id = '', 
                        reviewers = [
                            ''
                            ], 
                        status = '', 
                        labels = [
                            ''
                            ], 
                        has_conflicts = True, 
                        automated_check_results = [
                            ''
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return DocumentBranch(
        )
        """

    def testDocumentBranch(self):
        """Test DocumentBranch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
