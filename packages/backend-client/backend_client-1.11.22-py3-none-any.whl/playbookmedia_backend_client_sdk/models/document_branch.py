# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.branch_merge import BranchMerge
from playbookmedia_backend_client_sdk.models.branch_policy import BranchPolicy
from playbookmedia_backend_client_sdk.models.merge_request import MergeRequest
from typing import Optional, Set
from typing_extensions import Self

class DocumentBranch(BaseModel):
    """
    DocumentBranch
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    base_version_hash: Optional[StrictStr] = Field(default=None, alias="baseVersionHash")
    current_head_hash: Optional[StrictStr] = Field(default=None, alias="currentHeadHash")
    purpose: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    reviewers: Optional[List[StrictStr]] = None
    branch_metadata: Optional[Dict[str, StrictStr]] = Field(default=None, alias="branchMetadata")
    is_locked: Optional[StrictBool] = Field(default=None, alias="isLocked")
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    merges: Optional[List[BranchMerge]] = None
    policy: Optional[BranchPolicy] = None
    merge_requests: Optional[List[MergeRequest]] = Field(default=None, alias="mergeRequests")
    __properties: ClassVar[List[str]] = ["id", "name", "baseVersionHash", "currentHeadHash", "purpose", "status", "reviewers", "branchMetadata", "isLocked", "lastUpdated", "merges", "policy", "mergeRequests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentBranch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in merges (list)
        _items = []
        if self.merges:
            for _item in self.merges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['merges'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in merge_requests (list)
        _items = []
        if self.merge_requests:
            for _item in self.merge_requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mergeRequests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentBranch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "baseVersionHash": obj.get("baseVersionHash"),
            "currentHeadHash": obj.get("currentHeadHash"),
            "purpose": obj.get("purpose"),
            "status": obj.get("status"),
            "reviewers": obj.get("reviewers"),
            "branchMetadata": obj.get("branchMetadata"),
            "isLocked": obj.get("isLocked"),
            "lastUpdated": obj.get("lastUpdated"),
            "merges": [BranchMerge.from_dict(_item) for _item in obj["merges"]] if obj.get("merges") is not None else None,
            "policy": BranchPolicy.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "mergeRequests": [MergeRequest.from_dict(_item) for _item in obj["mergeRequests"]] if obj.get("mergeRequests") is not None else None
        })
        return _obj


