# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.included_field import IncludedField
from playbookmedia_backend_client_sdk.models.payload_format import PayloadFormat
from playbookmedia_backend_client_sdk.models.trigger_event import TriggerEvent
from typing import Optional, Set
from typing_extensions import Self

class WebhookConfig(BaseModel):
    """
    WebhookConfig
    """ # noqa: E501
    id: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    auth_type: Optional[StrictStr] = Field(default=None, description="e.g., \"basic\", \"bearer\", \"custom\"", alias="authType")
    auth_token: Optional[StrictStr] = Field(default=None, alias="authToken")
    custom_headers: Optional[Dict[str, StrictStr]] = Field(default=None, alias="customHeaders")
    max_retries: Optional[StrictInt] = Field(default=None, alias="maxRetries")
    retry_interval: Optional[StrictStr] = Field(default=None, alias="retryInterval")
    trigger_events: Optional[List[TriggerEvent]] = Field(default=None, alias="triggerEvents")
    included_fields: Optional[List[IncludedField]] = Field(default=None, alias="includedFields")
    include_full_results: Optional[StrictBool] = Field(default=None, alias="includeFullResults")
    payload_format: Optional[PayloadFormat] = Field(default=PayloadFormat.UNSPECIFIED, alias="payloadFormat")
    verify_ssl: Optional[StrictBool] = Field(default=None, alias="verifySsl")
    signing_secret: Optional[StrictStr] = Field(default=None, alias="signingSecret")
    rate_limit: Optional[StrictInt] = Field(default=None, alias="rateLimit")
    rate_limit_interval: Optional[StrictStr] = Field(default=None, alias="rateLimitInterval")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    last_triggered_at: Optional[datetime] = Field(default=None, alias="lastTriggeredAt")
    successful_calls: Optional[StrictInt] = Field(default=None, alias="successfulCalls")
    failed_calls: Optional[StrictInt] = Field(default=None, alias="failedCalls")
    metadata: Optional[Dict[str, Any]] = None
    webhook_name: Optional[StrictStr] = Field(default=None, alias="webhookName")
    __properties: ClassVar[List[str]] = ["id", "url", "authType", "authToken", "customHeaders", "maxRetries", "retryInterval", "triggerEvents", "includedFields", "includeFullResults", "payloadFormat", "verifySsl", "signingSecret", "rateLimit", "rateLimitInterval", "createdAt", "updatedAt", "lastTriggeredAt", "successfulCalls", "failedCalls", "metadata", "webhookName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "url": obj.get("url"),
            "authType": obj.get("authType"),
            "authToken": obj.get("authToken"),
            "customHeaders": obj.get("customHeaders"),
            "maxRetries": obj.get("maxRetries"),
            "retryInterval": obj.get("retryInterval"),
            "triggerEvents": obj.get("triggerEvents"),
            "includedFields": obj.get("includedFields"),
            "includeFullResults": obj.get("includeFullResults"),
            "payloadFormat": obj.get("payloadFormat") if obj.get("payloadFormat") is not None else PayloadFormat.UNSPECIFIED,
            "verifySsl": obj.get("verifySsl"),
            "signingSecret": obj.get("signingSecret"),
            "rateLimit": obj.get("rateLimit"),
            "rateLimitInterval": obj.get("rateLimitInterval"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "lastTriggeredAt": obj.get("lastTriggeredAt"),
            "successfulCalls": obj.get("successfulCalls"),
            "failedCalls": obj.get("failedCalls"),
            "metadata": obj.get("metadata"),
            "webhookName": obj.get("webhookName")
        })
        return _obj


