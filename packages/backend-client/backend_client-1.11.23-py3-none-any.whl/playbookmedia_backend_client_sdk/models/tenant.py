# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from playbookmedia_backend_client_sdk.models.account import Account
from playbookmedia_backend_client_sdk.models.tenant_api_key import TenantAPIKey
from playbookmedia_backend_client_sdk.models.v1_status import V1Status
from typing import Optional, Set
from typing_extensions import Self

class Tenant(BaseModel):
    """
    Key features: - Resource isolation - Independent configuration - Usage tracking - Service subscriptions
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    description: Optional[StrictStr] = None
    api_base_url: Optional[StrictStr] = Field(default=None, alias="apiBaseUrl")
    environment_variables: Optional[Dict[str, StrictStr]] = Field(default=None, alias="environmentVariables")
    allowed_origins: Optional[List[StrictStr]] = Field(default=None, alias="allowedOrigins")
    storage_quota: Optional[StrictStr] = Field(default=None, alias="storageQuota")
    monthly_request_limit: Optional[StrictStr] = Field(default=None, alias="monthlyRequestLimit")
    max_concurrent_jobs: Optional[StrictInt] = Field(default=None, alias="maxConcurrentJobs")
    enable_caching: Optional[StrictBool] = Field(default=None, alias="enableCaching")
    enable_rate_limiting: Optional[StrictBool] = Field(default=None, alias="enableRateLimiting")
    enable_request_logging: Optional[StrictBool] = Field(default=None, alias="enableRequestLogging")
    accounts: Optional[List[Account]] = None
    api_keys: Optional[List[TenantAPIKey]] = Field(default=None, alias="apiKeys")
    total_requests: Optional[StrictStr] = Field(default=None, alias="totalRequests")
    total_storage_used: Optional[StrictStr] = Field(default=None, alias="totalStorageUsed")
    average_response_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="averageResponseTime")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    status: Optional[V1Status] = V1Status.UNSPECIFIED
    __properties: ClassVar[List[str]] = ["id", "name", "displayName", "description", "apiBaseUrl", "environmentVariables", "allowedOrigins", "storageQuota", "monthlyRequestLimit", "maxConcurrentJobs", "enableCaching", "enableRateLimiting", "enableRequestLogging", "accounts", "apiKeys", "totalRequests", "totalStorageUsed", "averageResponseTime", "createdAt", "updatedAt", "deletedAt", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tenant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in api_keys (list)
        _items = []
        if self.api_keys:
            for _item in self.api_keys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['apiKeys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tenant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "apiBaseUrl": obj.get("apiBaseUrl"),
            "environmentVariables": obj.get("environmentVariables"),
            "allowedOrigins": obj.get("allowedOrigins"),
            "storageQuota": obj.get("storageQuota"),
            "monthlyRequestLimit": obj.get("monthlyRequestLimit"),
            "maxConcurrentJobs": obj.get("maxConcurrentJobs"),
            "enableCaching": obj.get("enableCaching"),
            "enableRateLimiting": obj.get("enableRateLimiting"),
            "enableRequestLogging": obj.get("enableRequestLogging"),
            "accounts": [Account.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "apiKeys": [TenantAPIKey.from_dict(_item) for _item in obj["apiKeys"]] if obj.get("apiKeys") is not None else None,
            "totalRequests": obj.get("totalRequests"),
            "totalStorageUsed": obj.get("totalStorageUsed"),
            "averageResponseTime": obj.get("averageResponseTime"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "deletedAt": obj.get("deletedAt"),
            "status": obj.get("status") if obj.get("status") is not None else V1Status.UNSPECIFIED
        })
        return _obj


