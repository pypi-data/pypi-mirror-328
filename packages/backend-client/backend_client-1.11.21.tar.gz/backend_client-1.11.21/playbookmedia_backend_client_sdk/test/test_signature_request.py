# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from playbookmedia_backend_client_sdk.models.signature_request import SignatureRequest

class TestSignatureRequest(unittest.TestCase):
    """SignatureRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SignatureRequest:
        """Test SignatureRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SignatureRequest`
        """
        model = SignatureRequest()
        if include_optional:
            return SignatureRequest(
                id = '',
                status = 'SIGNATURE_STATUS_UNSPECIFIED',
                signer_email = '',
                signer_name = '',
                role = '',
                authentication_method = '',
                expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                requires_mfa = True,
                signature_type = '',
                reminder_schedule = [
                    ''
                    ],
                document_id = '',
                signature_blocks = [
                    playbookmedia_backend_client_sdk.models.signature_block.SignatureBlock(
                        id = '', 
                        request_id = '', 
                        block_type = '', 
                        page_number = 56, 
                        x_position = 1.337, 
                        y_position = 1.337, 
                        width = 1.337, 
                        height = 1.337, 
                        is_required = True, 
                        signature_data = '', 
                        signed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                workflow = playbookmedia_backend_client_sdk.models.signature_workflow.SignatureWorkflow(
                    id = '', 
                    request_id = '', 
                    signing_order = [
                        ''
                        ], 
                    current_signer = '', 
                    workflow_status = '', 
                    parallel_signing = True, 
                    require_all_signatures = True, 
                    deadline = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return SignatureRequest(
        )
        """

    def testSignatureRequest(self):
        """Test SignatureRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
