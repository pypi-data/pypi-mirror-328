# coding: utf-8

"""
    Lead Scraping Service API

    Vector Lead Scraping Service API - Manages Lead Scraping Jobs

    The version of the OpenAPI document: 1.0
    Contact: yoanyomba@vector.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_backend_client_sdk.models.api_key import APIKey
from playbookmedia_backend_client_sdk.models.scraping_job import ScrapingJob
from playbookmedia_backend_client_sdk.models.scraping_workflow import ScrapingWorkflow
from playbookmedia_backend_client_sdk.models.webhook_config import WebhookConfig
from playbookmedia_backend_client_sdk.models.workspace_type import WorkspaceType
from typing import Optional, Set
from typing_extensions import Self

class Workspace(BaseModel):
    """
    Workspace
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    industry: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    gdpr_compliant: Optional[StrictBool] = Field(default=None, alias="gdprCompliant")
    hipaa_compliant: Optional[StrictBool] = Field(default=None, alias="hipaaCompliant")
    soc2_compliant: Optional[StrictBool] = Field(default=None, alias="soc2Compliant")
    storage_quota: Optional[StrictStr] = Field(default=None, description="in bytes", alias="storageQuota")
    used_storage: Optional[StrictStr] = Field(default=None, alias="usedStorage")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    deleted_at: Optional[datetime] = Field(default=None, alias="deletedAt")
    workflows: Optional[List[ScrapingWorkflow]] = None
    jobs_run_this_month: Optional[StrictInt] = Field(default=None, alias="jobsRunThisMonth")
    workspace_job_limit: Optional[StrictInt] = Field(default=None, alias="workspaceJobLimit")
    daily_job_quota: Optional[StrictInt] = Field(default=None, alias="dailyJobQuota")
    active_scrapers: Optional[StrictInt] = Field(default=None, alias="activeScrapers")
    total_leads_collected: Optional[StrictInt] = Field(default=None, alias="totalLeadsCollected")
    last_job_run: Optional[datetime] = Field(default=None, alias="lastJobRun")
    scraping_jobs: Optional[List[ScrapingJob]] = Field(default=None, alias="scrapingJobs")
    api_keys: Optional[List[APIKey]] = Field(default=None, alias="apiKeys")
    webhooks: Optional[List[WebhookConfig]] = None
    workspace_type: Optional[WorkspaceType] = Field(default=WorkspaceType.UNSPECIFIED, alias="workspaceType")
    description: Optional[StrictStr] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    tags: Optional[List[StrictStr]] = None
    max_team_members: Optional[StrictInt] = Field(default=None, alias="maxTeamMembers")
    current_team_members: Optional[StrictInt] = Field(default=None, alias="currentTeamMembers")
    allow_guest_access: Optional[StrictBool] = Field(default=None, alias="allowGuestAccess")
    allowed_email_domains: Optional[List[StrictStr]] = Field(default=None, alias="allowedEmailDomains")
    export_formats: Optional[List[StrictStr]] = Field(default=None, description="e.g., \"csv\", \"json\", \"excel\"", alias="exportFormats")
    export_schedule: Optional[StrictStr] = Field(default=None, alias="exportSchedule")
    export_destinations: Optional[List[StrictStr]] = Field(default=None, alias="exportDestinations")
    export_destination_config: Optional[Dict[str, StrictStr]] = Field(default=None, alias="exportDestinationConfig")
    compress_exports: Optional[StrictBool] = Field(default=None, alias="compressExports")
    compression_format: Optional[StrictStr] = Field(default=None, alias="compressionFormat")
    salesforce_enabled: Optional[StrictBool] = Field(default=None, alias="salesforceEnabled")
    salesforce_config: Optional[StrictStr] = Field(default=None, alias="salesforceConfig")
    hubspot_enabled: Optional[StrictBool] = Field(default=None, alias="hubspotEnabled")
    hubspot_config: Optional[StrictStr] = Field(default=None, alias="hubspotConfig")
    zapier_enabled: Optional[StrictBool] = Field(default=None, alias="zapierEnabled")
    zapier_webhook: Optional[StrictStr] = Field(default=None, alias="zapierWebhook")
    active_integrations: Optional[List[StrictStr]] = Field(default=None, alias="activeIntegrations")
    integration_settings: Optional[Dict[str, StrictStr]] = Field(default=None, alias="integrationSettings")
    __properties: ClassVar[List[str]] = ["id", "name", "industry", "domain", "gdprCompliant", "hipaaCompliant", "soc2Compliant", "storageQuota", "usedStorage", "createdAt", "updatedAt", "deletedAt", "workflows", "jobsRunThisMonth", "workspaceJobLimit", "dailyJobQuota", "activeScrapers", "totalLeadsCollected", "lastJobRun", "scrapingJobs", "apiKeys", "webhooks", "workspaceType", "description", "metadata", "tags", "maxTeamMembers", "currentTeamMembers", "allowGuestAccess", "allowedEmailDomains", "exportFormats", "exportSchedule", "exportDestinations", "exportDestinationConfig", "compressExports", "compressionFormat", "salesforceEnabled", "salesforceConfig", "hubspotEnabled", "hubspotConfig", "zapierEnabled", "zapierWebhook", "activeIntegrations", "integrationSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in workflows (list)
        _items = []
        if self.workflows:
            for _item in self.workflows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workflows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scraping_jobs (list)
        _items = []
        if self.scraping_jobs:
            for _item in self.scraping_jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scrapingJobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in api_keys (list)
        _items = []
        if self.api_keys:
            for _item in self.api_keys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['apiKeys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in webhooks (list)
        _items = []
        if self.webhooks:
            for _item in self.webhooks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['webhooks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "industry": obj.get("industry"),
            "domain": obj.get("domain"),
            "gdprCompliant": obj.get("gdprCompliant"),
            "hipaaCompliant": obj.get("hipaaCompliant"),
            "soc2Compliant": obj.get("soc2Compliant"),
            "storageQuota": obj.get("storageQuota"),
            "usedStorage": obj.get("usedStorage"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "deletedAt": obj.get("deletedAt"),
            "workflows": [ScrapingWorkflow.from_dict(_item) for _item in obj["workflows"]] if obj.get("workflows") is not None else None,
            "jobsRunThisMonth": obj.get("jobsRunThisMonth"),
            "workspaceJobLimit": obj.get("workspaceJobLimit"),
            "dailyJobQuota": obj.get("dailyJobQuota"),
            "activeScrapers": obj.get("activeScrapers"),
            "totalLeadsCollected": obj.get("totalLeadsCollected"),
            "lastJobRun": obj.get("lastJobRun"),
            "scrapingJobs": [ScrapingJob.from_dict(_item) for _item in obj["scrapingJobs"]] if obj.get("scrapingJobs") is not None else None,
            "apiKeys": [APIKey.from_dict(_item) for _item in obj["apiKeys"]] if obj.get("apiKeys") is not None else None,
            "webhooks": [WebhookConfig.from_dict(_item) for _item in obj["webhooks"]] if obj.get("webhooks") is not None else None,
            "workspaceType": obj.get("workspaceType") if obj.get("workspaceType") is not None else WorkspaceType.UNSPECIFIED,
            "description": obj.get("description"),
            "metadata": obj.get("metadata"),
            "tags": obj.get("tags"),
            "maxTeamMembers": obj.get("maxTeamMembers"),
            "currentTeamMembers": obj.get("currentTeamMembers"),
            "allowGuestAccess": obj.get("allowGuestAccess"),
            "allowedEmailDomains": obj.get("allowedEmailDomains"),
            "exportFormats": obj.get("exportFormats"),
            "exportSchedule": obj.get("exportSchedule"),
            "exportDestinations": obj.get("exportDestinations"),
            "exportDestinationConfig": obj.get("exportDestinationConfig"),
            "compressExports": obj.get("compressExports"),
            "compressionFormat": obj.get("compressionFormat"),
            "salesforceEnabled": obj.get("salesforceEnabled"),
            "salesforceConfig": obj.get("salesforceConfig"),
            "hubspotEnabled": obj.get("hubspotEnabled"),
            "hubspotConfig": obj.get("hubspotConfig"),
            "zapierEnabled": obj.get("zapierEnabled"),
            "zapierWebhook": obj.get("zapierWebhook"),
            "activeIntegrations": obj.get("activeIntegrations"),
            "integrationSettings": obj.get("integrationSettings")
        })
        return _obj


