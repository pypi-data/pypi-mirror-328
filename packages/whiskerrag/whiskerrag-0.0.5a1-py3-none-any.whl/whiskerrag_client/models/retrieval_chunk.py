# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class RetrievalChunk(BaseModel):
    """
    RetrievalChunk
    """  # noqa: E501

    chunk_id: Optional[StrictStr] = Field(default=None, description="chunk id")
    embedding: Optional[List[Union[StrictFloat, StrictInt]]] = None
    context: StrictStr = Field(description="chunk content")
    knowledge_id: StrictStr = Field(description="file source info")
    embedding_model_name: Optional[StrictStr] = None
    space_id: StrictStr = Field(description="space id")
    metadata: Optional[Dict[str, Any]] = None
    created_at: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    similarity: Union[StrictFloat, StrictInt] = Field(
        description="The similarity of the chunk"
    )
    __properties: ClassVar[List[str]] = [
        "chunk_id",
        "embedding",
        "context",
        "knowledge_id",
        "embedding_model_name",
        "space_id",
        "metadata",
        "created_at",
        "updated_at",
        "similarity",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrievalChunk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if embedding (nullable) is None
        # and model_fields_set contains the field
        if self.embedding is None and "embedding" in self.model_fields_set:
            _dict["embedding"] = None

        # set to None if embedding_model_name (nullable) is None
        # and model_fields_set contains the field
        if (
            self.embedding_model_name is None
            and "embedding_model_name" in self.model_fields_set
        ):
            _dict["embedding_model_name"] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict["metadata"] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict["created_at"] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict["updated_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrievalChunk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "chunk_id": obj.get("chunk_id"),
                "embedding": obj.get("embedding"),
                "context": obj.get("context"),
                "knowledge_id": obj.get("knowledge_id"),
                "embedding_model_name": obj.get("embedding_model_name"),
                "space_id": obj.get("space_id"),
                "metadata": obj.get("metadata"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "similarity": obj.get("similarity"),
            }
        )
        return _obj
