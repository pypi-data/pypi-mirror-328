# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class PageParamsTask(BaseModel):
    """
    PageParamsTask
    """  # noqa: E501

    page: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(
        default=1, description="page number"
    )
    page_size: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(
        default=10, description="page size"
    )
    order_by: Optional[StrictStr] = None
    order_direction: Optional[StrictStr] = None
    eq_conditions: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = [
        "page",
        "page_size",
        "order_by",
        "order_direction",
        "eq_conditions",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PageParamsTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if order_by (nullable) is None
        # and model_fields_set contains the field
        if self.order_by is None and "order_by" in self.model_fields_set:
            _dict["order_by"] = None

        # set to None if order_direction (nullable) is None
        # and model_fields_set contains the field
        if self.order_direction is None and "order_direction" in self.model_fields_set:
            _dict["order_direction"] = None

        # set to None if eq_conditions (nullable) is None
        # and model_fields_set contains the field
        if self.eq_conditions is None and "eq_conditions" in self.model_fields_set:
            _dict["eq_conditions"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PageParamsTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "page": obj.get("page") if obj.get("page") is not None else 1,
                "page_size": (
                    obj.get("page_size") if obj.get("page_size") is not None else 10
                ),
                "order_by": obj.get("order_by"),
                "order_direction": obj.get("order_direction"),
                "eq_conditions": obj.get("eq_conditions"),
            }
        )
        return _obj
