# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from whiskerrag_client.models.embedding_model_enum import EmbeddingModelEnum
from typing import Optional, Set
from typing_extensions import Self


class RetrievalByKnowledgeRequest(BaseModel):
    """
    RetrievalByKnowledgeRequest
    """  # noqa: E501

    question: StrictStr = Field(description="The query question")
    embedding_model_name: EmbeddingModelEnum = Field(
        description="The name of the embedding model"
    )
    similarity_threshold: Optional[
        Union[
            Annotated[float, Field(le=1.0, strict=True, ge=0.0)],
            Annotated[int, Field(le=1, strict=True, ge=0)],
        ]
    ] = Field(
        default=0.5, description="The similarity threshold, ranging from 0.0 to 1.0."
    )
    top: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(
        default=1024, description="The maximum number of results to return."
    )
    metadata_filter: Optional[Dict[str, Any]] = Field(
        default=None, description="metadata filter"
    )
    knowledge_id_list: List[StrictStr] = Field(description="knowledge id list")
    __properties: ClassVar[List[str]] = [
        "question",
        "embedding_model_name",
        "similarity_threshold",
        "top",
        "metadata_filter",
        "knowledge_id_list",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrievalByKnowledgeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrievalByKnowledgeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "question": obj.get("question"),
                "embedding_model_name": obj.get("embedding_model_name"),
                "similarity_threshold": (
                    obj.get("similarity_threshold")
                    if obj.get("similarity_threshold") is not None
                    else 0.5
                ),
                "top": obj.get("top") if obj.get("top") is not None else 1024,
                "metadata_filter": obj.get("metadata_filter"),
                "knowledge_id_list": obj.get("knowledge_id_list"),
            }
        )
        return _obj
