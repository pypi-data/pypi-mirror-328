# (generated with --quick)

import _collections_abc
import base64
import binascii
import functools
import hashlib
import importlib
import math
import warnings
from typing import Any, Never

ImproperlyConfigured: Any
RANDOM_STRING_CHARS: Any
constant_time_compare: Any
get_hashers: functools._lru_cache_wrapper
get_hashers_by_algorithm: functools._lru_cache_wrapper
get_random_string: Any
import_string: Any
pbkdf2: Any
settings: Any

class Argon2PasswordHasher(BasePasswordHasher):
    __doc__: str
    algorithm: str
    library: str
    memory_cost: int
    parallelism: int
    time_cost: int
    def decode(self, encoded) -> dict[str, Any]: ...
    def encode(self, password, salt) -> str: ...
    def harden_runtime(self, password, encoded) -> None: ...
    def must_update(self, encoded) -> Any: ...
    def params(self) -> Any: ...
    def safe_summary(self, encoded) -> dict[str, Any]: ...
    def verify(self, password, encoded) -> Any: ...

class BCryptPasswordHasher(BCryptSHA256PasswordHasher):
    __doc__: str
    algorithm: str
    digest: None

class BCryptSHA256PasswordHasher(BasePasswordHasher):
    __doc__: str
    algorithm: str
    library: tuple[str, str]
    rounds: int
    def decode(self, encoded) -> dict[str, Any]: ...
    def digest(string: _collections_abc.Buffer = ..., *, usedforsecurity: bool = ...) -> hashlib._Hash: ...
    def encode(self, password, salt) -> str: ...
    def harden_runtime(self, password, encoded) -> None: ...
    def must_update(self, encoded) -> bool: ...
    def safe_summary(self, encoded) -> dict[str, Any]: ...
    def salt(self) -> Any: ...
    def verify(self, password, encoded) -> Any: ...

class BasePasswordHasher:
    __doc__: str
    algorithm: None
    library: None
    salt_entropy: int
    def _check_encode_args(self, password, salt) -> None: ...
    def _load_library(self) -> module: ...
    def decode(self, encoded) -> Never: ...
    def encode(self, password, salt) -> Never: ...
    def harden_runtime(self, password, encoded) -> None: ...
    def must_update(self, encoded) -> bool: ...
    def safe_summary(self, encoded) -> Never: ...
    def salt(self) -> Any: ...
    def verify(self, password, encoded) -> Never: ...

class PBKDF2PasswordHasher(BasePasswordHasher):
    __doc__: str
    algorithm: str
    iterations: int
    def decode(self, encoded) -> dict[str, Any]: ...
    def digest(string: _collections_abc.Buffer = ..., *, usedforsecurity: bool = ...) -> hashlib._Hash: ...
    def encode(self, password, salt, iterations = ...) -> str: ...
    def harden_runtime(self, password, encoded) -> None: ...
    def must_update(self, encoded) -> bool: ...
    def safe_summary(self, encoded) -> dict[str, Any]: ...
    def verify(self, password, encoded) -> Any: ...

class PBKDF2SHA1PasswordHasher(PBKDF2PasswordHasher):
    __doc__: str
    algorithm: str
    def digest(string: _collections_abc.Buffer = ..., *, usedforsecurity: bool = ...) -> hashlib._Hash: ...

class ScryptPasswordHasher(BasePasswordHasher):
    __doc__: str
    algorithm: str
    block_size: int
    maxmem: int
    parallelism: int
    work_factor: int
    def decode(self, encoded) -> dict[str, Any]: ...
    def encode(self, password, salt, n = ..., r = ..., p = ...) -> str: ...
    def harden_runtime(self, password, encoded) -> None: ...
    def must_update(self, encoded) -> bool: ...
    def safe_summary(self, encoded) -> dict[str, Any]: ...
    def verify(self, password, encoded) -> Any: ...

def check_password(password, encoded, setter = ..., preferred = ...) -> Any: ...
def get_hasher(algorithm = ...) -> Any: ...
def hash_password(password, salt = ..., hasher = ...) -> Any: ...
def identify_hasher(encoded) -> Any: ...
def mask_hash(hash, show = ..., char = ...) -> Any: ...
def must_update_salt(salt, expected_entropy) -> bool: ...
