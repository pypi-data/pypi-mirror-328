# Experimental workflow to build on windows.  Currently doesn't work.  Issues:
#   * Need BLAS/LAPACK.  Using info from here: https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/How-to-install-oneMKL-in-GitHub-Actions/m-p/1484626,
#   * here:  https://github.com/oneapi-src/oneapi-ci/blob/master/scripts/install_windows.bat, and here: 
#   * https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml, can install and use MKL.  Based on the
#     path though, seems to be 32-bit, and I can't figure out how to force a 64-bit install in C:\Program Files
#   * OpenMP doesn't work due to missing functionality in MSVC
#   * Need to specify Fortran name mangling to not require a Fortran compiler
# With the above, I can get a successful configure, but build fails very quickly with error:  
#   LINK : fatal error LNK1181: cannot open input file '..\..\core\src\Release\kokkoscore.lib' [D:\a\GenTen\GenTen\build\tpls\kokkos\containers
# These seems to happen before anything is actually compiled though, which I don't understand.

name: CMake on multiple platforms - windows

on:
  workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            openmp: OFF
            serial: ON
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      env:
        PYTHONPATH: ${{ steps.strings.outputs.build-output-dir }}/python
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        # Released version of pyttb is too old, so we need to build from the github repo
        #pip install pyttb
        mkdir pyttb
        cd pyttb
        git clone https://github.com/sandialabs/pyttb.git
        cd pyttb
        pip install .

    - name: Install mkl
      shell: cmd
      run: |
        REM SPDX-FileCopyrightText: 2022 Intel Corporation
        REM
        REM SPDX-License-Identifier: MIT
        set URL=https://registrationcenter-download.intel.com/akdlm/IRC_NAS/d91caaa0-7306-46ea-a519-79a0423e1903/w_BaseKit_p_2024.2.1.101_offline.exe
        set COMPONENTS=intel.oneapi.win.mkl.devel
        curl.exe --output %TEMP%\webimage.exe --url %URL% --retry 5 --retry-delay 5
        start /b /wait %TEMP%\webimage.exe -s -x -f webimage_extracted --log extract.log
        del %TEMP%\webimage.exe
        webimage_extracted\bootstrapper.exe -s --action install --components=%COMPONENTS% --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=.
        set installer_exit_code=%ERRORLEVEL%
        rd /s/q "webimage_extracted"
        exit /b %installer_exit_code%
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        MKLROOT: c:\Program Files (x86)\Intel\oneAPI\mkl\latest
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DBUILD_SHARED_LIBS=ON
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DKokkos_ENABLE_OPENMP=${{ matrix.openmp }}
        -DKokkos_ENABLE_SERIAL=${{ matrix.serial }}
        -DENABLE_PYTHON=ON
        -DF77_BLAS_MANGLE='(name,NAME) name ## _'
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      env:
        PYTHONPATH: ${{ steps.strings.outputs.build-output-dir }}/python
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure
