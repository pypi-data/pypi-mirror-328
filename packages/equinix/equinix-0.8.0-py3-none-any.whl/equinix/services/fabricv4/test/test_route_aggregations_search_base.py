# coding: utf-8

"""
    Equinix Fabric API v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from equinix.services.fabricv4.models.route_aggregations_search_base import RouteAggregationsSearchBase

class TestRouteAggregationsSearchBase(unittest.TestCase):
    """RouteAggregationsSearchBase unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RouteAggregationsSearchBase:
        """Test RouteAggregationsSearchBase
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RouteAggregationsSearchBase`
        """
        model = RouteAggregationsSearchBase()
        if include_optional:
            return RouteAggregationsSearchBase(
                filter = equinix.services.fabricv4.models.route_aggregations_search_base_filter.RouteAggregationsSearchBase_filter(
                    and = [
                        equinix.services.fabricv4.models.route_aggregations_search_filter_item.RouteAggregationsSearchFilterItem(
                            property = '/type', 
                            operator = '', 
                            values = [
                                ''
                                ], )
                        ], ),
                pagination = equinix.services.fabricv4.models.pagination.Pagination(
                    offset = 0, 
                    limit = 0, 
                    total = 0, 
                    next = '', 
                    previous = '', ),
                sort = [
                    equinix.services.fabricv4.models.route_aggregation_sort_item.RouteAggregationSortItem(
                        property = '/changeLog/updatedDateTime', 
                        direction = 'DESC', )
                    ]
            )
        else:
            return RouteAggregationsSearchBase(
        )
        """

    def testRouteAggregationsSearchBase(self):
        """Test RouteAggregationsSearchBase"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
