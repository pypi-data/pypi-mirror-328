# coding: utf-8

"""
    Equinix Fabric API v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from equinix.services.fabricv4.models.all_ports_response import AllPortsResponse

class TestAllPortsResponse(unittest.TestCase):
    """AllPortsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AllPortsResponse:
        """Test AllPortsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AllPortsResponse`
        """
        model = AllPortsResponse()
        if include_optional:
            return AllPortsResponse(
                pagination = equinix.services.fabricv4.models.pagination.Pagination(
                    offset = 0, 
                    limit = 0, 
                    total = 0, 
                    next = '', 
                    previous = '', ),
                data = [
                    equinix.services.fabricv4.models.port.Port(
                        href = '', 
                        type = 'XF_PORT', 
                        id = 56, 
                        uuid = '', 
                        name = '', 
                        description = '', 
                        physical_ports_speed = 0, 
                        connections_count = 0, 
                        physical_ports_type = '1000BASE_LX', 
                        physical_ports_count = 56, 
                        connectivity_source_type = 'COLO', 
                        bmmr_type = 'SELF', 
                        project = equinix.services.fabricv4.models.project.Project(
                            project_id = '44f4c4f8-2f39-494e-838c-d8e640591be5', ), 
                        state = 'PENDING', 
                        order = equinix.services.fabricv4.models.port_order.PortOrder(
                            purchase_order = equinix.services.fabricv4.models.port_order_purchase_order.PortOrder_purchaseOrder(
                                number = '', 
                                amount = '', 
                                start_date = '', 
                                end_date = '', 
                                attachment_id = '', 
                                selection_type = 'EXEMPTION', ), 
                            order_id = '', 
                            customer_reference_id = '', 
                            order_number = '', 
                            uuid = '', 
                            signature = equinix.services.fabricv4.models.port_order_signature.PortOrder_signature(
                                signatory = 'DELEGATE', 
                                delegate = equinix.services.fabricv4.models.port_order_signature_delegate.PortOrder_signature_delegate(
                                    first_name = '', 
                                    last_name = '', 
                                    email = '', ), ), ), 
                        operation = null, 
                        account = equinix.services.fabricv4.models.simplified_account.SimplifiedAccount(
                            account_number = 56, 
                            account_name = '', 
                            org_id = 56, 
                            organization_name = '', 
                            global_org_id = '', 
                            global_organization_name = '', 
                            ucm_id = '', 
                            global_cust_id = '', 
                            reseller_account_number = 56, 
                            reseller_account_name = '', 
                            reseller_ucm_id = '', 
                            reseller_org_id = 56, ), 
                        change_log = equinix.services.fabricv4.models.changelog.Changelog(
                            created_by = 'johnsmith', 
                            created_by_full_name = 'John Smith', 
                            created_by_email = 'john.smith@example.com', 
                            created_date_time = '2020-11-06T07:00Z', 
                            updated_by = 'johnsmith', 
                            updated_by_full_name = 'John Smith', 
                            updated_by_email = 'john.smith@example.com', 
                            updated_date_time = '2020-11-06T07:00Z', 
                            deleted_by = 'johnsmith', 
                            deleted_by_full_name = 'John Smith', 
                            deleted_by_email = 'john.smith@example.com', 
                            deleted_date_time = '2020-11-06T07:00Z', ), 
                        service_type = 'EPL', 
                        bandwidth = 0, 
                        available_bandwidth = 0, 
                        used_bandwidth = 0, 
                        location = equinix.services.fabricv4.models.simplified_location.SimplifiedLocation(
                            metro_href = 'https://api.equinix.com/fabric/v4/metros/AM', 
                            region = 'AMER, APAC, EMEA', 
                            metro_name = 'Amsterdam', 
                            metro_code = 'AM', 
                            ibx = 'AM1', ), 
                        device = equinix.services.fabricv4.models.port_device.PortDevice(
                            name = '', 
                            redundancy = equinix.services.fabricv4.models.port_device_redundancy.PortDeviceRedundancy(
                                group = '', 
                                priority = 'PRIMARY', ), ), 
                        interface = equinix.services.fabricv4.models.port_interface.PortInterface(), 
                        demarcation_point_ibx = '', 
                        tether_ibx = '', 
                        demarcation_point = equinix.services.fabricv4.models.port_demarcation_point.PortDemarcationPoint(
                            cabinet_unique_space_id = '', 
                            cage_unique_space_id = '', 
                            patch_panel = '', 
                            patch_panel_name = '', 
                            patch_panel_port_a = '', 
                            patch_panel_port_b = '', 
                            connector_type = '', 
                            ibx = '', ), 
                        redundancy = equinix.services.fabricv4.models.port_redundancy.PortRedundancy(
                            enabled = True, 
                            group = '', ), 
                        encapsulation = equinix.services.fabricv4.models.port_encapsulation.PortEncapsulation(
                            tag_protocol_id = '', ), 
                        lag_enabled = True, 
                        lag = null, 
                        asn = 56, 
                        package = equinix.services.fabricv4.models.package.Package(
                            code = 'STANDARD', ), 
                        settings = equinix.services.fabricv4.models.port_settings.PortSettings(
                            buyout = True, 
                            view_port_permission = True, 
                            place_vc_order_permission = True, 
                            layer3_enabled = True, 
                            shared_port_type = True, 
                            shared_port_product = 'NETWORK_EDGE', 
                            package_type = 'STANDARD', ), 
                        physical_port_quantity = 56, 
                        notifications = [
                            equinix.services.fabricv4.models.port_notification.PortNotification(
                                type = 'NOTIFICATION', 
                                registered_users = [
                                    ''
                                    ], )
                            ], 
                        additional_info = [
                            equinix.services.fabricv4.models.port_additional_info.PortAdditionalInfo(
                                key = '', 
                                value = '', )
                            ], 
                        end_customer = equinix.services.fabricv4.models.end_customer.EndCustomer(
                            is_disclosed = True, 
                            name = '', 
                            mdm_id = '', ), 
                        physical_ports = [
                            equinix.services.fabricv4.models.physical_port.PhysicalPort(
                                href = '', 
                                id = 56, 
                                interface_speed = 0, 
                                interface_type = '', 
                                uuid = '', 
                                tether = equinix.services.fabricv4.models.port_tether.PortTether(
                                    cross_connect_id = '', 
                                    cabinet_number = '', 
                                    system_name = '', 
                                    patch_panel = '', 
                                    patch_panel_port_a = '', 
                                    patch_panel_port_b = '', 
                                    ibx = '', ), 
                                operation = equinix.services.fabricv4.models.port_operation.PortOperation(
                                    operational_status = 'UP', 
                                    connection_count = 56, 
                                    evpl_vc_count = 56, 
                                    fg_vc_count = 56, 
                                    access_vc_count = 56, 
                                    op_status_changed_at = '2020-11-06T07:00Z', ), 
                                loas = [
                                    equinix.services.fabricv4.models.port_loa.PortLoa(
                                        uuid = '', 
                                        href = '', )
                                    ], )
                            ], 
                        loas = [
                            equinix.services.fabricv4.models.port_loa.PortLoa(
                                uuid = '', 
                                href = '', )
                            ], )
                    ]
            )
        else:
            return AllPortsResponse(
        )
        """

    def testAllPortsResponse(self):
        """Test AllPortsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
