[tool.poetry]
name = "fouriercrop"
version = "0.1.0"
description = "A Python class for cropping the central region of a tensor in the Fourier domain."
authors = ["cryoetools <cryoetools@outlook.com>"]
readme = "README.md"
homepage = "https://github.com/cryoetools/fouriercrop"
repository = "https://github.com/cryoetools/fouriercrop"
documentation = "https://fouriercrop.readthedocs.io"
keywords = ["fouriercrop"]
classifiers=[
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/cryoetools/fouriercrop/issues"

[tool.poetry.scripts]
fouriercrop = 'fouriercrop.cli:app'

[tool.poetry.dependencies]
python = "<3.13,>=3.9"
typer = {extras = ["all"], version = "^0.13.0"}
torch = {version = "2.1.2+cu118", source = "torch-cu118"}
numpy = {version = "1.25.0", source = "tsinghua"}
mrcfile = {version = "^1.5.4", source = "tsinghua"}
pytest = {version = "^8.3.4", source = "tsinghua"}
pipreqs = {version = "^0.5.0", source = "tsinghua"}
sphinx-autobuild = {version = "^2024.10.3", source = "tsinghua"}
sphinx-rtd-theme = {version = "^3.0.2", source = "tsinghua"}
pydata-sphinx-theme = {version = "^0.16.1", source = "tsinghua"}
recommonmark = {version = "^0.7.1", source = "tsinghua"}
sphinx-markdown-tables = {version = "^0.0.17", source = "tsinghua"}

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
invoke = "^2.2.0"
bump2version = "^1.0.1"
watchdog = {version = "^6.0.0", extras = ["watchmedo"]}

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
xdoctest = "^1.2.0"
coverage = {version = "^7.6.7", extras = ["toml"]}
pytest-cov = "^6.0.0"

[tool.poetry.group.linters.dependencies]
isort = "^5.13.2"
black = "^24.10.0"
ruff = "^0.7.4"

[tool.poetry.group.security.dependencies]
safety = "^3.2.11"

[tool.poetry.group.typing.dependencies]
mypy = "^1.13.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.4.7"
recommonmark = "^0.7.1"


[[tool.poetry.source]]
name = "torch-cu118"
url = "https://download.pytorch.org/whl/cu118"
priority = "supplemental"


[[tool.poetry.source]]
name = "tsinghua"
url = "https://pypi.tuna.tsinghua.edu.cn/simple"
priority = "supplemental"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["fouriercrop"]

[tool.coverage.report]
fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug",
  "if settings.DEBUG:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == __main__:"
]
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
target-version = "py39"
output-format = "full"
line-length = 99
fix = true
extend-exclude = [
    "docs/*",
]

[tool.ruff.lint]
select = [
  "E", "F", "W",  # flake8
  "C",  # mccabe
  "I",  # isort
  "N",  # pep8-naming
  "D",  # flake8-docstrings
  "ANN",  # flake8-annotations
  "S",  # flake8-bandit
  "BLE",  # flake8-blind-except
  "B",  # flake8-bugbear
  "A",  # flake8-builtins
  "G",  # flake8-logging-format
  "ERA",  # eradicate
  "ISC",  # flake8-implicit-str-concat
  "RUF",  # Ruff-specific rules
]
ignore = ["ANN101"]
unfixable = [
  "ERA",  # Don't remove commented-out code
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["fouriercrop"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 99
known_third_party = ["invoke", "nox", "nox_poetry"]

[tool.black]
line-length = 99
target-version = ["py39"]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["pytest.*", "invoke.*", "nox.*", "nox_poetry.*"]
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = true
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
