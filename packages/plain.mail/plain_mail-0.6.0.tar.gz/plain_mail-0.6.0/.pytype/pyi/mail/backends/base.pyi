# (generated with --quick)

from typing import Any, Never, TypeVar, overload

_TBaseEmailBackend = TypeVar('_TBaseEmailBackend', bound=BaseEmailBackend)

class BaseEmailBackend:
    __doc__: str
    fail_silently: Any
    def __enter__(self: _TBaseEmailBackend) -> _TBaseEmailBackend: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: BaseException, traceback) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: BaseException, traceback) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: None, traceback) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: None, traceback) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: BaseException, traceback: None) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: BaseException, traceback: None) -> None: ...
    @overload
    def __exit__(self, exc_type: type[BaseException], exc_value: None, traceback: None) -> None: ...
    @overload
    def __exit__(self, exc_type: None, exc_value: None, traceback: None) -> None: ...
    def __init__(self, fail_silently = ..., **kwargs) -> None: ...
    def close(self) -> None: ...
    def open(self) -> None: ...
    def send_messages(self, email_messages) -> Never: ...
