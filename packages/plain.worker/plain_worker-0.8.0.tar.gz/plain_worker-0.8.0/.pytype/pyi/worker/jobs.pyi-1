# (generated with --quick)

import datetime
import inspect
import logging
import types
from plain.utils import timezone
from typing import Any, Never, Optional, Union

IntegrityError: Any
Model: Any
logger: logging.Logger

class Job(metaclass=JobType):
    _init_args: tuple
    _init_kwargs: dict
    def _in_progress(self, unique_key) -> list: ...
    def _job_class_str(self) -> str: ...
    def get_priority(self) -> int: ...
    def get_queue(self) -> str: ...
    def get_retries(self) -> int: ...
    def get_retry_delay(self, attempt: int) -> int: ...
    def get_unique_key(self) -> str: ...
    def run(self) -> Never: ...
    def run_in_worker(self, *, queue: Optional[str] = ..., delay: Optional[Union[int, datetime.datetime, datetime.timedelta]] = ..., priority: Optional[int] = ..., retries: Optional[int] = ..., retry_attempt: int = ..., unique_key: Optional[str] = ...) -> Any: ...

class JobParameters:
    @staticmethod
    def from_json(data) -> tuple[list, dict]: ...
    @staticmethod
    def to_json(args, kwargs) -> dict[str, Union[dict, list]]: ...

class JobType(type):
    __doc__: str
    def __call__(self, *args, **kwargs) -> Any: ...

class ModelInstanceParameter:
    __doc__: str
    @staticmethod
    def from_instance(instance) -> str: ...
    @staticmethod
    def is_gid(x) -> Any: ...
    @staticmethod
    def to_instance(s) -> Any: ...

def import_module(name: str, package: Optional[str] = ...) -> types.ModuleType: ...
def load_job(job_class_path, parameters) -> Any: ...
