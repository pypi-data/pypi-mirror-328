[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "kitchenai-whisk"
dynamic = ["version"]
description = "KitchenAI Whisk - Whisk Up Your Bento Box. A tool for running kitchenai apps."
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
dependencies = [
    "typer>=0.9.0",
    "rich>=13.7.0",
    "fastapi>=0.100.0",
    "faststream[nats]>=0.4.0",
    "anyio>=3.7.1",
    "watchfiles",
    "httpx>=0.26.0",
    "pyyaml>=6.0.0",
    "pydantic>=2.0.0",
    "cookiecutter>=2.5.0",
    "uvicorn>=0.27.0",
    "python-multipart",
]
[tool.hatch.build.targets.wheel]
include = [
    "whisk/**",  # Include all files in the `whisk` directory
]
[project.scripts]
whisk = "whisk.__main__:app"

[tool.hatch.version]
path = "whisk/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.3.1",  # For parallel test execution with -n flag
    "pytest-rerunfailures>=12.0",  # For test retries
    "cookiecutter>=2.5.0",  # Added for CLI tests
    "git-cliff",  # Added for changelog generation
]

# Optional: Add scripts section to hatch env
[tool.hatch.envs.default.scripts]
changelog = "git cliff -o CHANGELOG.md"

[tool.pytest.ini_options]
addopts = "-v --cov=whisk --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
footer = """
<!-- generated by git-cliff -->
"""
trim = true

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc|^docs", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^build", group = "<!-- 7 -->📦 Build" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 8 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 9 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 10 -->◀️ Revert" },
]
protect_breaking_commits = false
filter_commits = false
topo_order = false
sort_commits = "oldest"

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.26.0",
] 