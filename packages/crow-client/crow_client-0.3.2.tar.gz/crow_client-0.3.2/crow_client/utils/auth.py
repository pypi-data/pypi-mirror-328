import getpass
import http.server
import secrets
import socketserver
import threading
import urllib.parse
import webbrowser

from crow_client.models.app import FirebaseCreds, ProviderResponse, Providers

# This is not a secret, and doesn't need to be hidden
# It's simply a client id for users to know where they are logging into
# This client_id is generated by Google as part of the oauth provisioning ran for our client
CLIENT_ID = "209212876053-6rn7c2q3o64gklc07a90dgsm79jnf9b3.apps.googleusercontent.com"
SCOPE = "openid"


def get_google_credentials() -> ProviderResponse:
    received_token = None

    class TokenHandler(http.server.SimpleHTTPRequestHandler):
        def handle_callback(self):
            nonlocal received_token
            query = urllib.parse.urlparse(self.path).query
            params = urllib.parse.parse_qs(query)

            if "code" in params:
                received_token = params["code"][0]
                self.send_response(200)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write(
                    b"Authentication successful! You can close this window."
                )
                threading.Thread(target=httpd.shutdown).start()
            else:
                self.send_response(400)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write(
                    b"Authentication failed! Check the console for details."
                )
                threading.Thread(target=httpd.shutdown).start()

        def do_GET(self):  # noqa: N802
            self.handle_callback()

    with socketserver.TCPServer(("", 0), TokenHandler) as httpd:
        PORT = httpd.server_address[1]

        server_thread = threading.Thread(target=httpd.serve_forever)
        server_thread.daemon = True
        server_thread.start()

        redirect_uri = f"http://localhost:{PORT}"
        auth_params = {
            "client_id": CLIENT_ID,
            "response_type": "code",
            "redirect_uri": redirect_uri,
            "scope": SCOPE,
            "access_type": "offline",
            "state": secrets.token_urlsafe(16),
        }

        auth_url = (
            "https://accounts.google.com/o/oauth2/v2/auth?"
            + urllib.parse.urlencode(auth_params)
        )
        webbrowser.open(auth_url)

        server_thread.join()

        return ProviderResponse(
            provider=Providers.GOOGLE, code=received_token, redirect_uri=redirect_uri
        )


def get_password_credentials() -> FirebaseCreds:
    return FirebaseCreds(email=input("Email: "), password=getpass.getpass("Password: "))
