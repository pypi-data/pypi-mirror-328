# (generated with --quick)

import datetime as _datetime
import logging
import string
from plain import signing
from plain.utils import timezone
from typing import Annotated, Any, Never, TypeVar, Union

VALID_KEY_CHARS: str
datetime: type[_datetime.datetime]
get_random_string: Any
settings: Any
timedelta: type[_datetime.timedelta]

_T0 = TypeVar('_T0')

class CreateError(Exception):
    __doc__: str

class SessionBase:
    _SessionBase__not_given: Any
    _SessionBase__session_key: Any
    __doc__: str
    _session: Annotated[Any, 'property']
    _session_cache: Any
    _session_key: Annotated[Any, 'property']
    accessed: bool
    key_salt: Annotated[str, 'property']
    modified: bool
    session_key: Annotated[Any, 'property']
    def __contains__(self, key) -> bool: ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key) -> Any: ...
    def __init__(self, session_key = ...) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def _get_new_session_key(self) -> Never: ...
    def _get_or_create_session_key(self) -> Any: ...
    def _get_session(self, no_load = ...) -> Any: ...
    def _get_session_key(self) -> Any: ...
    def _set_session_key(self, value) -> None: ...
    def _validate_session_key(self, key: _T0) -> Union[bool, _T0]: ...
    def clear(self) -> None: ...
    @classmethod
    def clear_expired(cls) -> Never: ...
    def create(self) -> Never: ...
    def cycle_key(self) -> Never: ...
    def decode(self, session_data) -> Any: ...
    def delete(self, session_key = ...) -> Never: ...
    def encode(self, session_dict) -> Any: ...
    def exists(self, session_key) -> Never: ...
    def flush(self) -> Never: ...
    def get(self, key, default = ...) -> Any: ...
    def get_expire_at_browser_close(self) -> Any: ...
    def get_expiry_age(self, **kwargs) -> Any: ...
    def get_expiry_date(self, **kwargs) -> Any: ...
    def get_session_cookie_age(self) -> Any: ...
    def has_key(self, key) -> bool: ...
    def is_empty(self) -> bool: ...
    def items(self) -> Any: ...
    def keys(self) -> Any: ...
    def load(self) -> Never: ...
    def pop(self, key, default = ...) -> Any: ...
    def save(self, must_create = ...) -> Never: ...
    def set_expiry(self, value) -> None: ...
    def setdefault(self, key, value) -> Any: ...
    def update(self, dict_) -> None: ...
    def values(self) -> Any: ...

class UpdateError(Exception):
    __doc__: str
