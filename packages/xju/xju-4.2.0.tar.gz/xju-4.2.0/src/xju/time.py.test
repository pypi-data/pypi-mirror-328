#!/usr/bin/env python3
# Copyright (c) 2022 Trevor Taylor
# coding: utf-8
# 
# Permission to use, copy, modify, and/or distribute this software for
# any purpose with or without fee is hereby granted, provided that all
# copyright notices and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
from sys import path
import asyncio

from xju.time import (
    Hours,
    Minutes,
    Seconds,
    Duration,
    Timestamp,
    now,
    sleep_for,
    async_sleep_until,
    async_sleep_until_first_of
)
from typing import cast
from xju.xn import readable_repr
from xju.assert_ import Assert

t1=now()
Assert(Timestamp(23.86).value())==23.86
Assert(str(Timestamp(23.86)))==str(23.86)
Assert(repr(Timestamp(23.86)))==repr(23.86)
t1=Timestamp(23.86)
Assert(f'{t1}')=='23.86'
t2=Timestamp(23.96)
Assert(t1)==Timestamp(23.86)
Assert(t1!=t2)==True
Assert(t1)<t2
Assert(t2)>t1
Assert(t1)<=t2
Assert(t1)<=t1
Assert(t2)>=t1
Assert(t2)>=t2

Assert(Hours(1)+Timestamp(23.86))==Timestamp(3600+23.86)
Assert(Timestamp(23.86)+Minutes(1))==Timestamp(60+23.86)
Assert(Timestamp(23.86)+Seconds(1))==Timestamp(1+23.86)
Assert(Timestamp(23.86)+Duration(1.2))==Timestamp(1.2+23.86)

Assert(Timestamp(23.86)-Hours(1))==Timestamp(-3600+23.86)
Assert(Timestamp(23.86)-Minutes(1))==Timestamp(-60+23.86)
Assert(Timestamp(23.86)-Seconds(1))==Timestamp(-1+23.86)
Assert(Timestamp(23.86)-Duration(1.2))==Timestamp(-1.2+23.86)
Assert(Timestamp(23.86)-Timestamp(1))==Duration(-1+23.86)

# float must return a float
Assert(float(Timestamp(3)))==3.0
Assert(float(Duration(7)))==7.0

try:
    Assert(Timestamp(23.86)-cast(Hours,1))
except Exception as e:
    Assert(readable_repr(e))=="cannot subtract 1 of type <class 'int'> from Timestamp"
else:
    assert False
    pass

try:
    t1<8  # type: ignore
except Exception as e:
    Assert(readable_repr(e))=="'<' not supported between instances of 'Timestamp' and 'int'"
else:
    assert False
    pass

Assert(float(Timestamp(23.86)))==23.86

# Timestamp is ordered by value
Assert(now())>=t1
t2=now()
sleep_for(Duration(0.05))
t3=now()
Assert(t2+Duration(0.05))<=t3

# Timestamp is hashable
starts = set[Timestamp]()
starts.add(now())

async def async_tests():
    await async_sleep_until(now()-Duration(10))

    t1=now()
    await async_sleep_until_first_of(now()+Duration(5), now())
    Assert(now())<t1+Duration(2)

asyncio.run(async_tests())
