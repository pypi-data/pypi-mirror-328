#!/usr/bin/env python3


# Copyright (c) 2022 Trevor Taylor
# coding: utf-8
# 
# Permission to use, copy, modify, and/or distribute this software for
# any purpose with or without fee is hereby granted, provided that all
# copyright notices and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
from sys import path
from os.path import dirname
from functools import partial
if path[0]==dirname(__file__): path.pop(0)
from xju.cmc import AsyncTask, AsyncMutex, AsyncLock, AsyncCondition, delay_cancellation

import asyncio
from xju.assert_ import Assert
from xju.xn import readable_repr

async def test1() -> None:
    running = asyncio.get_running_loop().create_future()
    post_cancel = asyncio.get_running_loop().create_future()
    result = asyncio.get_running_loop().create_future()
    
    async def task_that_succeeds() -> int:
        print('a')
        running.set_result(True)
        print('b')
        await post_cancel
        print('c')
        result.set_result(7)
        print('d')
        return 8
    async with AsyncTask(partial(delay_cancellation,task_that_succeeds())) as task:
        await running
        print('e')
        task.cancel("fred")
        post_cancel.set_result(None)
        print('f')
        try:
            await task
        except asyncio.CancelledError as e:
            print('g')
            Assert(result.result())==7
            Assert(readable_repr(e))=="fred"
        else:
            assert False
            pass
        pass

async def test2() -> None:
    # no cancellation
    running = asyncio.get_running_loop().create_future()
    post_cancel = asyncio.get_running_loop().create_future()
    result = asyncio.get_running_loop().create_future()
    
    async def task_that_succeeds() -> int:
        print('a')
        running.set_result(True)
        print('b')
        await post_cancel
        print('c')
        result.set_result(7)
        print('d')
        return 8

    async with AsyncTask(partial(delay_cancellation,task_that_succeeds())) as task:
        await running
        print('e')
        post_cancel.set_result(None)
        print('f')
        Assert(await task)==8
    pass

async def test3() -> None:
    running = asyncio.get_running_loop().create_future()
    post_cancel = asyncio.get_running_loop().create_future()
    result = asyncio.get_running_loop().create_future()
    
    async def task_that_fails() -> int:
        print('a')
        running.set_result(True)
        print('b')
        await post_cancel
        print('c')
        result.set_result(7)
        if 10/2:
            raise Exception('jock')
        return 8

    async with AsyncTask(partial(delay_cancellation,task_that_fails())) as task:
        await running
        print('e')
        task.cancel("fred")
        post_cancel.set_result(None)
        print('f')
        try:
            await task
        except asyncio.CancelledError as e:
            print('g')
            Assert(result.result())==7
            Assert(readable_repr(e))=="fred"
        else:
            assert False
            pass
        pass

async def test4() -> None:
    running = asyncio.get_running_loop().create_future()
    post_cancel = asyncio.get_running_loop().create_future()
    result = asyncio.get_running_loop().create_future()
    
    async def task_that_fails() -> int:
        print('a')
        running.set_result(True)
        print('b')
        await post_cancel
        print('c')
        result.set_result(7)
        if 10/2:
            raise Exception('jock')
        return 8

    async with AsyncTask(partial(delay_cancellation,task_that_fails())) as task:
        await running
        print('e')
        post_cancel.set_result(None)
        print('f')
        try:
            await task
        except Exception as e:
            Assert(readable_repr(e))=="jock"
        else:
            assert False
            pass

asyncio.run(test1())
asyncio.run(test2())
asyncio.run(test3())
asyncio.run(test4())
