#!/usr/bin/env python3

# Copyright (c) 2024 Trevor Taylor
# coding: utf-8
# 
# Permission to use, copy, modify, and/or distribute this software for
# any purpose with or without fee is hereby granted, provided that all
# copyright notices and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
from sys import path
from os.path import dirname
if path[0]==dirname(__file__): path.pop(0)

import asyncio
from pathlib import Path
import socket
from typing import ClassVar, Self, Any

from xju.assert_ import Assert
from xju.xn import readable_repr

from xju.cmc.sockets import (
    UnixAddressType,
    StreamSocketListener,
    StreamSocketConnection,
    ListenerBacklog,
    AddressTypeProto,
    StreamSocket,
)

async def main():
    S = Path('temp-unix-socket')
    S2 = Path('temp-unix-socket-2')
    A = UnixAddressType(S)
    Assert(str(A))==f'unix socket {S}'
    with (
        StreamSocketListener(UnixAddressType(S), ListenerBacklog(0)) as listener,
        StreamSocketListener(UnixAddressType(S2), ListenerBacklog(0)) as listener2
    ):
        Assert(str(listener))=='stream socket listener on unix socket temp-unix-socket with backlog 0'
        # can't have multiple listeners on same unix socket:
        try:
            with StreamSocketListener(UnixAddressType(S), ListenerBacklog(0)) as listener3:
                pass
        except Exception as e:
            Assert(str(e)).contains('Address already in use')
        else:
            assert False
            pass
        # backlog 0 allows one connection to be queued...
        async with StreamSocketConnection(A) as c1:
            try:
                # ... but not a second
                async with StreamSocketConnection(A) as c2:
                    pass
            except Exception as e:
                Assert(str(e)).contains('Resource temporarily unavailable')  # backlog exceeded
            else:
                assert False
                pass

            # trying to accept on empty sequence of listeners waits forever
            try:
                async with asyncio.Timeout(0.01):
                    async with StreamSocketConnection[UnixAddressType]([]) as c1s:
                        pass
                    pass
                pass
            except TimeoutError:
                pass
            else:
                assert False
                    
            # accept the queued connection (c1 above)
            async with StreamSocketConnection([listener,listener2]) as c1s:
                Assert( (c1s.local_address, c1s.remote_address) )==(A, UnixAddressType(Path('')))
                Assert( (c1.local_address, c1.remote_address) )==(UnixAddressType(Path('')), A)
                pass
            # now c1 is no longer pending (it is accepted), c2 is "pendable":
            async with StreamSocketConnection(A) as c2:

                # ... and acceptable:
                async with StreamSocketConnection(listener) as c2s:
                    pass
                pass
            pass
        pass
    # can't reopen existing socket for listening without recreating it:
    try:
        with StreamSocketListener(UnixAddressType(S), ListenerBacklog(0)) as listener:
            pass
    except Exception as e:
        Assert(str(e)).contains('Address already in use')
    else:
        assert False
        pass

    # ... have to remove the file first
    S.unlink()
    with StreamSocketListener(UnixAddressType(S), ListenerBacklog(0)) as listener:
        pass

    # cleanup
    S.unlink()

    # opening a non-unix-socket file also fails with 'Address already in use'
    try:
        with StreamSocketListener(UnixAddressType(Path('/dev/null')), ListenerBacklog(2)):
            pass
    except Exception as e:
        Assert(str(e)).contains('Address already in use')
        pass
    pass

class BogusAddressType(AddressTypeProto):
    family: ClassVar[int] = -5

    @staticmethod
    def abort(s: socket.socket) -> None:
        pass

    @classmethod
    def get_local_address(cls, s: socket.socket) -> Self:
        raise Exception("not implemented")

    @classmethod
    def get_remote_address(cls, s: socket.socket) -> Self:
        raise Exception("not implemented")

    @property
    def sockaddr(self) -> Any:
        raise Exception("not implemented")

    @classmethod
    def from_sockaddr(cls, sockaddr: Any) -> Self:
        raise Exception("not implemented")
    
async def various_test_cases():
    try:
        with StreamSocket(BogusAddressType):
            pass
    except Exception as e:
        Assert(readable_repr(e)).contains('Failed to create a BogusAddressType socket (family -5) with close-on-exec True because\n[Errno 97] Address family not supported by protocol.')
    else:
        assert False
        pass
    pass

asyncio.run(main())
asyncio.run(various_test_cases())
