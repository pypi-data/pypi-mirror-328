#!/usr/bin/env python3

# Copyright (c) 2022 Trevor Taylor
# coding: utf-8
# 
# Permission to use, copy, modify, and/or distribute this software for
# any purpose with or without fee is hereby granted, provided that all
# copyright notices and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
from sys import path
from os.path import dirname
if path[0]==dirname(__file__): path.pop(0)
from xju.cmc.io import FileReader, FilePosition
from pathlib import Path
from xju.assert_ import Assert
from xju.xn import readable_repr
from xju.misc import ByteCount
from xju.patch import PatchAttr

import os
from io import TextIOWrapper,FileIO

f:FileReader
try:
    with FileReader(Path("xxx.txt")) as f:
        pass
except Exception as e:
    Assert(readable_repr(e))=="Failed to open xxx.txt reader with close-on-exec True because\n[Errno 2] No such file or directory: 'xxx.txt'."
else:
    assert False, f'should not be here with {f}'
    pass

f2:TextIOWrapper
with open('xxx.txt','w') as f2:
    f2.write('fredward')
    pass

with FileReader(Path("xxx.txt")) as f:
    Assert(f.input.readall().decode('utf-8'))=="fredward"
    Assert(f.size())==ByteCount(8)
    Assert(f.seek_by(ByteCount(-2)).read(ByteCount(2)))==b'rd'
    Assert(f.position())==FilePosition(8)
    Assert(f.seek_to(FilePosition(2)).read(ByteCount(3)))==b'edw'
    # seeking past end is not an error
    Assert(f.seek_to(FilePosition(9)).position())==FilePosition(9)

    try:
        f.seek_to(FilePosition(-1))
    except Exception as e:
        Assert(readable_repr(e).replace('\n',' ')).matches(
            'Failed to position so next read occurs -1 bytes from start of file because.* Invalid argument.')
    else:
        assert False, 'should not b here'
    pass

    try:
        f.seek_by(ByteCount(-11))
    except Exception as e:
        Assert(readable_repr(e))=='Failed to position xxx.txt reader with close-on-exec True so next read occurs -11 bytes from current position because\n[Errno 22] Invalid argument.'
    else:
        assert False, 'should not b here'
    pass

assert not hasattr(f,'input')

def raise_some_error(*args,**kwargs):
    raise Exception('some error')

try:
    with PatchAttr(os,'close',raise_some_error):
        with FileReader(Path("xxx.txt")) as f:
            pass
        pass
    pass
except Exception as e:
    Assert(readable_repr(e))=="Failed to close xxx.txt reader with close-on-exec True because\nsome error."
    pass

with FileReader(Path("xxx.txt")) as f:
    try:
        with PatchAttr(os,'fstat',raise_some_error):
            f.size()
    except Exception as e:
        Assert(readable_repr(e))=="Failed to return size of xxx.txt reader with close-on-exec True's file because\nsome error."
    else:
        assert False
        pass
    pass

with FileReader(Path("xxx.txt")) as f:
    try:
        with PatchAttr(FilePosition,'__init__',raise_some_error):
            f.position()
    except Exception as e:
        Assert(readable_repr(e))=="Failed to get current position of xxx.txt reader with close-on-exec True because\nsome error."
    else:
        assert False
        pass
    pass

with FileReader(Path("xxx.txt")) as f:
    c=ByteCount(1)
    with PatchAttr(ByteCount,'value',raise_some_error):
        try:
            f.read(c)
        except Exception as e:
            Assert('some error').isIn(readable_repr(e))
        else:
            assert False
            pass
        pass
    pass


