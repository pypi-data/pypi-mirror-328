#!/usr/bin/env python3

# Copyright (c) 2022 Trevor Taylor
# coding: utf-8
# 
# Permission to use, copy, modify, and/or distribute this software for
# any purpose with or without fee is hereby granted, provided that all
# copyright notices and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
from sys import path
from os.path import dirname
if path[0]==dirname(__file__): path.pop(0)
from xju.cmc import Thread, Mutex, Lock, Condition

import threading

from xju.time import now, Duration
from xju.assert_ import Assert
from xju.xn import readable_repr
from xju.patch import PatchAttr

flag = False
m = Mutex()
c = Condition(m)

def f() -> int:
    global flag
    with Lock(m) as l:
        flag=True
        c.notify_all(l)
    return 7

with Thread[int](f, lambda: None) as get_result:
    deadline=now()+Duration(1.0)
    with Lock(m) as l:
        c.wait_for(l, Duration(0.01))
        while not flag:
            n=now()
            assert n < deadline
            c.wait_for(l, deadline - n)

Assert(get_result())==7

def fe() -> None:
    raise Exception('fred')
with Thread[None](fe, lambda: None) as get_result_2:
    pass
try:
    get_result_2()
except Exception as e:
    Assert(readable_repr(e))=='fred'
else:
    assert False

def stop_fail():
    raise Exception('stop fails')

try:
    with Thread(f, stop_fail) as t:
        pass
    pass
except Exception as e:
    Assert(readable_repr(e)).contains('stop fails')
else:
    assert False

t3=Thread[int](f, lambda: None)
def start_fail(self):
    raise Exception('start fails')

with PatchAttr(threading.Thread, 'start', start_fail):
    try:
        with t3:
            pass
        pass
    except Exception as e:
        Assert(readable_repr(e)).contains('start fails')
    else:
        assert False
        pass
    pass
