#!/usr/bin/env python3
# Copyright (c) 2022 Trevor Taylor
# coding: utf-8
# 
# Permission to use, copy, modify, and/or distribute this software for
# any purpose with or without fee is hereby granted, provided that all
# copyright notices and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
from sys import path
from os.path import dirname
if path[0]==dirname(__file__): path.pop(0)
from xju.cmc.tstore import TStore,BucketID,BucketStart,BucketExists,NoSuchBucket,Writer,Reader

from typing import cast,Callable
from pathlib import Path
from xju.assert_ import Assert
from xju.time import Hours,now,Timestamp,Seconds
from xju.cmc.io import FileMode,FilePosition,FileWriter,FileReader
from xju.misc import ByteCount
from xju.patch import PatchAttr
from xju.xn import readable_repr,in_function_context
from io import FileIO
import os
import json

def raise_some_error(*args, **kwargs):
    raise Exception('some error')


r:Reader
w:Writer

d=Path(os.getcwd())
# read non-existent
try:
    tstore=TStore(d/'x.tstore')
except FileNotFoundError as e:
    Assert(f"No such file or directory: '{d}/x.tstore/tstore.json'").isIn(str(e))
    pass
else:
    assert False, tstore
    pass

# create max 3 buckets, max 30 bytes
with PatchAttr(json,'dumps',raise_some_error):
    try:
        tstore=TStore(d/'x.tstore',Hours(1),3,ByteCount(30),FileMode(0o777))
    except Exception as e:
        Assert('some error').isIn(readable_repr(e))
        pass
    pass

tstore=TStore(d/'x.tstore',Hours(1),3,ByteCount(30),FileMode(0o777))

# create exists
try:
    x=TStore(d/'x.tstore',Hours(1),3,ByteCount(30),FileMode(0o777))
except FileExistsError as e:
    Assert(f"File exists: '{d}/x.tstore'").isIn(str(e))
else:
    assert False, x
    pass

t1=now()

# create bucket @t1
s1=tstore.calc_bucket_start(t1)
id1=BucketID('1')

with PatchAttr(Path, 'mkdir', raise_some_error):
    try:
        tstore.create_bucket(s1,id1)
    except Exception as e:
        Assert('some error').isIn(readable_repr(e))
        pass
    else:
        assert False
        pass
    pass

tstore.create_bucket(s1,id1)
try:
    tstore.create_bucket(s1,id1)
except BucketExists as e:
    Assert(f'').isIn(str(e))
    pass
else:
    assert False, 'no BucketExists'
    pass
# write 30 bytes @t1
with tstore.new_writer(s1,id1) as w:
    thirty_bytes:bytes=b''.join([i.to_bytes(1,'little') for i in range(0,30)])
    w.append(thirty_bytes)

    # read back via get_buckets_of t1..t1+1
    buckets=tstore.get_buckets_of(t1,t1+Seconds(1))
    Assert(buckets)==buckets[0:1]
    for bucket_start,bucket_id in buckets:
        with cast(Reader,tstore.new_reader(bucket_start,bucket_id)) as r:
            Assert(str(r))==f'TStore {r.storage_path} reader for bucket with start {bucket_start} and id {bucket_id}'
            Assert(r.size())==ByteCount(30)
            Assert(r.read(ByteCount(15)))==thirty_bytes[0:15]
            with PatchAttr(FileReader,'position',raise_some_error):
                try:
                    r.position()
                except Exception as e:
                    Assert('some error').isIn(str(e))
                    pass
                else:
                    assert False
                    pass
                pass
            r.seek_to(FilePosition(10))
            Assert(r.read(ByteCount(5)))==thirty_bytes[10:15]
            r.seek_by(ByteCount(8))
            Assert(r.read(ByteCount(13)))==thirty_bytes[23:]
            pass
        pass
    pass

# list unseen having seen nothing
Assert(tstore.list_unseen({}))=={ (s1,id1):ByteCount(30) }

# list unseen having seen half
Assert(tstore.list_unseen({(s1,id1):ByteCount(15)}))=={ (s1,id1):ByteCount(30) }

# list unseen having seen all
Assert(tstore.list_unseen({(s1,id1):ByteCount(30)}))=={}

# list unseen having seen non-existent
Assert(tstore.list_unseen({(s1,BucketID('2')):ByteCount(30)}))=={ (s1,BucketID('2')): ByteCount(0),
                                                                  (s1,id1):ByteCount(30)}

tstore.verify_bucket_exists(s1,id1)
try:
    tstore.verify_bucket_exists(s1,BucketID('2'))
except BucketExists as e:
    Assert(f"bucket at {s1} exists with uid 1").isIn(str(e))
    pass
else:
    assert False, f"BucketID('2') should not exist at {s1}"
    pass

s2=tstore.calc_bucket_start(t1+Hours(1))
Assert(s1)<s2
id2=BucketID('2')

# verify can't write 1 byte
Assert(tstore.current_size())==ByteCount(30)

# delete bucket
tstore.delete_bucket(s1,id1)

Assert(tstore.current_size())==ByteCount(0)
Assert(tstore.list_unseen({}))=={}
try:
    tstore.verify_bucket_exists(s1,id1)
except NoSuchBucket as e:
    Assert(f"no bucket starting at {s1}").isIn(str(e))
    pass
else:
    assert False, f'bucket {id1} should not exist at {s1}'
    pass

t0=t1-Hours(2)
s0=tstore.calc_bucket_start(t0)
id0=BucketID('0')

s3=tstore.calc_bucket_start(t1+Hours(2))
Assert(s3)>s2
id3=BucketID('3')

tstore.create_bucket(s0,id0)
tstore.create_bucket(s1,id1)
tstore.create_bucket(s2,id2)
# fail to remove bucket s0 to make room
with PatchAttr(Path,'unlink',raise_some_error):
    try:
        tstore.create_bucket(s3,id3)
    except Exception as e:
        Assert('some error').isIn(str(e))
        pass
    pass

tstore.create_bucket(s3,id3)

# write 10 bytes
with tstore.new_writer(s1,id1) as w:
    with PatchAttr(FileWriter,'seek_to',raise_some_error):
        try:
            w.append(b'0123456789')
        except Exception as e:
            Assert('some error').isIn(str(e))
            pass
        pass
    with PatchAttr(TStore,'get_bucket_size',raise_some_error):
        try:
            w.size()
        except Exception as e:
            Assert('some error').isIn(str(e))
            pass
        pass
            
    w.append(b'0123456789')
    Assert(tstore.current_size())==ByteCount(10)
    pass

# write 10 bytes @bucket_start(t1)+3600
with tstore.new_writer(s2,id2) as w:
    w.append(b'abcdefghij')
    Assert(tstore.current_size())==ByteCount(20)
    pass

# write 10 bytes @t1+2*3600
with tstore.new_writer(s3,id3) as w:
    w.append(b'abcde01234')
    Assert(tstore.current_size())==ByteCount(30)
    pass

# list unseen t1 - 3600..t1+3*3600 -> 3 buckets, 10 bytes each
Assert(tstore.list_unseen({}))=={ (s1,id1): ByteCount(10),
                                  (s2,id2): ByteCount(10),
                                  (s3,id3): ByteCount(10) }


# read data and verify
with tstore.new_reader(s1,id1) as r:
    Assert(r.read(ByteCount(11)))==b'0123456789'
    pass
with tstore.new_reader(s2,id2) as r:
    Assert(r.read(ByteCount(11)))==b'abcdefghij'
    pass
with tstore.new_reader(s3,id3) as r:
    Assert(r.read(ByteCount(11)))==b'abcde01234'
    pass

# make room for 1 byte
with PatchAttr(Path,'unlink',raise_some_error):
    try:
        tstore.make_room_for(ByteCount(10))
    except Exception as e:
        Assert('some error').isIn(str(e))
        pass
    pass
tstore.make_room_for(ByteCount(1))

# verify 2 buckets
Assert(tstore.list_unseen({}))=={ (s2,id2): ByteCount(10),
                                  (s3,id3): ByteCount(10) }

# make room for 10 bytes
tstore.make_room_for(ByteCount(10))

# verify 2 buckets
Assert(tstore.list_unseen({}))=={ (s2,id2): ByteCount(10),
                                  (s3,id3): ByteCount(10) }

# write 10 bytes to t2 bucket
with PatchAttr(FileWriter,'__init__',raise_some_error):
    try:
        w=tstore.new_writer(s2,id2)
    except Exception as e:
        Assert('some error').isIn(readable_repr(e))
    else:
        assert False,w
        pass
    pass

with tstore.new_writer(s2,id2) as w:
    w.append(b'poiuytrewq')
    Assert(w.size())==ByteCount(20)
    pass

# verify 10 bytes + 20 bytes
with PatchAttr(FileReader,'__init__',raise_some_error):
    try:
        r=tstore.new_reader(s2,id2)
    except Exception as e:
        Assert('some error').isIn(readable_repr(e))
        pass
    else:
        assert False,r
        pass
    pass

with tstore.new_reader(s2,id2) as r:
    with PatchAttr(TStore,'get_bucket_size',raise_some_error):
        try:
            r.size()
        except Exception as e:
            Assert('some error').isIn(str(e))
            pass
        pass
    with PatchAttr(FileReader,'read',raise_some_error):
        try:
            r.read(ByteCount(21))
        except Exception as e:
            Assert('some error').isIn(readable_repr(e))
        else:
            assert False
            pass
        pass
    
    Assert(r.read(ByteCount(21)))==b'abcdefghijpoiuytrewq'
    pass
with tstore.new_reader(s3,id3) as r:
    with PatchAttr(FileReader,'seek_by',raise_some_error):
        try:
            r.seek_by(ByteCount(3))
        except Exception as e:
            Assert('some error').isIn(str(e))
            pass
        pass
    with PatchAttr(FileReader,'seek_to',raise_some_error):
        try:
            r.seek_to(FilePosition(3))
        except Exception as e:
            Assert('some error').isIn(str(e))
            pass
        pass
    r.seek_to(FilePosition(2))
    r.seek_by(ByteCount(1))
    Assert(r.read(ByteCount(11-3)))==b'de01234'
    Assert(r.position())==FilePosition(10)
    r.seek_by(ByteCount(-10))
    Assert(r.read(ByteCount(3)))==b'abc'
    pass

# close - nothing to do

# open existing
with PatchAttr(json,'loads',raise_some_error):
    try:
        tstore=TStore(d/'x.tstore')
    except Exception as e:
        Assert('some error').isIn(readable_repr(e))
    else:
        assert False
        pass
    pass

p=[Path(dir) for dir,dirnames,filenames in os.walk(d/'x.tstore')
   if len(filenames) and any(f for f in filenames if f.endswith('.txt'))][0]
try:
    with FileWriter(p/'13.txt',mode=FileMode(0o777)):
        pass
    try:
        tstore=TStore(d/'x.tstore')
    except Exception as e:
        Assert('expected at most one bucket data file').isIn(readable_repr(e))
    else:
        assert False
        pass
    pass
finally:
    (p/'13.txt').unlink()
    pass

tstore=TStore(d/'x.tstore')
Assert(tstore.storage_path)==d/'x.tstore'
Assert(tstore.hours_per_bucket)==Hours(1)
Assert(tstore.max_buckets)==3
Assert(tstore.max_size)==ByteCount(30)
Assert(tstore.file_creation_mode)==FileMode(0o777)
Assert(tstore.calc_bucket_start(t1))==s1
Assert(tstore.calc_bucket_start(t1+Hours(1)))==s2
Assert(tstore.calc_bucket_start(t1+Hours(2)))==s3
id2=tstore.get_bucket(s2)
id3=tstore.get_bucket(s3)
Assert(tstore.current_size())==ByteCount(30)
# verify 2 buckets
Assert(tstore.list_unseen({}))=={ (s2,id2): ByteCount(20),
                                  (s3,id3): ByteCount(10) }
# verify 10 bytes + 20 bytes
with tstore.new_reader(s2,id2) as r:
    Assert(r.read(ByteCount(21)))==b'abcdefghijpoiuytrewq'
    pass
with tstore.new_reader(s3,id3) as r:
    Assert(r.read(ByteCount(11)))==b'abcde01234'
    pass

s4=tstore.calc_bucket_start(t1+Hours(3))
id4=BucketID('4')

tstore.create_bucket(s4,id4)

# verify 2 non-empty buckets
Assert(tstore.list_unseen({}))=={ (s2,id2): ByteCount(20),
                                  (s3,id3): ByteCount(10) }

s5=tstore.calc_bucket_start(t1+Hours(5))
id5=BucketID('5')

# deletes oldest bucket as max_buckets is three
tstore.create_bucket(s5,id5)

# verify 1 non-empty buckets
Assert(tstore.list_unseen({}))=={ (s3,id3): ByteCount(10) }

# should not have any empty leaf dirs
def verify_no_empty_leaf_dirs(d:Path):
    '''verify directory {d} is not empty and neither are any of its descendent dirs'''
    try:
        Assert(d.is_dir())==True
        children=list(d.iterdir())
        Assert(children)!=[]
        child:Path
        for child in children:
            if child.is_dir():
                verify_no_empty_leaf_dirs(child)
                pass
            pass
        pass
    except Exception:
        raise in_function_context(verify_no_empty_leaf_dirs,vars()) from None
    pass

verify_no_empty_leaf_dirs(d/'x.tstore')

# how long to sort 10000 bucket starts?
def time_sort():
    import random
    import bisect
    buckets={ (BucketStart(int(random.random()*1000000)), BucketID(str(i))) : f'{i}' for i in range(0,10000) }

    before=now()
    all_buckets=[bucket_start for bucket_start,bucket_id in buckets.keys()]
    all_buckets.sort()
    bisect.bisect_left(all_buckets,BucketStart(int(1000000*random.random())))
    bisect.bisect_right(all_buckets,BucketStart(int(1000000*random.random())))
    after=now()
    return after-before

print(f'time to sort 10000 buckets: '+str(time_sort()))
