name: Tests

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

concurrency:
  group: fast-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test_qek:
    name: Run unit/integration tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout QEK
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Hatch
      run: |
        pip install hatch
    - name: Pre-download dataset
        # On macOS (and only on macOS), we encounter a strange issue:
        #
        # - loading the dataset causes a FileNotFoundException to be raised
        # - checking afterwards, the dataset *is* on the disk
        # - rerunning the process, the dataset is found.
        #
        # The running hypothesis is that pytorch-geometric downloads the
        # dataset asynchronously, but fails to wait until the download is
        # complete.
        #
        # With this small script, we force the pipeline to wait until the
        # download is complete. So far, this seems to solve the issue.
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        hatch -v run before_tests
    - name: Run tests
      run: |
        hatch -v run test
        hatch -v run test_readme
    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      with:
        name: "coverage-data"
        path: .coverage.*
        if-no-files-found: ignore

  test_notebook:
    name: Run the Jupyter notebook tutorial (Unix)
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout QEK
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Hatch
        run: |
          pip install hatch
      - name: Pre-download dataset
        if: ${{ matrix.os == 'macos-latest' }}
        # On macOS (and only on macOS), we encounter a strange issue:
        #
        # - loading the dataset causes a FileNotFoundException to be raised
        # - checking afterwards, the dataset *is* on the disk
        # - rerunning the process, the dataset is found.
        #
        # The running hypothesis is that pytorch-geometric downloads the
        # dataset asynchronously, but fails to wait until the download is
        # complete.
        #
        # With this small script, we force the pipeline to wait until the
        # download is complete. So far, this seems to solve the issue.
        run: |
          hatch -v run before_tests
      - name: Copy samples
        run: |
          cp examples/ptcfm_processed_dataset.json .
      - name: Run notebooks
        run: |
          hatch run pip install jupyter
          for tutorial in examples/tutorial*.ipynb; do
            hatch run jupyter execute "$tutorial";
          done

  test_notebook_windows:
    name: Run the Jupyter notebook tutorial (Windows)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout QEK
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Hatch
        run: |
          pip install hatch
      - name: Copy samples
        run: |
          cp examples/ptcfm_processed_dataset.json .
      - name: Run notebook
        run: |
          hatch run pip install jupyter
          $files = Get-ChildItem -Path examples -Include *.ipynb
          foreach($tutorial in $files) {
            hatch run jupyter execute "$tutorial"
          }

  publish:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test_qek
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Check out QEK
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build and publish package
        run: |
          hatch build
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Confirm deployment
        timeout-minutes: 5
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          until pip download quantum-evolution-kernel==$VERSION
          do
            echo "Failed to download from PyPI, will wait for upload and retry."
            sleep 1
          done

  deploy_docs:
    name: Deploy QEK docs (ubuntu)
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test_qek
    runs-on: ubuntu-latest
    steps:
    - name: Checkout QEK
      uses: actions/checkout@v4
    - name: Install JetBrains Mono font
      run: |
        sudo apt install -y wget unzip fontconfig
        wget https://download.jetbrains.com/fonts/JetBrainsMono-2.304.zip
        unzip JetBrainsMono-2.304.zip -d JetBrainsMono
        mkdir -p /usr/share/fonts/truetype/jetbrains
        cp JetBrainsMono/fonts/ttf/*.ttf /usr/share/fonts/truetype/jetbrains/
        fc-cache -f -v
    - name: Install graphviz
      run: sudo apt-get install -y graphviz
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install Hatch
      run: |
        pip install hatch
    - name: Deploy docs
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git fetch origin gh-pages
        hatch -v run docs:mike deploy --push --update-aliases ${{ github.ref_name }} latest
